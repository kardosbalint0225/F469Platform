
f469_media_player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c24  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08013de4  08013de4  00023de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080143c0  080143c0  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  080143c0  080143c0  000243c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080143c8  080143c8  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080143c8  080143c8  000243c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080143cc  080143cc  000243cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080143d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          00008fd4  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009068  20009068  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f75a  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000972b  00000000  00000000  0006f81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e68  00000000  00000000  00078f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002a80  00000000  00000000  0007bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003af61  00000000  00000000  0007e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004deb1  00000000  00000000  000b9799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00126adb  00000000  00000000  0010764a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0022e125  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c154  00000000  00000000  0022e178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000094 	.word	0x20000094
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08013dcc 	.word	0x08013dcc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000098 	.word	0x20000098
 80001fc:	08013dcc 	.word	0x08013dcc

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_CRC_Init+0x20>)
 800050a:	4a07      	ldr	r2, [pc, #28]	; (8000528 <MX_CRC_Init+0x24>)
 800050c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_CRC_Init+0x20>)
 8000510:	f001 fdec 	bl	80020ec <HAL_CRC_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800051a:	f000 ff19 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200000b0 	.word	0x200000b0
 8000528:	40023000 	.word	0x40023000

0800052c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <HAL_CRC_MspInit+0x3c>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d10d      	bne.n	800055a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <HAL_CRC_MspInit+0x40>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a09      	ldr	r2, [pc, #36]	; (800056c <HAL_CRC_MspInit+0x40>)
 8000548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <HAL_CRC_MspInit+0x40>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40023000 	.word	0x40023000
 800056c:	40023800 	.word	0x40023800

08000570 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_DMA2D_Init+0x5c>)
 8000576:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <MX_DMA2D_Init+0x60>)
 8000578:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_DMA2D_Init+0x5c>)
 800057c:	2200      	movs	r2, #0
 800057e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_DMA2D_Init+0x5c>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_DMA2D_Init+0x5c>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_DMA2D_Init+0x5c>)
 800058e:	2200      	movs	r2, #0
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_DMA2D_Init+0x5c>)
 8000594:	2200      	movs	r2, #0
 8000596:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_DMA2D_Init+0x5c>)
 800059a:	2200      	movs	r2, #0
 800059c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_DMA2D_Init+0x5c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005a4:	4809      	ldr	r0, [pc, #36]	; (80005cc <MX_DMA2D_Init+0x5c>)
 80005a6:	f001 fe6b 	bl	8002280 <HAL_DMA2D_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005b0:	f000 fece 	bl	8001350 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005b4:	2101      	movs	r1, #1
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_DMA2D_Init+0x5c>)
 80005b8:	f002 f800 	bl	80025bc <HAL_DMA2D_ConfigLayer>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005c2:	f000 fec5 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000b8 	.word	0x200000b8
 80005d0:	4002b000 	.word	0x4002b000

080005d4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0e      	ldr	r2, [pc, #56]	; (800061c <HAL_DMA2D_MspInit+0x48>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d115      	bne.n	8000612 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_DMA2D_MspInit+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <HAL_DMA2D_MspInit+0x4c>)
 80005f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_DMA2D_MspInit+0x4c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2105      	movs	r1, #5
 8000606:	205a      	movs	r0, #90	; 0x5a
 8000608:	f001 fd2c 	bl	8002064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800060c:	205a      	movs	r0, #90	; 0x5a
 800060e:	f001 fd55 	bl	80020bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	4002b000 	.word	0x4002b000
 8000620:	40023800 	.word	0x40023800

08000624 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0aa      	sub	sp, #168	; 0xa8
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800062a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000636:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800063a:	2224      	movs	r2, #36	; 0x24
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f013 fa56 	bl	8013af0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000644:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
 8000654:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800065a:	2234      	movs	r2, #52	; 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f013 fa46 	bl	8013af0 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	222c      	movs	r2, #44	; 0x2c
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f013 fa40 	bl	8013af0 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000670:	4b6a      	ldr	r3, [pc, #424]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000672:	4a6b      	ldr	r2, [pc, #428]	; (8000820 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000674:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000676:	4b69      	ldr	r3, [pc, #420]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800067c:	4b67      	ldr	r3, [pc, #412]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 800067e:	2204      	movs	r2, #4
 8000680:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000682:	4b66      	ldr	r3, [pc, #408]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000684:	2201      	movs	r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000688:	237d      	movs	r3, #125	; 0x7d
 800068a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800069a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800069e:	4619      	mov	r1, r3
 80006a0:	485e      	ldr	r0, [pc, #376]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 80006a2:	f002 f8b5 	bl	8002810 <HAL_DSI_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 80006ac:	f000 fe50 	bl	8001350 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80006e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80006e6:	4619      	mov	r1, r3
 80006e8:	484c      	ldr	r0, [pc, #304]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 80006ea:	f002 fecf 	bl	800348c <HAL_DSI_ConfigHostTimeouts>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80006f4:	f000 fe2c 	bl	8001350 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80006f8:	231c      	movs	r3, #28
 80006fa:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80006fc:	2321      	movs	r3, #33	; 0x21
 80006fe:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000700:	230f      	movs	r3, #15
 8000702:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000704:	2319      	movs	r3, #25
 8000706:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 800070c:	230a      	movs	r3, #10
 800070e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000710:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000714:	4619      	mov	r1, r3
 8000716:	4841      	ldr	r0, [pc, #260]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000718:	f002 fe4e 	bl	80033b8 <HAL_DSI_ConfigPhyTimer>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000722:	f000 fe15 	bl	8001350 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000726:	2104      	movs	r1, #4
 8000728:	483c      	ldr	r0, [pc, #240]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 800072a:	f002 fe13 	bl	8003354 <HAL_DSI_ConfigFlowControl>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000734:	f000 fe0c 	bl	8001350 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000738:	f242 7110 	movw	r1, #10000	; 0x2710
 800073c:	4837      	ldr	r0, [pc, #220]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 800073e:	f002 ff6b 	bl	8003618 <HAL_DSI_SetLowPowerRXFilter>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000748:	f000 fe02 	bl	8001350 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4833      	ldr	r0, [pc, #204]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000750:	f002 f9da 	bl	8002b08 <HAL_DSI_ConfigErrorMonitor>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800075a:	f000 fdf9 	bl	8001350 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800075e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 800076a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000770:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000782:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000786:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800078e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000794:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000798:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 800079a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800079e:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80007a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007a4:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80007aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ae:	4619      	mov	r1, r3
 80007b0:	481a      	ldr	r0, [pc, #104]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 80007b2:	f002 fcbd 	bl	8003130 <HAL_DSI_ConfigCommand>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 80007bc:	f000 fdc8 	bl	8001350 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 80007c4:	2305      	movs	r3, #5
 80007c6:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 80007c8:	23c8      	movs	r3, #200	; 0xc8
 80007ca:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80007cc:	2310      	movs	r3, #16
 80007ce:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80007d4:	2304      	movs	r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80007d8:	2302      	movs	r3, #2
 80007da:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 80007e4:	2340      	movs	r3, #64	; 0x40
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	480a      	ldr	r0, [pc, #40]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 80007f2:	f002 fb55 	bl	8002ea0 <HAL_DSI_ConfigAdaptedCommandMode>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 80007fc:	f000 fda8 	bl	8001350 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000800:	2100      	movs	r1, #0
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <MX_DSIHOST_DSI_Init+0x1f8>)
 8000804:	f002 fb24 	bl	8002e50 <HAL_DSI_SetGenericVCID>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 800080e:	f000 fd9f 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	37a8      	adds	r7, #168	; 0xa8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000f8 	.word	0x200000f8
 8000820:	40016c00 	.word	0x40016c00

08000824 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(dsiHandle->Instance==DSI)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a1d      	ldr	r2, [pc, #116]	; (80008b8 <HAL_DSI_MspInit+0x94>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d133      	bne.n	80008ae <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_DSI_MspInit+0x98>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <HAL_DSI_MspInit+0x98>)
 8000850:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_DSI_MspInit+0x98>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_DSI_MspInit+0x98>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <HAL_DSI_MspInit+0x98>)
 800086c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_DSI_MspInit+0x98>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 800087e:	2304      	movs	r3, #4
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800088e:	230d      	movs	r3, #13
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <HAL_DSI_MspInit+0x9c>)
 800089a:	f002 feeb 	bl	8003674 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	205c      	movs	r0, #92	; 0x5c
 80008a4:	f001 fbde 	bl	8002064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80008a8:	205c      	movs	r0, #92	; 0x5c
 80008aa:	f001 fc07 	bl	80020bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40016c00 	.word	0x40016c00
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40022400 	.word	0x40022400

080008c4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
 80008d8:	615a      	str	r2, [r3, #20]
 80008da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_FMC_Init+0x98>)
 80008de:	4a20      	ldr	r2, [pc, #128]	; (8000960 <MX_FMC_Init+0x9c>)
 80008e0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_FMC_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_FMC_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_FMC_Init+0x98>)
 80008f0:	2204      	movs	r2, #4
 80008f2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_FMC_Init+0x98>)
 80008f6:	2220      	movs	r2, #32
 80008f8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_FMC_Init+0x98>)
 80008fc:	2240      	movs	r2, #64	; 0x40
 80008fe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_FMC_Init+0x98>)
 8000902:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000906:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_FMC_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_FMC_Init+0x98>)
 8000910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000914:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_FMC_Init+0x98>)
 8000918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_FMC_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000924:	2302      	movs	r3, #2
 8000926:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000928:	2307      	movs	r3, #7
 800092a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800092c:	2304      	movs	r3, #4
 800092e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000930:	2307      	movs	r3, #7
 8000932:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000934:	2303      	movs	r3, #3
 8000936:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_FMC_Init+0x98>)
 8000946:	f008 fefe 	bl	8009746 <HAL_SDRAM_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000950:	f000 fcfe 	bl	8001350 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000114 	.word	0x20000114
 8000960:	a0000140 	.word	0xa0000140

08000964 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000978:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <HAL_FMC_MspInit+0x128>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	f040 8081 	bne.w	8000a84 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8000982:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <HAL_FMC_MspInit+0x128>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <HAL_FMC_MspInit+0x12c>)
 800098e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000990:	4a3f      	ldr	r2, [pc, #252]	; (8000a90 <HAL_FMC_MspInit+0x12c>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	6393      	str	r3, [r2, #56]	; 0x38
 8000998:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <HAL_FMC_MspInit+0x12c>)
 800099a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80009a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009a8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009b6:	230c      	movs	r3, #12
 80009b8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4835      	ldr	r0, [pc, #212]	; (8000a94 <HAL_FMC_MspInit+0x130>)
 80009c0:	f002 fe58 	bl	8003674 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80009c4:	f248 1333 	movw	r3, #33075	; 0x8133
 80009c8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009d6:	230c      	movs	r3, #12
 80009d8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	482e      	ldr	r0, [pc, #184]	; (8000a98 <HAL_FMC_MspInit+0x134>)
 80009e0:	f002 fe48 	bl	8003674 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 80009e4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009e8:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009f6:	230c      	movs	r3, #12
 80009f8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4827      	ldr	r0, [pc, #156]	; (8000a9c <HAL_FMC_MspInit+0x138>)
 8000a00:	f002 fe38 	bl	8003674 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000a04:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000a08:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a16:	230c      	movs	r3, #12
 8000a18:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4820      	ldr	r0, [pc, #128]	; (8000aa0 <HAL_FMC_MspInit+0x13c>)
 8000a20:	f002 fe28 	bl	8003674 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000a24:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a28:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a36:	230c      	movs	r3, #12
 8000a38:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4819      	ldr	r0, [pc, #100]	; (8000aa4 <HAL_FMC_MspInit+0x140>)
 8000a40:	f002 fe18 	bl	8003674 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8000a44:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8000a48:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a56:	230c      	movs	r3, #12
 8000a58:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <HAL_FMC_MspInit+0x144>)
 8000a60:	f002 fe08 	bl	8003674 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000a64:	2301      	movs	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a74:	230c      	movs	r3, #12
 8000a76:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <HAL_FMC_MspInit+0x148>)
 8000a7e:	f002 fdf9 	bl	8003674 <HAL_GPIO_Init>
 8000a82:	e000      	b.n	8000a86 <HAL_FMC_MspInit+0x122>
    return;
 8000a84:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000148 	.word	0x20000148
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40021800 	.word	0x40021800
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	40022000 	.word	0x40022000
 8000aa4:	40021400 	.word	0x40021400
 8000aa8:	40021c00 	.word	0x40021c00
 8000aac:	40020800 	.word	0x40020800

08000ab0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000ab8:	f7ff ff54 	bl	8000964 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <vApplicationGetIdleTaskMemory+0x30>)
 8000b0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000150 	.word	0x20000150
 8000b28:	20000208 	.word	0x20000208

08000b2c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b2c:	b5b0      	push	{r4, r5, r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MX_FREERTOS_Init+0x30>)
 8000b34:	1d3c      	adds	r4, r7, #4
 8000b36:	461d      	mov	r5, r3
 8000b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00c fea5 	bl	800d898 <osThreadCreate>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <MX_FREERTOS_Init+0x34>)
 8000b52:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	08013df0 	.word	0x08013df0
 8000b60:	2000014c 	.word	0x2000014c

08000b64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000b6c:	f010 fdc2 	bl	80116f4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f00c fedd 	bl	800d930 <osDelay>
 8000b76:	e7fb      	b.n	8000b70 <StartDefaultTask+0xc>

08000b78 <MX_GPIO_Init>:
/** Configure pins
     PB3   ------> I2S3_CK
     PD13   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b090      	sub	sp, #64	; 0x40
 8000b7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b92:	4bae      	ldr	r3, [pc, #696]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4aad      	ldr	r2, [pc, #692]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4bab      	ldr	r3, [pc, #684]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
 8000bae:	4ba7      	ldr	r3, [pc, #668]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4aa6      	ldr	r2, [pc, #664]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4ba4      	ldr	r3, [pc, #656]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
 8000bca:	4ba0      	ldr	r3, [pc, #640]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a9f      	ldr	r2, [pc, #636]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b9d      	ldr	r3, [pc, #628]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	623b      	str	r3, [r7, #32]
 8000be0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
 8000be6:	4b99      	ldr	r3, [pc, #612]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a98      	ldr	r2, [pc, #608]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b96      	ldr	r3, [pc, #600]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	4b92      	ldr	r3, [pc, #584]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a91      	ldr	r2, [pc, #580]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b8f      	ldr	r3, [pc, #572]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	4b8b      	ldr	r3, [pc, #556]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a8a      	ldr	r2, [pc, #552]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b88      	ldr	r3, [pc, #544]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b84      	ldr	r3, [pc, #528]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a83      	ldr	r2, [pc, #524]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b81      	ldr	r3, [pc, #516]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b7d      	ldr	r3, [pc, #500]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a7c      	ldr	r2, [pc, #496]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c5c:	f043 0320 	orr.w	r3, r3, #32
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b7a      	ldr	r3, [pc, #488]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0320 	and.w	r3, r3, #32
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b76      	ldr	r3, [pc, #472]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a75      	ldr	r2, [pc, #468]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b73      	ldr	r3, [pc, #460]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b6f      	ldr	r3, [pc, #444]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a6e      	ldr	r2, [pc, #440]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b6c      	ldr	r3, [pc, #432]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b68      	ldr	r3, [pc, #416]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a67      	ldr	r2, [pc, #412]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b65      	ldr	r3, [pc, #404]	; (8000e4c <MX_GPIO_Init+0x2d4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	210c      	movs	r1, #12
 8000cc6:	4862      	ldr	r0, [pc, #392]	; (8000e50 <MX_GPIO_Init+0x2d8>)
 8000cc8:	f003 f82a 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2130      	movs	r1, #48	; 0x30
 8000cd0:	4860      	ldr	r0, [pc, #384]	; (8000e54 <MX_GPIO_Init+0x2dc>)
 8000cd2:	f003 f825 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2108      	movs	r1, #8
 8000cda:	485f      	ldr	r0, [pc, #380]	; (8000e58 <MX_GPIO_Init+0x2e0>)
 8000cdc:	f003 f820 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2140      	movs	r1, #64	; 0x40
 8000ce4:	485d      	ldr	r0, [pc, #372]	; (8000e5c <MX_GPIO_Init+0x2e4>)
 8000ce6:	f003 f81b 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2105      	movs	r1, #5
 8000cee:	485c      	ldr	r0, [pc, #368]	; (8000e60 <MX_GPIO_Init+0x2e8>)
 8000cf0:	f003 f816 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	485a      	ldr	r0, [pc, #360]	; (8000e64 <MX_GPIO_Init+0x2ec>)
 8000cfa:	f003 f811 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2108      	movs	r1, #8
 8000d02:	4859      	ldr	r0, [pc, #356]	; (8000e68 <MX_GPIO_Init+0x2f0>)
 8000d04:	f003 f80c 	bl	8003d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	484c      	ldr	r0, [pc, #304]	; (8000e50 <MX_GPIO_Init+0x2d8>)
 8000d20:	f002 fca8 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8000d24:	2308      	movs	r3, #8
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d34:	2306      	movs	r3, #6
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4848      	ldr	r0, [pc, #288]	; (8000e60 <MX_GPIO_Init+0x2e8>)
 8000d40:	f002 fc98 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d56:	4619      	mov	r1, r3
 8000d58:	4841      	ldr	r0, [pc, #260]	; (8000e60 <MX_GPIO_Init+0x2e8>)
 8000d5a:	f002 fc8b 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000d5e:	2330      	movs	r3, #48	; 0x30
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d62:	2311      	movs	r3, #17
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d72:	4619      	mov	r1, r3
 8000d74:	4837      	ldr	r0, [pc, #220]	; (8000e54 <MX_GPIO_Init+0x2dc>)
 8000d76:	f002 fc7d 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d7e:	2311      	movs	r3, #17
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4831      	ldr	r0, [pc, #196]	; (8000e58 <MX_GPIO_Init+0x2e0>)
 8000d92:	f002 fc6f 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000d96:	2340      	movs	r3, #64	; 0x40
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d9a:	2311      	movs	r3, #17
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000daa:	4619      	mov	r1, r3
 8000dac:	482b      	ldr	r0, [pc, #172]	; (8000e5c <MX_GPIO_Init+0x2e4>)
 8000dae:	f002 fc61 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8000db2:	2305      	movs	r3, #5
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4825      	ldr	r0, [pc, #148]	; (8000e60 <MX_GPIO_Init+0x2e8>)
 8000dca:	f002 fc53 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8000dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000de0:	2302      	movs	r3, #2
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	481a      	ldr	r0, [pc, #104]	; (8000e54 <MX_GPIO_Init+0x2dc>)
 8000dec:	f002 fc42 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000df0:	2304      	movs	r3, #4
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e00:	4619      	mov	r1, r3
 8000e02:	4816      	ldr	r0, [pc, #88]	; (8000e5c <MX_GPIO_Init+0x2e4>)
 8000e04:	f002 fc36 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e08:	2320      	movs	r3, #32
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4813      	ldr	r0, [pc, #76]	; (8000e6c <MX_GPIO_Init+0x2f4>)
 8000e1e:	f002 fc29 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e36:	4619      	mov	r1, r3
 8000e38:	480a      	ldr	r0, [pc, #40]	; (8000e64 <MX_GPIO_Init+0x2ec>)
 8000e3a:	f002 fc1b 	bl	8003674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000e3e:	2308      	movs	r3, #8
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e012      	b.n	8000e70 <MX_GPIO_Init+0x2f8>
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	40022800 	.word	0x40022800
 8000e5c:	40021800 	.word	0x40021800
 8000e60:	40020400 	.word	0x40020400
 8000e64:	40021c00 	.word	0x40021c00
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40022400 	.word	0x40022400
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MX_GPIO_Init+0x314>)
 8000e7e:	f002 fbf9 	bl	8003674 <HAL_GPIO_Init>

}
 8000e82:	bf00      	nop
 8000e84:	3740      	adds	r7, #64	; 0x40
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40020000 	.word	0x40020000

08000e90 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <MX_I2C1_Init+0x54>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000e9c:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <MX_I2C1_Init+0x58>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_I2C1_Init+0x50>)
 8000ece:	f004 fb75 	bl	80055bc <HAL_I2C_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ed8:	f000 fa3a 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000408 	.word	0x20000408
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	000186a0 	.word	0x000186a0

08000eec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000ef2:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <MX_I2C2_Init+0x54>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000ef8:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_I2C2_Init+0x58>)
 8000efa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_I2C2_Init+0x50>)
 8000f2a:	f004 fb47 	bl	80055bc <HAL_I2C_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f34:	f000 fa0c 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000045c 	.word	0x2000045c
 8000f40:	40005800 	.word	0x40005800
 8000f44:	000186a0 	.word	0x000186a0

08000f48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08c      	sub	sp, #48	; 0x30
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a32      	ldr	r2, [pc, #200]	; (8001030 <HAL_I2C_MspInit+0xe8>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d12d      	bne.n	8000fc6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	4b31      	ldr	r3, [pc, #196]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a30      	ldr	r2, [pc, #192]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000f86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4825      	ldr	r0, [pc, #148]	; (8001038 <HAL_I2C_MspInit+0xf0>)
 8000fa4:	f002 fb66 	bl	8003674 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	4b21      	ldr	r3, [pc, #132]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	4a20      	ldr	r2, [pc, #128]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000fc4:	e030      	b.n	8001028 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <HAL_I2C_MspInit+0xf4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d12b      	bne.n	8001028 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	4a16      	ldr	r2, [pc, #88]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fde:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000fec:	2330      	movs	r3, #48	; 0x30
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff0:	2312      	movs	r3, #18
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <HAL_I2C_MspInit+0xf8>)
 8001008:	f002 fb34 	bl	8003674 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_I2C_MspInit+0xec>)
 8001016:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_I2C_MspInit+0xec>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	; 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40005400 	.word	0x40005400
 8001034:	40023800 	.word	0x40023800
 8001038:	40020400 	.word	0x40020400
 800103c:	40005800 	.word	0x40005800
 8001040:	40021c00 	.word	0x40021c00

08001044 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2234      	movs	r2, #52	; 0x34
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f012 fd4d 	bl	8013af0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001056:	4b38      	ldr	r3, [pc, #224]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001058:	4a38      	ldr	r2, [pc, #224]	; (800113c <MX_LTDC_Init+0xf8>)
 800105a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <MX_LTDC_Init+0xf4>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001062:	4b35      	ldr	r3, [pc, #212]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001068:	4b33      	ldr	r3, [pc, #204]	; (8001138 <MX_LTDC_Init+0xf4>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800106e:	4b32      	ldr	r3, [pc, #200]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001074:	4b30      	ldr	r3, [pc, #192]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800107a:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <MX_LTDC_Init+0xf4>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8001080:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001082:	2201      	movs	r2, #1
 8001084:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001088:	2201      	movs	r2, #1
 800108a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <MX_LTDC_Init+0xf4>)
 800108e:	22c9      	movs	r2, #201	; 0xc9
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001094:	f240 12e1 	movw	r2, #481	; 0x1e1
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 800109a:	4b27      	ldr	r3, [pc, #156]	; (8001138 <MX_LTDC_Init+0xf4>)
 800109c:	22ca      	movs	r2, #202	; 0xca
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <MX_LTDC_Init+0xf4>)
 80010a2:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <MX_LTDC_Init+0xf4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_LTDC_Init+0xf4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_LTDC_Init+0xf4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010c0:	481d      	ldr	r0, [pc, #116]	; (8001138 <MX_LTDC_Init+0xf4>)
 80010c2:	f004 fc47 	bl	8005954 <HAL_LTDC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 80010cc:	f000 f940 	bl	8001350 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 80010d4:	23c8      	movs	r3, #200	; 0xc8
 80010d6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80010dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010e0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80010e2:	2302      	movs	r3, #2
 80010e4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010f2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010f4:	2307      	movs	r3, #7
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80010f8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 80010fe:	23c8      	movs	r3, #200	; 0xc8
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001102:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_LTDC_Init+0xf4>)
 8001122:	f004 fe33 	bl	8005d8c <HAL_LTDC_ConfigLayer>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 800112c:	f000 f910 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	; 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200004b0 	.word	0x200004b0
 800113c:	40016800 	.word	0x40016800

08001140 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  if(ltdcHandle->Instance==LTDC)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_LTDC_MspInit+0x48>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d115      	bne.n	800117e <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_LTDC_MspInit+0x4c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_LTDC_MspInit+0x4c>)
 800115c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_LTDC_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2105      	movs	r1, #5
 8001172:	2058      	movs	r0, #88	; 0x58
 8001174:	f000 ff76 	bl	8002064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001178:	2058      	movs	r0, #88	; 0x58
 800117a:	f000 ff9f 	bl	80020bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40016800 	.word	0x40016800
 800118c:	40023800 	.word	0x40023800

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001194:	f000 fe32 	bl	8001dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 f828 	bl	80011ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800119c:	f000 f89a 	bl	80012d4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a0:	f7ff fcea 	bl	8000b78 <MX_GPIO_Init>
  MX_CRC_Init();
 80011a4:	f7ff f9ae 	bl	8000504 <MX_CRC_Init>
  MX_DMA2D_Init();
 80011a8:	f7ff f9e2 	bl	8000570 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80011ac:	f7ff fa3a 	bl	8000624 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 80011b0:	f7ff fb88 	bl	80008c4 <MX_FMC_Init>
  MX_I2C1_Init();
 80011b4:	f7ff fe6c 	bl	8000e90 <MX_I2C1_Init>
  MX_I2C2_Init();
 80011b8:	f7ff fe98 	bl	8000eec <MX_I2C2_Init>
  MX_LTDC_Init();
 80011bc:	f7ff ff42 	bl	8001044 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80011c0:	f000 f8d6 	bl	8001370 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80011c4:	f000 f9ca 	bl	800155c <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 80011c8:	f000 fa86 	bl	80016d8 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 80011cc:	f000 fc44 	bl	8001a58 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80011d0:	f000 fcb4 	bl	8001b3c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80011d4:	f000 fcdc 	bl	8001b90 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80011d8:	f00b ffdc 	bl	800d194 <MX_FATFS_Init>
  MX_RTC_Init();
 80011dc:	f000 f96e 	bl	80014bc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80011e0:	f7ff fca4 	bl	8000b2c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011e4:	f00c fb35 	bl	800d852 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <main+0x58>
	...

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	; 0x50
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	2234      	movs	r2, #52	; 0x34
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f012 fc78 	bl	8013af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <SystemClock_Config+0xe0>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a2c      	ldr	r2, [pc, #176]	; (80012cc <SystemClock_Config+0xe0>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <SystemClock_Config+0xe0>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <SystemClock_Config+0xe4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <SystemClock_Config+0xe4>)
 8001236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <SystemClock_Config+0xe4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001248:	2305      	movs	r3, #5
 800124a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800124c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001250:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001252:	2301      	movs	r3, #1
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001256:	2302      	movs	r3, #2
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001260:	2304      	movs	r3, #4
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001264:	23b4      	movs	r3, #180	; 0xb4
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001268:	2302      	movs	r3, #2
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800126c:	2306      	movs	r3, #6
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8001270:	2306      	movs	r3, #6
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4618      	mov	r0, r3
 800127a:	f006 f8b7 	bl	80073ec <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001284:	f000 f864 	bl	8001350 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001288:	f004 fff0 	bl	800626c <HAL_PWREx_EnableOverDrive>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001292:	f000 f85d 	bl	8001350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2302      	movs	r3, #2
 800129c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	2105      	movs	r1, #5
 80012b4:	4618      	mov	r0, r3
 80012b6:	f005 f97d 	bl	80065b4 <HAL_RCC_ClockConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80012c0:	f000 f846 	bl	8001350 <Error_Handler>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3750      	adds	r7, #80	; 0x50
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b090      	sub	sp, #64	; 0x40
 80012d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	223c      	movs	r2, #60	; 0x3c
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f012 fc05 	bl	8013af0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 80012e6:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80012ea:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 80012ec:	2390      	movs	r3, #144	; 0x90
 80012ee:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 80012f8:	2306      	movs	r3, #6
 80012fa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8001306:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800130c:	2300      	movs	r3, #0
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4618      	mov	r0, r3
 8001314:	f005 fc60 	bl	8006bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800131e:	f000 f817 	bl	8001350 <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3740      	adds	r7, #64	; 0x40
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800133e:	f000 fd7f 	bl	8001e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40001000 	.word	0x40001000

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>

0800135a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_QUADSPI_Init+0x50>)
 8001376:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <MX_QUADSPI_Init+0x54>)
 8001378:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_QUADSPI_Init+0x50>)
 800137c:	2201      	movs	r2, #1
 800137e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_QUADSPI_Init+0x50>)
 8001382:	2201      	movs	r2, #1
 8001384:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_QUADSPI_Init+0x50>)
 8001388:	2210      	movs	r2, #16
 800138a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_QUADSPI_Init+0x50>)
 800138e:	2218      	movs	r2, #24
 8001390:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_QUADSPI_Init+0x50>)
 8001394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001398:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_QUADSPI_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <MX_QUADSPI_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_QUADSPI_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_QUADSPI_Init+0x50>)
 80013ae:	f004 ffad 	bl	800630c <HAL_QSPI_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80013b8:	f7ff ffca 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000558 	.word	0x20000558
 80013c4:	a0001000 	.word	0xa0001000

080013c8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a31      	ldr	r2, [pc, #196]	; (80014ac <HAL_QSPI_MspInit+0xe4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d15b      	bne.n	80014a2 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <HAL_QSPI_MspInit+0xe8>)
 80013f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f2:	4a2f      	ldr	r2, [pc, #188]	; (80014b0 <HAL_QSPI_MspInit+0xe8>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6393      	str	r3, [r2, #56]	; 0x38
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <HAL_QSPI_MspInit+0xe8>)
 80013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <HAL_QSPI_MspInit+0xe8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a28      	ldr	r2, [pc, #160]	; (80014b0 <HAL_QSPI_MspInit+0xe8>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <HAL_QSPI_MspInit+0xe8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_QSPI_MspInit+0xe8>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <HAL_QSPI_MspInit+0xe8>)
 800142c:	f043 0320 	orr.w	r3, r3, #32
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_QSPI_MspInit+0xe8>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800143e:	2340      	movs	r3, #64	; 0x40
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800144e:	230a      	movs	r3, #10
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4816      	ldr	r0, [pc, #88]	; (80014b4 <HAL_QSPI_MspInit+0xec>)
 800145a:	f002 f90b 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 800145e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001470:	2309      	movs	r3, #9
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	480f      	ldr	r0, [pc, #60]	; (80014b8 <HAL_QSPI_MspInit+0xf0>)
 800147c:	f002 f8fa 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001480:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001492:	230a      	movs	r3, #10
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <HAL_QSPI_MspInit+0xf0>)
 800149e:	f002 f8e9 	bl	8003674 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	a0001000 	.word	0xa0001000
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40021400 	.word	0x40021400

080014bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_RTC_Init+0x44>)
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <MX_RTC_Init+0x48>)
 80014c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_RTC_Init+0x44>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_RTC_Init+0x44>)
 80014ce:	227f      	movs	r2, #127	; 0x7f
 80014d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_RTC_Init+0x44>)
 80014d4:	22ff      	movs	r2, #255	; 0xff
 80014d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_RTC_Init+0x44>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_RTC_Init+0x44>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_RTC_Init+0x44>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_RTC_Init+0x44>)
 80014ec:	f006 fac2 	bl	8007a74 <HAL_RTC_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80014f6:	f7ff ff2b 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200005a4 	.word	0x200005a4
 8001504:	40002800 	.word	0x40002800

08001508 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b092      	sub	sp, #72	; 0x48
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	223c      	movs	r2, #60	; 0x3c
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f012 fae9 	bl	8013af0 <memset>
  if(rtcHandle->Instance==RTC)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <HAL_RTC_MspInit+0x4c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d111      	bne.n	800154c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001528:	2320      	movs	r3, #32
 800152a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800152c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001530:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	4618      	mov	r0, r3
 8001538:	f005 fb4e 	bl	8006bd8 <HAL_RCCEx_PeriphCLKConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001542:	f7ff ff05 	bl	8001350 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <HAL_RTC_MspInit+0x50>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800154c:	bf00      	nop
 800154e:	3748      	adds	r7, #72	; 0x48
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40002800 	.word	0x40002800
 8001558:	42470e3c 	.word	0x42470e3c

0800155c <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <MX_SAI1_Init+0xb0>)
 8001562:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <MX_SAI1_Init+0xb4>)
 8001564:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001566:	4b29      	ldr	r3, [pc, #164]	; (800160c <MX_SAI1_Init+0xb0>)
 8001568:	2200      	movs	r2, #0
 800156a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <MX_SAI1_Init+0xb0>)
 800156e:	2200      	movs	r2, #0
 8001570:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <MX_SAI1_Init+0xb0>)
 8001574:	2240      	movs	r2, #64	; 0x40
 8001576:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <MX_SAI1_Init+0xb0>)
 800157a:	2200      	movs	r2, #0
 800157c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_SAI1_Init+0xb0>)
 8001580:	2200      	movs	r2, #0
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_SAI1_Init+0xb0>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <MX_SAI1_Init+0xb0>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_SAI1_Init+0xb0>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_SAI1_Init+0xb0>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_SAI1_Init+0xb0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_SAI1_Init+0xb0>)
 80015a4:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <MX_SAI1_Init+0xb8>)
 80015a6:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_SAI1_Init+0xb0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_SAI1_Init+0xb0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_SAI1_Init+0xb0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_SAI1_Init+0xb0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_SAI1_Init+0xb0>)
 80015c2:	2208      	movs	r2, #8
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_SAI1_Init+0xb0>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_SAI1_Init+0xb0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_SAI1_Init+0xb0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_SAI1_Init+0xb0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_SAI1_Init+0xb0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_SAI1_Init+0xb0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_SAI1_Init+0xb0>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_SAI1_Init+0xb0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_SAI1_Init+0xb0>)
 80015f8:	f006 fb98 	bl	8007d2c <HAL_SAI_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8001602:	f7ff fea5 	bl	8001350 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200005c4 	.word	0x200005c4
 8001610:	40015804 	.word	0x40015804
 8001614:	0002ee00 	.word	0x0002ee00

08001618 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a26      	ldr	r2, [pc, #152]	; (80016c0 <HAL_SAI_MspInit+0xa8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d146      	bne.n	80016b8 <HAL_SAI_MspInit+0xa0>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800162a:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <HAL_SAI_MspInit+0xac>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10d      	bne.n	800164e <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_SAI_MspInit+0xb0>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a23      	ldr	r2, [pc, #140]	; (80016c8 <HAL_SAI_MspInit+0xb0>)
 800163c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_SAI_MspInit+0xb0>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_SAI_MspInit+0xac>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <HAL_SAI_MspInit+0xac>)
 8001656:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8001658:	2330      	movs	r3, #48	; 0x30
 800165a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001668:	2306      	movs	r3, #6
 800166a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4619      	mov	r1, r3
 8001672:	4816      	ldr	r0, [pc, #88]	; (80016cc <HAL_SAI_MspInit+0xb4>)
 8001674:	f001 fffe 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8001678:	2340      	movs	r3, #64	; 0x40
 800167a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001688:	2306      	movs	r3, #6
 800168a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	4619      	mov	r1, r3
 8001692:	480f      	ldr	r0, [pc, #60]	; (80016d0 <HAL_SAI_MspInit+0xb8>)
 8001694:	f001 ffee 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80016a8:	2306      	movs	r3, #6
 80016aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4619      	mov	r1, r3
 80016b2:	4808      	ldr	r0, [pc, #32]	; (80016d4 <HAL_SAI_MspInit+0xbc>)
 80016b4:	f001 ffde 	bl	8003674 <HAL_GPIO_Init>

    }
}
 80016b8:	bf00      	nop
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40015804 	.word	0x40015804
 80016c4:	2000064c 	.word	0x2000064c
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40020c00 	.word	0x40020c00
 80016d4:	40021800 	.word	0x40021800

080016d8 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_SDIO_SD_Init+0x38>)
 80016de:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <MX_SDIO_SD_Init+0x3c>)
 80016e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_SDIO_SD_Init+0x38>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_SDIO_SD_Init+0x38>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_SDIO_SD_Init+0x38>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_SDIO_SD_Init+0x38>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <MX_SDIO_SD_Init+0x38>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <MX_SDIO_SD_Init+0x38>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	20000650 	.word	0x20000650
 8001714:	40012c00 	.word	0x40012c00

08001718 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <HAL_SD_MspInit+0xc0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d14a      	bne.n	80017d0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_SD_MspInit+0xc4>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a26      	ldr	r2, [pc, #152]	; (80017dc <HAL_SD_MspInit+0xc4>)
 8001744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_SD_MspInit+0xc4>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <HAL_SD_MspInit+0xc4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <HAL_SD_MspInit+0xc4>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <HAL_SD_MspInit+0xc4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_SD_MspInit+0xc4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a18      	ldr	r2, [pc, #96]	; (80017dc <HAL_SD_MspInit+0xc4>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_SD_MspInit+0xc4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 800178e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001792:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2303      	movs	r3, #3
 800179e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80017a0:	230c      	movs	r3, #12
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4619      	mov	r1, r3
 80017aa:	480d      	ldr	r0, [pc, #52]	; (80017e0 <HAL_SD_MspInit+0xc8>)
 80017ac:	f001 ff62 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80017b0:	2304      	movs	r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80017c0:	230c      	movs	r3, #12
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <HAL_SD_MspInit+0xcc>)
 80017cc:	f001 ff52 	bl	8003674 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40012c00 	.word	0x40012c00
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020c00 	.word	0x40020c00

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_MspInit+0x54>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a11      	ldr	r2, [pc, #68]	; (800183c <HAL_MspInit+0x54>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_MspInit+0x54>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_MspInit+0x54>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_MspInit+0x54>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_MspInit+0x54>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	210f      	movs	r1, #15
 800182a:	f06f 0001 	mvn.w	r0, #1
 800182e:	f000 fc19 	bl	8002064 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08e      	sub	sp, #56	; 0x38
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	4b33      	ldr	r3, [pc, #204]	; (8001924 <HAL_InitTick+0xe4>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a32      	ldr	r2, [pc, #200]	; (8001924 <HAL_InitTick+0xe4>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_InitTick+0xe4>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800186c:	f107 0210 	add.w	r2, r7, #16
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f005 f97c 	bl	8006b74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001882:	2b00      	cmp	r3, #0
 8001884:	d103      	bne.n	800188e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001886:	f005 f94d 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 800188a:	6378      	str	r0, [r7, #52]	; 0x34
 800188c:	e004      	b.n	8001898 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800188e:	f005 f949 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 8001892:	4603      	mov	r3, r0
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189a:	4a23      	ldr	r2, [pc, #140]	; (8001928 <HAL_InitTick+0xe8>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	0c9b      	lsrs	r3, r3, #18
 80018a2:	3b01      	subs	r3, #1
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_InitTick+0xec>)
 80018a8:	4a21      	ldr	r2, [pc, #132]	; (8001930 <HAL_InitTick+0xf0>)
 80018aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <HAL_InitTick+0xec>)
 80018ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018b4:	4a1d      	ldr	r2, [pc, #116]	; (800192c <HAL_InitTick+0xec>)
 80018b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_InitTick+0xec>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_InitTick+0xec>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_InitTick+0xec>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80018cc:	4817      	ldr	r0, [pc, #92]	; (800192c <HAL_InitTick+0xec>)
 80018ce:	f007 ff6f 	bl	80097b0 <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d11b      	bne.n	8001918 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018e0:	4812      	ldr	r0, [pc, #72]	; (800192c <HAL_InitTick+0xec>)
 80018e2:	f008 f855 	bl	8009990 <HAL_TIM_Base_Start_IT>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d111      	bne.n	8001918 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018f4:	2036      	movs	r0, #54	; 0x36
 80018f6:	f000 fbe1 	bl	80020bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d808      	bhi.n	8001912 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	2036      	movs	r0, #54	; 0x36
 8001906:	f000 fbad 	bl	8002064 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_InitTick+0xf4>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	e002      	b.n	8001918 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001918:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800191c:	4618      	mov	r0, r3
 800191e:	3738      	adds	r7, #56	; 0x38
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	431bde83 	.word	0x431bde83
 800192c:	200006d4 	.word	0x200006d4
 8001930:	40001000 	.word	0x40001000
 8001934:	20000004 	.word	0x20000004

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800193c:	e7fe      	b.n	800193c <NMI_Handler+0x4>

0800193e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler+0x4>

0800194a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <BusFault_Handler+0x4>

08001950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler+0x4>

08001956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <TIM6_DAC_IRQHandler+0x10>)
 800196a:	f008 f8d7 	bl	8009b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200006d4 	.word	0x200006d4

08001978 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <OTG_FS_IRQHandler+0x10>)
 800197e:	f002 fc7d 	bl	800427c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20008d58 	.word	0x20008d58

0800198c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <LTDC_IRQHandler+0x10>)
 8001992:	f004 f939 	bl	8005c08 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200004b0 	.word	0x200004b0

080019a0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <DMA2D_IRQHandler+0x10>)
 80019a6:	f000 fcf9 	bl	800239c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200000b8 	.word	0x200000b8

080019b4 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <DSI_IRQHandler+0x10>)
 80019ba:	f001 f962 	bl	8002c82 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200000f8 	.word	0x200000f8

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f012 f832 	bl	8013a60 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20050000 	.word	0x20050000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	2000071c 	.word	0x2000071c
 8001a30:	20009068 	.word	0x20009068

08001a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a76:	4a1f      	ldr	r2, [pc, #124]	; (8001af4 <MX_TIM1_Init+0x9c>)
 8001a78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aa0:	4813      	ldr	r0, [pc, #76]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001aa2:	f007 fe85 	bl	80097b0 <HAL_TIM_Base_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001aac:	f7ff fc50 	bl	8001350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4619      	mov	r1, r3
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001abe:	f008 f935 	bl	8009d2c <HAL_TIM_ConfigClockSource>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ac8:	f7ff fc42 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001ada:	f008 fe09 	bl	800a6f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ae4:	f7ff fc34 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000720 	.word	0x20000720
 8001af4:	40010000 	.word	0x40010000

08001af8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_TIM_Base_MspInit+0x3c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10d      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40010000 	.word	0x40010000
 8001b38:	40023800 	.word	0x40023800

08001b3c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_USART3_UART_Init+0x50>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_USART3_UART_Init+0x4c>)
 8001b74:	f008 feae 	bl	800a8d4 <HAL_UART_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b7e:	f7ff fbe7 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000768 	.word	0x20000768
 8001b8c:	40004800 	.word	0x40004800

08001b90 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <MX_USART6_UART_Init+0x4c>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <MX_USART6_UART_Init+0x50>)
 8001b98:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <MX_USART6_UART_Init+0x4c>)
 8001b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <MX_USART6_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <MX_USART6_UART_Init+0x4c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_USART6_UART_Init+0x4c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MX_USART6_UART_Init+0x4c>)
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <MX_USART6_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_USART6_UART_Init+0x4c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_USART6_UART_Init+0x4c>)
 8001bc8:	f008 fe84 	bl	800a8d4 <HAL_UART_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001bd2:	f7ff fbbd 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200007ac 	.word	0x200007ac
 8001be0:	40011400 	.word	0x40011400

08001be4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	; 0x30
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a33      	ldr	r2, [pc, #204]	; (8001cd0 <HAL_UART_MspInit+0xec>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d12d      	bne.n	8001c62 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_UART_MspInit+0xf0>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a31      	ldr	r2, [pc, #196]	; (8001cd4 <HAL_UART_MspInit+0xf0>)
 8001c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_UART_MspInit+0xf0>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_UART_MspInit+0xf0>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a2a      	ldr	r2, [pc, #168]	; (8001cd4 <HAL_UART_MspInit+0xf0>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_UART_MspInit+0xf0>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c50:	2307      	movs	r3, #7
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	481f      	ldr	r0, [pc, #124]	; (8001cd8 <HAL_UART_MspInit+0xf4>)
 8001c5c:	f001 fd0a 	bl	8003674 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001c60:	e031      	b.n	8001cc6 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART6)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <HAL_UART_MspInit+0xf8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d12c      	bne.n	8001cc6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_UART_MspInit+0xf0>)
 8001c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c74:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_UART_MspInit+0xf0>)
 8001c76:	f043 0320 	orr.w	r3, r3, #32
 8001c7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_UART_MspInit+0xf0>)
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_UART_MspInit+0xf0>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <HAL_UART_MspInit+0xf0>)
 8001c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c96:	6313      	str	r3, [r2, #48]	; 0x30
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_UART_MspInit+0xf0>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001ca4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4807      	ldr	r0, [pc, #28]	; (8001ce0 <HAL_UART_MspInit+0xfc>)
 8001cc2:	f001 fcd7 	bl	8003674 <HAL_GPIO_Init>
}
 8001cc6:	bf00      	nop
 8001cc8:	3730      	adds	r7, #48	; 0x30
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40004800 	.word	0x40004800
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40011400 	.word	0x40011400
 8001ce0:	40021800 	.word	0x40021800

08001ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cea:	490e      	ldr	r1, [pc, #56]	; (8001d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cec:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf0:	e002      	b.n	8001cf8 <LoopCopyDataInit>

08001cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf6:	3304      	adds	r3, #4

08001cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cfc:	d3f9      	bcc.n	8001cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d00:	4c0b      	ldr	r4, [pc, #44]	; (8001d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d04:	e001      	b.n	8001d0a <LoopFillZerobss>

08001d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d08:	3204      	adds	r2, #4

08001d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d0c:	d3fb      	bcc.n	8001d06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d0e:	f7ff fe91 	bl	8001a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d12:	f011 feab 	bl	8013a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d16:	f7ff fa3b 	bl	8001190 <main>
  bx  lr    
 8001d1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d1c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001d28:	080143d0 	.word	0x080143d0
  ldr r2, =_sbss
 8001d2c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001d30:	20009068 	.word	0x20009068

08001d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC_IRQHandler>

08001d36 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d104      	bne.n	8001d4e <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
 8001d48:	f7ff fb02 	bl	8001350 <Error_Handler>
 8001d4c:	e7fe      	b.n	8001d4c <stm32_lock_acquire+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d4e:	f3ef 8305 	mrs	r3, IPSR
 8001d52:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d54:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5a:	b672      	cpsid	i
}
 8001d5c:	bf00      	nop
 8001d5e:	f7ff faf7 	bl	8001350 <Error_Handler>
 8001d62:	e7fe      	b.n	8001d62 <stm32_lock_acquire+0x2c>
  vTaskSuspendAll();
 8001d64:	f00c ff20 	bl	800eba8 <vTaskSuspendAll>
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d104      	bne.n	8001d88 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d7e:	b672      	cpsid	i
}
 8001d80:	bf00      	nop
 8001d82:	f7ff fae5 	bl	8001350 <Error_Handler>
 8001d86:	e7fe      	b.n	8001d86 <stm32_lock_release+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d88:	f3ef 8305 	mrs	r3, IPSR
 8001d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d004      	beq.n	8001d9e <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	bf00      	nop
 8001d98:	f7ff fada 	bl	8001350 <Error_Handler>
 8001d9c:	e7fe      	b.n	8001d9c <stm32_lock_release+0x2c>
  xTaskResumeAll();
 8001d9e:	f00c ff11 	bl	800ebc4 <xTaskResumeAll>
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d104      	bne.n	8001dc2 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
}
 8001dba:	bf00      	nop
 8001dbc:	f7ff fac8 	bl	8001350 <Error_Handler>
 8001dc0:	e7fe      	b.n	8001dc0 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ffb6 	bl	8001d36 <stm32_lock_acquire>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d104      	bne.n	8001dea <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001de0:	b672      	cpsid	i
}
 8001de2:	bf00      	nop
 8001de4:	f7ff fab4 	bl	8001350 <Error_Handler>
 8001de8:	e7fe      	b.n	8001de8 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ffbf 	bl	8001d70 <stm32_lock_release>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <HAL_Init+0x40>)
 8001e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <HAL_Init+0x40>)
 8001e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_Init+0x40>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e24:	2003      	movs	r0, #3
 8001e26:	f000 f8fd 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff fd08 	bl	8001840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e30:	f7ff fcda 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023c00 	.word	0x40023c00

08001e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x20>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_IncTick+0x24>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_IncTick+0x24>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008
 8001e64:	200007f4 	.word	0x200007f4

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_GetTick+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	200007f4 	.word	0x200007f4

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff ffee 	bl	8001e68 <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <__NVIC_EnableIRQ+0x38>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b07      	cmp	r3, #7
 8002030:	d00f      	beq.n	8002052 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b06      	cmp	r3, #6
 8002036:	d00c      	beq.n	8002052 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b05      	cmp	r3, #5
 800203c:	d009      	beq.n	8002052 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b04      	cmp	r3, #4
 8002042:	d006      	beq.n	8002052 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d003      	beq.n	8002052 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800204a:	2190      	movs	r1, #144	; 0x90
 800204c:	4804      	ldr	r0, [pc, #16]	; (8002060 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800204e:	f7ff f984 	bl	800135a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ff38 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	08013e0c 	.word	0x08013e0c

08002064 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b0f      	cmp	r3, #15
 800207a:	d903      	bls.n	8002084 <HAL_NVIC_SetPriority+0x20>
 800207c:	21a8      	movs	r1, #168	; 0xa8
 800207e:	480e      	ldr	r0, [pc, #56]	; (80020b8 <HAL_NVIC_SetPriority+0x54>)
 8002080:	f7ff f96b 	bl	800135a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	d903      	bls.n	8002092 <HAL_NVIC_SetPriority+0x2e>
 800208a:	21a9      	movs	r1, #169	; 0xa9
 800208c:	480a      	ldr	r0, [pc, #40]	; (80020b8 <HAL_NVIC_SetPriority+0x54>)
 800208e:	f7ff f964 	bl	800135a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002092:	f7ff ff3d 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 8002096:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68b9      	ldr	r1, [r7, #8]
 800209c:	6978      	ldr	r0, [r7, #20]
 800209e:	f7ff ff8d 	bl	8001fbc <NVIC_EncodePriority>
 80020a2:	4602      	mov	r2, r0
 80020a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff5c 	bl	8001f68 <__NVIC_SetPriority>
}
 80020b0:	bf00      	nop
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	08013e0c 	.word	0x08013e0c

080020bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da03      	bge.n	80020d6 <HAL_NVIC_EnableIRQ+0x1a>
 80020ce:	21bc      	movs	r1, #188	; 0xbc
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <HAL_NVIC_EnableIRQ+0x2c>)
 80020d2:	f7ff f942 	bl	800135a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ff26 	bl	8001f2c <__NVIC_EnableIRQ>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	08013e0c 	.word	0x08013e0c

080020ec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e017      	b.n	800212e <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <HAL_CRC_Init+0x4c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <HAL_CRC_Init+0x24>
 8002108:	2168      	movs	r1, #104	; 0x68
 800210a:	480c      	ldr	r0, [pc, #48]	; (800213c <HAL_CRC_Init+0x50>)
 800210c:	f7ff f925 	bl	800135a <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	795b      	ldrb	r3, [r3, #5]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7fe fa03 	bl	800052c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023000 	.word	0x40023000
 800213c:	08013e48 	.word	0x08013e48

08002140 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_DMA_Start_IT+0x26>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d304      	bcc.n	8002170 <HAL_DMA_Start_IT+0x30>
 8002166:	f240 11cb 	movw	r1, #459	; 0x1cb
 800216a:	4827      	ldr	r0, [pc, #156]	; (8002208 <HAL_DMA_Start_IT+0xc8>)
 800216c:	f7ff f8f5 	bl	800135a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_DMA_Start_IT+0x3e>
 800217a:	2302      	movs	r3, #2
 800217c:	e040      	b.n	8002200 <HAL_DMA_Start_IT+0xc0>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d12f      	bne.n	80021f2 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f83c 	bl	8002224 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	223f      	movs	r2, #63	; 0x3f
 80021b2:	409a      	lsls	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0216 	orr.w	r2, r2, #22
 80021c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0208 	orr.w	r2, r2, #8
 80021de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e005      	b.n	80021fe <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
 80021fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	08013e80 	.word	0x08013e80

0800220c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002240:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b40      	cmp	r3, #64	; 0x40
 8002250:	d108      	bne.n	8002264 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002262:	e007      	b.n	8002274 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	60da      	str	r2, [r3, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e07c      	b.n	800238c <HAL_DMA2D_Init+0x10c>
  }

  /* Check the parameters */
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a3f      	ldr	r2, [pc, #252]	; (8002394 <HAL_DMA2D_Init+0x114>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <HAL_DMA2D_Init+0x24>
 800229c:	21f7      	movs	r1, #247	; 0xf7
 800229e:	483e      	ldr	r0, [pc, #248]	; (8002398 <HAL_DMA2D_Init+0x118>)
 80022a0:	f7ff f85b 	bl	800135a <assert_failed>
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d012      	beq.n	80022d2 <HAL_DMA2D_Init+0x52>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d00d      	beq.n	80022d2 <HAL_DMA2D_Init+0x52>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022be:	d008      	beq.n	80022d2 <HAL_DMA2D_Init+0x52>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80022c8:	d003      	beq.n	80022d2 <HAL_DMA2D_Init+0x52>
 80022ca:	21f8      	movs	r1, #248	; 0xf8
 80022cc:	4832      	ldr	r0, [pc, #200]	; (8002398 <HAL_DMA2D_Init+0x118>)
 80022ce:	f7ff f844 	bl	800135a <assert_failed>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d013      	beq.n	8002302 <HAL_DMA2D_Init+0x82>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d00f      	beq.n	8002302 <HAL_DMA2D_Init+0x82>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d00b      	beq.n	8002302 <HAL_DMA2D_Init+0x82>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d007      	beq.n	8002302 <HAL_DMA2D_Init+0x82>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d003      	beq.n	8002302 <HAL_DMA2D_Init+0x82>
 80022fa:	21f9      	movs	r1, #249	; 0xf9
 80022fc:	4826      	ldr	r0, [pc, #152]	; (8002398 <HAL_DMA2D_Init+0x118>)
 80022fe:	f7ff f82c 	bl	800135a <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800230a:	d303      	bcc.n	8002314 <HAL_DMA2D_Init+0x94>
 800230c:	21fa      	movs	r1, #250	; 0xfa
 800230e:	4822      	ldr	r0, [pc, #136]	; (8002398 <HAL_DMA2D_Init+0x118>)
 8002310:	f7ff f823 	bl	800135a <assert_failed>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d106      	bne.n	800232e <HAL_DMA2D_Init+0xae>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7fe f953 	bl	80005d4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	f023 0107 	bic.w	r1, r3, #7
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800236c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68d1      	ldr	r1, [r2, #12]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	430b      	orrs	r3, r1
 800237a:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	4002b000 	.word	0x4002b000
 8002398:	08013eb8 	.word	0x08013eb8

0800239c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d026      	beq.n	800240c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d021      	beq.n	800240c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023d6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2204      	movs	r2, #4
 80023f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d026      	beq.n	8002464 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d021      	beq.n	8002464 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800242e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2220      	movs	r2, #32
 8002436:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243c:	f043 0202 	orr.w	r2, r3, #2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2204      	movs	r2, #4
 8002448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d026      	beq.n	80024bc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002474:	2b00      	cmp	r3, #0
 8002476:	d021      	beq.n	80024bc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002486:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2208      	movs	r2, #8
 800248e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	f043 0204 	orr.w	r2, r3, #4
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2204      	movs	r2, #4
 80024a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d013      	beq.n	80024ee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00e      	beq.n	80024ee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2204      	movs	r2, #4
 80024e6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f853 	bl	8002594 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d024      	beq.n	8002542 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d01f      	beq.n	8002542 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002510:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2202      	movs	r2, #2
 8002518:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01f      	beq.n	800258c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01a      	beq.n	800258c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002564:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2210      	movs	r2, #16
 800256c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f80e 	bl	80025a8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg;
  uint32_t regMask;
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_DMA2D_ConfigLayer+0x20>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d004      	beq.n	80025dc <HAL_DMA2D_ConfigLayer+0x20>
 80025d2:	f44f 61d9 	mov.w	r1, #1736	; 0x6c8
 80025d6:	488c      	ldr	r0, [pc, #560]	; (8002808 <HAL_DMA2D_ConfigLayer+0x24c>)
 80025d8:	f7fe febf 	bl	800135a <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	4413      	add	r3, r2
 80025e4:	3318      	adds	r3, #24
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025ec:	d304      	bcc.n	80025f8 <HAL_DMA2D_ConfigLayer+0x3c>
 80025ee:	f240 61c9 	movw	r1, #1737	; 0x6c9
 80025f2:	4885      	ldr	r0, [pc, #532]	; (8002808 <HAL_DMA2D_ConfigLayer+0x24c>)
 80025f4:	f7fe feb1 	bl	800135a <assert_failed>
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002600:	d07d      	beq.n	80026fe <HAL_DMA2D_ConfigLayer+0x142>
  {
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	4413      	add	r3, r2
 800260a:	331c      	adds	r3, #28
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d054      	beq.n	80026bc <HAL_DMA2D_ConfigLayer+0x100>
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	4413      	add	r3, r2
 800261a:	331c      	adds	r3, #28
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d04c      	beq.n	80026bc <HAL_DMA2D_ConfigLayer+0x100>
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	4413      	add	r3, r2
 800262a:	331c      	adds	r3, #28
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d044      	beq.n	80026bc <HAL_DMA2D_ConfigLayer+0x100>
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	4413      	add	r3, r2
 800263a:	331c      	adds	r3, #28
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d03c      	beq.n	80026bc <HAL_DMA2D_ConfigLayer+0x100>
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	4413      	add	r3, r2
 800264a:	331c      	adds	r3, #28
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b04      	cmp	r3, #4
 8002650:	d034      	beq.n	80026bc <HAL_DMA2D_ConfigLayer+0x100>
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4413      	add	r3, r2
 800265a:	331c      	adds	r3, #28
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b05      	cmp	r3, #5
 8002660:	d02c      	beq.n	80026bc <HAL_DMA2D_ConfigLayer+0x100>
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	4413      	add	r3, r2
 800266a:	331c      	adds	r3, #28
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b06      	cmp	r3, #6
 8002670:	d024      	beq.n	80026bc <HAL_DMA2D_ConfigLayer+0x100>
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	4413      	add	r3, r2
 800267a:	331c      	adds	r3, #28
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b07      	cmp	r3, #7
 8002680:	d01c      	beq.n	80026bc <HAL_DMA2D_ConfigLayer+0x100>
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	4413      	add	r3, r2
 800268a:	331c      	adds	r3, #28
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b08      	cmp	r3, #8
 8002690:	d014      	beq.n	80026bc <HAL_DMA2D_ConfigLayer+0x100>
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	4413      	add	r3, r2
 800269a:	331c      	adds	r3, #28
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b09      	cmp	r3, #9
 80026a0:	d00c      	beq.n	80026bc <HAL_DMA2D_ConfigLayer+0x100>
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	4413      	add	r3, r2
 80026aa:	331c      	adds	r3, #28
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b0a      	cmp	r3, #10
 80026b0:	d004      	beq.n	80026bc <HAL_DMA2D_ConfigLayer+0x100>
 80026b2:	f240 61cc 	movw	r1, #1740	; 0x6cc
 80026b6:	4854      	ldr	r0, [pc, #336]	; (8002808 <HAL_DMA2D_ConfigLayer+0x24c>)
 80026b8:	f7fe fe4f 	bl	800135a <assert_failed>
    if (hdma2d->Init.Mode != DMA2D_M2M)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01c      	beq.n	80026fe <HAL_DMA2D_ConfigLayer+0x142>
    {
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	3302      	adds	r3, #2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	4413      	add	r3, r2
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d014      	beq.n	80026fe <HAL_DMA2D_ConfigLayer+0x142>
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	3302      	adds	r3, #2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	4413      	add	r3, r2
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d00c      	beq.n	80026fe <HAL_DMA2D_ConfigLayer+0x142>
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	3302      	adds	r3, #2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	4413      	add	r3, r2
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d004      	beq.n	80026fe <HAL_DMA2D_ConfigLayer+0x142>
 80026f4:	f240 61cf 	movw	r1, #1743	; 0x6cf
 80026f8:	4843      	ldr	r0, [pc, #268]	; (8002808 <HAL_DMA2D_ConfigLayer+0x24c>)
 80026fa:	f7fe fe2e 	bl	800135a <assert_failed>
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_DMA2D_ConfigLayer+0x150>
 8002708:	2302      	movs	r3, #2
 800270a:	e079      	b.n	8002800 <HAL_DMA2D_ConfigLayer+0x244>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	3318      	adds	r3, #24
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	041b      	lsls	r3, r3, #16
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002736:	4b35      	ldr	r3, [pc, #212]	; (800280c <HAL_DMA2D_ConfigLayer+0x250>)
 8002738:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b0a      	cmp	r3, #10
 8002740:	d003      	beq.n	800274a <HAL_DMA2D_ConfigLayer+0x18e>
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b09      	cmp	r3, #9
 8002748:	d107      	bne.n	800275a <HAL_DMA2D_ConfigLayer+0x19e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	e005      	b.n	8002766 <HAL_DMA2D_ConfigLayer+0x1aa>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	061b      	lsls	r3, r3, #24
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d120      	bne.n	80027ae <HAL_DMA2D_ConfigLayer+0x1f2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	43db      	mvns	r3, r3
 8002776:	ea02 0103 	and.w	r1, r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	430a      	orrs	r2, r1
 8002782:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b0a      	cmp	r3, #10
 8002794:	d003      	beq.n	800279e <HAL_DMA2D_ConfigLayer+0x1e2>
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b09      	cmp	r3, #9
 800279c:	d127      	bne.n	80027ee <HAL_DMA2D_ConfigLayer+0x232>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
 80027ac:	e01f      	b.n	80027ee <HAL_DMA2D_ConfigLayer+0x232>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69da      	ldr	r2, [r3, #28]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	ea02 0103 	and.w	r1, r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b0a      	cmp	r3, #10
 80027d6:	d003      	beq.n	80027e0 <HAL_DMA2D_ConfigLayer+0x224>
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b09      	cmp	r3, #9
 80027de:	d106      	bne.n	80027ee <HAL_DMA2D_ConfigLayer+0x232>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80027ec:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	08013eb8 	.word	0x08013eb8
 800280c:	ff03000f 	.word	0xff03000f

08002810 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e16b      	b.n	8002afc <HAL_DSI_Init+0x2ec>
  }

  /* Check function parameters */
  assert_param(IS_DSI_PLL_NDIV(PLLInit->PLLNDIV));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b09      	cmp	r3, #9
 800282a:	d903      	bls.n	8002834 <HAL_DSI_Init+0x24>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b7d      	cmp	r3, #125	; 0x7d
 8002832:	d904      	bls.n	800283e <HAL_DSI_Init+0x2e>
 8002834:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002838:	4891      	ldr	r0, [pc, #580]	; (8002a80 <HAL_DSI_Init+0x270>)
 800283a:	f7fe fd8e 	bl	800135a <assert_failed>
  assert_param(IS_DSI_PLL_IDF(PLLInit->PLLIDF));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d01c      	beq.n	8002880 <HAL_DSI_Init+0x70>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d018      	beq.n	8002880 <HAL_DSI_Init+0x70>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d014      	beq.n	8002880 <HAL_DSI_Init+0x70>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d010      	beq.n	8002880 <HAL_DSI_Init+0x70>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b05      	cmp	r3, #5
 8002864:	d00c      	beq.n	8002880 <HAL_DSI_Init+0x70>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b06      	cmp	r3, #6
 800286c:	d008      	beq.n	8002880 <HAL_DSI_Init+0x70>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b07      	cmp	r3, #7
 8002874:	d004      	beq.n	8002880 <HAL_DSI_Init+0x70>
 8002876:	f240 1143 	movw	r1, #323	; 0x143
 800287a:	4881      	ldr	r0, [pc, #516]	; (8002a80 <HAL_DSI_Init+0x270>)
 800287c:	f7fe fd6d 	bl	800135a <assert_failed>
  assert_param(IS_DSI_PLL_ODF(PLLInit->PLLODF));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d010      	beq.n	80028aa <HAL_DSI_Init+0x9a>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d00c      	beq.n	80028aa <HAL_DSI_Init+0x9a>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d008      	beq.n	80028aa <HAL_DSI_Init+0x9a>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d004      	beq.n	80028aa <HAL_DSI_Init+0x9a>
 80028a0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80028a4:	4876      	ldr	r0, [pc, #472]	; (8002a80 <HAL_DSI_Init+0x270>)
 80028a6:	f7fe fd58 	bl	800135a <assert_failed>
  assert_param(IS_DSI_AUTO_CLKLANE_CONTROL(hdsi->Init.AutomaticClockLaneControl));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_DSI_Init+0xb4>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d004      	beq.n	80028c4 <HAL_DSI_Init+0xb4>
 80028ba:	f240 1145 	movw	r1, #325	; 0x145
 80028be:	4870      	ldr	r0, [pc, #448]	; (8002a80 <HAL_DSI_Init+0x270>)
 80028c0:	f7fe fd4b 	bl	800135a <assert_failed>
  assert_param(IS_DSI_NUMBER_OF_LANES(hdsi->Init.NumberOfLanes));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_DSI_Init+0xce>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d004      	beq.n	80028de <HAL_DSI_Init+0xce>
 80028d4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80028d8:	4869      	ldr	r0, [pc, #420]	; (8002a80 <HAL_DSI_Init+0x270>)
 80028da:	f7fe fd3e 	bl	800135a <assert_failed>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7c5b      	ldrb	r3, [r3, #17]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <HAL_DSI_Init+0xde>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7fd ff9b 	bl	8000824 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2203      	movs	r2, #3
 80028f2:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002908:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800291c:	f7ff faa4 	bl	8001e68 <HAL_GetTick>
 8002920:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002922:	e009      	b.n	8002938 <HAL_DSI_Init+0x128>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002924:	f7ff faa0 	bl	8001e68 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002932:	d901      	bls.n	8002938 <HAL_DSI_Init+0x128>
    {
      return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0e1      	b.n	8002afc <HAL_DSI_Init+0x2ec>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ed      	beq.n	8002924 <HAL_DSI_Init+0x114>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8002958:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800295c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002974:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800297c:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80029b0:	2001      	movs	r0, #1
 80029b2:	f7ff fa65 	bl	8001e80 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80029b6:	f7ff fa57 	bl	8001e68 <HAL_GetTick>
 80029ba:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80029bc:	e009      	b.n	80029d2 <HAL_DSI_Init+0x1c2>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80029be:	f7ff fa53 	bl	8001e68 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029cc:	d901      	bls.n	80029d2 <HAL_DSI_Init+0x1c2>
    {
      return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e094      	b.n	8002afc <HAL_DSI_Init+0x2ec>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ed      	beq.n	80029be <HAL_DSI_Init+0x1ae>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0206 	orr.w	r2, r2, #6
 80029f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0203 	bic.w	r2, r2, #3
 8002a06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0203 	bic.w	r2, r2, #3
 8002a34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a5c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6899      	ldr	r1, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_DSI_Init+0x274>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	e003      	b.n	8002a86 <HAL_DSI_Init+0x276>
 8002a7e:	bf00      	nop
 8002a80:	08013ef4 	.word	0x08013ef4
 8002a84:	2301      	movs	r3, #1
 8002a86:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4a1e      	ldr	r2, [pc, #120]	; (8002b04 <HAL_DSI_Init+0x2f4>)
 8002a8c:	fb03 f202 	mul.w	r2, r3, r2
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002abc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	003d0900 	.word	0x003d0900

08002b08 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7c1b      	ldrb	r3, [r3, #16]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_DSI_ConfigErrorMonitor+0x16>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e0ab      	b.n	8002c76 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00b      	beq.n	8002b60 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002b58:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002b5c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8002b7a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d009      	beq.n	8002b9c <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0201 	orr.w	r2, r2, #1
 8002b98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0202 	orr.w	r2, r2, #2
 8002bb6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d009      	beq.n	8002bd8 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 020c 	orr.w	r2, r2, #12
 8002bd4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0210 	orr.w	r2, r2, #16
 8002bf2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0220 	orr.w	r2, r2, #32
 8002c10:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c2e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d009      	beq.n	8002c50 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c4c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8002c6a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00f      	beq.n	8002cba <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f8ad 	bl	8002e14 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00f      	beq.n	8002cea <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f89f 	bl	8002e28 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 808c 	beq.w	8002e0c <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002cfc:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d14:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f043 0202 	orr.w	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f043 0204 	orr.w	r2, r3, #4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f043 0208 	orr.w	r2, r3, #8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f043 0210 	orr.w	r2, r3, #16
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f818 	bl	8002e3c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	7c1b      	ldrb	r3, [r3, #16]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_DSI_SetGenericVCID+0x16>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e016      	b.n	8002e94 <HAL_DSI_SetGenericVCID+0x44>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0203 	bic.w	r2, r2, #3
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7c1b      	ldrb	r3, [r3, #16]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e136      	b.n	8003124 <HAL_DSI_ConfigAdaptedCommandMode+0x284>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_COLOR_CODING(CmdCfg->ColorCoding));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d904      	bls.n	8002ece <HAL_DSI_ConfigAdaptedCommandMode+0x2e>
 8002ec4:	f240 41bc 	movw	r1, #1212	; 0x4bc
 8002ec8:	4898      	ldr	r0, [pc, #608]	; (800312c <HAL_DSI_ConfigAdaptedCommandMode+0x28c>)
 8002eca:	f7fe fa46 	bl	800135a <assert_failed>
  assert_param(IS_DSI_TE_SOURCE(CmdCfg->TearingEffectSource));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_DSI_ConfigAdaptedCommandMode+0x48>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d004      	beq.n	8002ee8 <HAL_DSI_ConfigAdaptedCommandMode+0x48>
 8002ede:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8002ee2:	4892      	ldr	r0, [pc, #584]	; (800312c <HAL_DSI_ConfigAdaptedCommandMode+0x28c>)
 8002ee4:	f7fe fa39 	bl	800135a <assert_failed>
  assert_param(IS_DSI_TE_POLARITY(CmdCfg->TearingEffectPolarity));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_DSI_ConfigAdaptedCommandMode+0x62>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d004      	beq.n	8002f02 <HAL_DSI_ConfigAdaptedCommandMode+0x62>
 8002ef8:	f240 41be 	movw	r1, #1214	; 0x4be
 8002efc:	488b      	ldr	r0, [pc, #556]	; (800312c <HAL_DSI_ConfigAdaptedCommandMode+0x28c>)
 8002efe:	f7fe fa2c 	bl	800135a <assert_failed>
  assert_param(IS_DSI_AUTOMATIC_REFRESH(CmdCfg->AutomaticRefresh));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_DSI_ConfigAdaptedCommandMode+0x7c>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	2b40      	cmp	r3, #64	; 0x40
 8002f10:	d004      	beq.n	8002f1c <HAL_DSI_ConfigAdaptedCommandMode+0x7c>
 8002f12:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8002f16:	4885      	ldr	r0, [pc, #532]	; (800312c <HAL_DSI_ConfigAdaptedCommandMode+0x28c>)
 8002f18:	f7fe fa1f 	bl	800135a <assert_failed>
  assert_param(IS_DSI_VS_POLARITY(CmdCfg->VSyncPol));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_DSI_ConfigAdaptedCommandMode+0x96>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	2b80      	cmp	r3, #128	; 0x80
 8002f2a:	d004      	beq.n	8002f36 <HAL_DSI_ConfigAdaptedCommandMode+0x96>
 8002f2c:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8002f30:	487e      	ldr	r0, [pc, #504]	; (800312c <HAL_DSI_ConfigAdaptedCommandMode+0x28c>)
 8002f32:	f7fe fa12 	bl	800135a <assert_failed>
  assert_param(IS_DSI_TE_ACK_REQUEST(CmdCfg->TEAcknowledgeRequest));
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_DSI_ConfigAdaptedCommandMode+0xb0>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d004      	beq.n	8002f50 <HAL_DSI_ConfigAdaptedCommandMode+0xb0>
 8002f46:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8002f4a:	4878      	ldr	r0, [pc, #480]	; (800312c <HAL_DSI_ConfigAdaptedCommandMode+0x28c>)
 8002f4c:	f7fe fa05 	bl	800135a <assert_failed>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_DSI_ConfigAdaptedCommandMode+0xca>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d004      	beq.n	8002f6a <HAL_DSI_ConfigAdaptedCommandMode+0xca>
 8002f60:	f240 41c2 	movw	r1, #1218	; 0x4c2
 8002f64:	4871      	ldr	r0, [pc, #452]	; (800312c <HAL_DSI_ConfigAdaptedCommandMode+0x28c>)
 8002f66:	f7fe f9f8 	bl	800135a <assert_failed>
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_DSI_ConfigAdaptedCommandMode+0xe4>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d004      	beq.n	8002f84 <HAL_DSI_ConfigAdaptedCommandMode+0xe4>
 8002f7a:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8002f7e:	486b      	ldr	r0, [pc, #428]	; (800312c <HAL_DSI_ConfigAdaptedCommandMode+0x28c>)
 8002f80:	f7fe f9eb 	bl	800135a <assert_failed>
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_DSI_ConfigAdaptedCommandMode+0xfe>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d004      	beq.n	8002f9e <HAL_DSI_ConfigAdaptedCommandMode+0xfe>
 8002f94:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8002f98:	4864      	ldr	r0, [pc, #400]	; (800312c <HAL_DSI_ConfigAdaptedCommandMode+0x28c>)
 8002f9a:	f7fe f9de 	bl	800135a <assert_failed>

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0203 	bic.w	r2, r2, #3
 8002fe4:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68d9      	ldr	r1, [r3, #12]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0207 	bic.w	r2, r2, #7
 8003006:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6959      	ldr	r1, [r3, #20]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	431a      	orrs	r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 020f 	bic.w	r2, r2, #15
 8003034:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6919      	ldr	r1, [r3, #16]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 020e 	bic.w	r2, r2, #14
 8003058:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	005a      	lsls	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	041b      	lsls	r3, r3, #16
 8003082:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0201 	bic.w	r2, r2, #1
 80030e0:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0202 	orr.w	r2, r2, #2
 8003118:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	08013ef4 	.word	0x08013ef4

08003130 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7c1b      	ldrb	r3, [r3, #16]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_DSI_ConfigCommand+0x16>
 8003142:	2302      	movs	r3, #2
 8003144:	e0fe      	b.n	8003344 <HAL_DSI_ConfigCommand+0x214>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	741a      	strb	r2, [r3, #16]

  assert_param(IS_DSI_LP_GSW0P(LPCmd->LPGenShortWriteNoP));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d009      	beq.n	8003168 <HAL_DSI_ConfigCommand+0x38>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315c:	d004      	beq.n	8003168 <HAL_DSI_ConfigCommand+0x38>
 800315e:	f240 5102 	movw	r1, #1282	; 0x502
 8003162:	487a      	ldr	r0, [pc, #488]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 8003164:	f7fe f8f9 	bl	800135a <assert_failed>
  assert_param(IS_DSI_LP_GSW1P(LPCmd->LPGenShortWriteOneP));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d009      	beq.n	8003184 <HAL_DSI_ConfigCommand+0x54>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003178:	d004      	beq.n	8003184 <HAL_DSI_ConfigCommand+0x54>
 800317a:	f240 5103 	movw	r1, #1283	; 0x503
 800317e:	4873      	ldr	r0, [pc, #460]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 8003180:	f7fe f8eb 	bl	800135a <assert_failed>
  assert_param(IS_DSI_LP_GSW2P(LPCmd->LPGenShortWriteTwoP));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HAL_DSI_ConfigCommand+0x70>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003194:	d004      	beq.n	80031a0 <HAL_DSI_ConfigCommand+0x70>
 8003196:	f240 5104 	movw	r1, #1284	; 0x504
 800319a:	486c      	ldr	r0, [pc, #432]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 800319c:	f7fe f8dd 	bl	800135a <assert_failed>
  assert_param(IS_DSI_LP_GSR0P(LPCmd->LPGenShortReadNoP));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <HAL_DSI_ConfigCommand+0x8c>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b0:	d004      	beq.n	80031bc <HAL_DSI_ConfigCommand+0x8c>
 80031b2:	f240 5105 	movw	r1, #1285	; 0x505
 80031b6:	4865      	ldr	r0, [pc, #404]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 80031b8:	f7fe f8cf 	bl	800135a <assert_failed>
  assert_param(IS_DSI_LP_GSR1P(LPCmd->LPGenShortReadOneP));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <HAL_DSI_ConfigCommand+0xa8>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031cc:	d004      	beq.n	80031d8 <HAL_DSI_ConfigCommand+0xa8>
 80031ce:	f240 5106 	movw	r1, #1286	; 0x506
 80031d2:	485e      	ldr	r0, [pc, #376]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 80031d4:	f7fe f8c1 	bl	800135a <assert_failed>
  assert_param(IS_DSI_LP_GSR2P(LPCmd->LPGenShortReadTwoP));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_DSI_ConfigCommand+0xc4>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e8:	d004      	beq.n	80031f4 <HAL_DSI_ConfigCommand+0xc4>
 80031ea:	f240 5107 	movw	r1, #1287	; 0x507
 80031ee:	4857      	ldr	r0, [pc, #348]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 80031f0:	f7fe f8b3 	bl	800135a <assert_failed>
  assert_param(IS_DSI_LP_GLW(LPCmd->LPGenLongWrite));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <HAL_DSI_ConfigCommand+0xe0>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003204:	d004      	beq.n	8003210 <HAL_DSI_ConfigCommand+0xe0>
 8003206:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 800320a:	4850      	ldr	r0, [pc, #320]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 800320c:	f7fe f8a5 	bl	800135a <assert_failed>
  assert_param(IS_DSI_LP_DSW0P(LPCmd->LPDcsShortWriteNoP));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <HAL_DSI_ConfigCommand+0xfc>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d004      	beq.n	800322c <HAL_DSI_ConfigCommand+0xfc>
 8003222:	f240 5109 	movw	r1, #1289	; 0x509
 8003226:	4849      	ldr	r0, [pc, #292]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 8003228:	f7fe f897 	bl	800135a <assert_failed>
  assert_param(IS_DSI_LP_DSW1P(LPCmd->LPDcsShortWriteOneP));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d009      	beq.n	8003248 <HAL_DSI_ConfigCommand+0x118>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800323c:	d004      	beq.n	8003248 <HAL_DSI_ConfigCommand+0x118>
 800323e:	f240 510a 	movw	r1, #1290	; 0x50a
 8003242:	4842      	ldr	r0, [pc, #264]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 8003244:	f7fe f889 	bl	800135a <assert_failed>
  assert_param(IS_DSI_LP_DSR0P(LPCmd->LPDcsShortReadNoP));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_DSI_ConfigCommand+0x134>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003258:	d004      	beq.n	8003264 <HAL_DSI_ConfigCommand+0x134>
 800325a:	f240 510b 	movw	r1, #1291	; 0x50b
 800325e:	483b      	ldr	r0, [pc, #236]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 8003260:	f7fe f87b 	bl	800135a <assert_failed>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	d009      	beq.n	8003280 <HAL_DSI_ConfigCommand+0x150>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003274:	d004      	beq.n	8003280 <HAL_DSI_ConfigCommand+0x150>
 8003276:	f240 510c 	movw	r1, #1292	; 0x50c
 800327a:	4834      	ldr	r0, [pc, #208]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 800327c:	f7fe f86d 	bl	800135a <assert_failed>
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <HAL_DSI_ConfigCommand+0x16c>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003290:	d004      	beq.n	800329c <HAL_DSI_ConfigCommand+0x16c>
 8003292:	f240 510d 	movw	r1, #1293	; 0x50d
 8003296:	482d      	ldr	r0, [pc, #180]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 8003298:	f7fe f85f 	bl	800135a <assert_failed>
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_DSI_ConfigCommand+0x186>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d004      	beq.n	80032b6 <HAL_DSI_ConfigCommand+0x186>
 80032ac:	f240 510e 	movw	r1, #1294	; 0x50e
 80032b0:	4826      	ldr	r0, [pc, #152]	; (800334c <HAL_DSI_ConfigCommand+0x21c>)
 80032b2:	f7fe f852 	bl	800135a <assert_failed>

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_DSI_ConfigCommand+0x220>)
 80032c2:	400b      	ands	r3, r1
 80032c4:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80032d4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80032da:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80032e0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80032e6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80032ec:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80032f2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80032f8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80032fe:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8003304:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800330a:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003310:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0202 	bic.w	r2, r2, #2
 8003328:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	08013ef4 	.word	0x08013ef4
 8003350:	fef080ff 	.word	0xfef080ff

08003354 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7c1b      	ldrb	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_DSI_ConfigFlowControl+0x16>
 8003366:	2302      	movs	r3, #2
 8003368:	e020      	b.n	80033ac <HAL_DSI_ConfigFlowControl+0x58>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f043 031f 	orr.w	r3, r3, #31
 8003376:	2b1f      	cmp	r3, #31
 8003378:	d004      	beq.n	8003384 <HAL_DSI_ConfigFlowControl+0x30>
 800337a:	f240 5142 	movw	r1, #1346	; 0x542
 800337e:	480d      	ldr	r0, [pc, #52]	; (80033b4 <HAL_DSI_ConfigFlowControl+0x60>)
 8003380:	f7fd ffeb 	bl	800135a <assert_failed>

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 021f 	bic.w	r2, r2, #31
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	08013ef4 	.word	0x08013ef4

080033b8 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	7c1b      	ldrb	r3, [r3, #16]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_DSI_ConfigPhyTimer+0x16>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e058      	b.n	8003480 <HAL_DSI_ConfigPhyTimer+0xc8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4293      	cmp	r3, r2
 80033de:	bf38      	it	cc
 80033e0:	4613      	movcc	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80033f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	041a      	lsls	r2, r3, #16
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003422:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800345c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	021a      	lsls	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7c1b      	ldrb	r3, [r3, #16]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_DSI_ConfigHostTimeouts+0x16>
 800349e:	2302      	movs	r3, #2
 80034a0:	e0b4      	b.n	800360c <HAL_DSI_ConfigHostTimeouts+0x180>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80034b6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	021a      	lsls	r2, r3, #8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	b292      	uxth	r2, r2
 80034d8:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	041a      	lsls	r2, r3, #16
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	0c1b      	lsrs	r3, r3, #16
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	0c1b      	lsrs	r3, r3, #16
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	0c1b      	lsrs	r3, r3, #16
 80035be:	041b      	lsls	r3, r3, #16
 80035c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6a1a      	ldr	r2, [r3, #32]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7c1b      	ldrb	r3, [r3, #16]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_DSI_SetLowPowerRXFilter+0x16>
 800362a:	2302      	movs	r3, #2
 800362c:	e01b      	b.n	8003666 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003644:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	065a      	lsls	r2, r3, #25
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a3d      	ldr	r2, [pc, #244]	; (8003784 <HAL_GPIO_Init+0x110>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d02b      	beq.n	80036ea <HAL_GPIO_Init+0x76>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a3c      	ldr	r2, [pc, #240]	; (8003788 <HAL_GPIO_Init+0x114>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d027      	beq.n	80036ea <HAL_GPIO_Init+0x76>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a3b      	ldr	r2, [pc, #236]	; (800378c <HAL_GPIO_Init+0x118>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d023      	beq.n	80036ea <HAL_GPIO_Init+0x76>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a3a      	ldr	r2, [pc, #232]	; (8003790 <HAL_GPIO_Init+0x11c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01f      	beq.n	80036ea <HAL_GPIO_Init+0x76>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a39      	ldr	r2, [pc, #228]	; (8003794 <HAL_GPIO_Init+0x120>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01b      	beq.n	80036ea <HAL_GPIO_Init+0x76>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a38      	ldr	r2, [pc, #224]	; (8003798 <HAL_GPIO_Init+0x124>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d017      	beq.n	80036ea <HAL_GPIO_Init+0x76>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a37      	ldr	r2, [pc, #220]	; (800379c <HAL_GPIO_Init+0x128>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_GPIO_Init+0x76>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a36      	ldr	r2, [pc, #216]	; (80037a0 <HAL_GPIO_Init+0x12c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00f      	beq.n	80036ea <HAL_GPIO_Init+0x76>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a35      	ldr	r2, [pc, #212]	; (80037a4 <HAL_GPIO_Init+0x130>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00b      	beq.n	80036ea <HAL_GPIO_Init+0x76>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a34      	ldr	r2, [pc, #208]	; (80037a8 <HAL_GPIO_Init+0x134>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <HAL_GPIO_Init+0x76>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a33      	ldr	r2, [pc, #204]	; (80037ac <HAL_GPIO_Init+0x138>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_Init+0x76>
 80036e2:	21ac      	movs	r1, #172	; 0xac
 80036e4:	4832      	ldr	r0, [pc, #200]	; (80037b0 <HAL_GPIO_Init+0x13c>)
 80036e6:	f7fd fe38 	bl	800135a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_GPIO_Init+0x8c>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	041b      	lsls	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_GPIO_Init+0x94>
 8003700:	21ad      	movs	r1, #173	; 0xad
 8003702:	482b      	ldr	r0, [pc, #172]	; (80037b0 <HAL_GPIO_Init+0x13c>)
 8003704:	f7fd fe29 	bl	800135a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d035      	beq.n	800377c <HAL_GPIO_Init+0x108>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d031      	beq.n	800377c <HAL_GPIO_Init+0x108>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b11      	cmp	r3, #17
 800371e:	d02d      	beq.n	800377c <HAL_GPIO_Init+0x108>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d029      	beq.n	800377c <HAL_GPIO_Init+0x108>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b12      	cmp	r3, #18
 800372e:	d025      	beq.n	800377c <HAL_GPIO_Init+0x108>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003738:	d020      	beq.n	800377c <HAL_GPIO_Init+0x108>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003742:	d01b      	beq.n	800377c <HAL_GPIO_Init+0x108>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800374c:	d016      	beq.n	800377c <HAL_GPIO_Init+0x108>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003756:	d011      	beq.n	800377c <HAL_GPIO_Init+0x108>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003760:	d00c      	beq.n	800377c <HAL_GPIO_Init+0x108>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800376a:	d007      	beq.n	800377c <HAL_GPIO_Init+0x108>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d003      	beq.n	800377c <HAL_GPIO_Init+0x108>
 8003774:	21ae      	movs	r1, #174	; 0xae
 8003776:	480e      	ldr	r0, [pc, #56]	; (80037b0 <HAL_GPIO_Init+0x13c>)
 8003778:	f7fd fdef 	bl	800135a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800377c:	2300      	movs	r3, #0
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	e283      	b.n	8003c8a <HAL_GPIO_Init+0x616>
 8003782:	bf00      	nop
 8003784:	40020000 	.word	0x40020000
 8003788:	40020400 	.word	0x40020400
 800378c:	40020800 	.word	0x40020800
 8003790:	40020c00 	.word	0x40020c00
 8003794:	40021000 	.word	0x40021000
 8003798:	40021400 	.word	0x40021400
 800379c:	40021800 	.word	0x40021800
 80037a0:	40021c00 	.word	0x40021c00
 80037a4:	40022000 	.word	0x40022000
 80037a8:	40022400 	.word	0x40022400
 80037ac:	40022800 	.word	0x40022800
 80037b0:	08013f2c 	.word	0x08013f2c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037b4:	2201      	movs	r2, #1
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	f040 8259 	bne.w	8003c84 <HAL_GPIO_Init+0x610>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d005      	beq.n	80037ea <HAL_GPIO_Init+0x176>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d144      	bne.n	8003874 <HAL_GPIO_Init+0x200>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00f      	beq.n	8003812 <HAL_GPIO_Init+0x19e>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d00b      	beq.n	8003812 <HAL_GPIO_Init+0x19e>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d007      	beq.n	8003812 <HAL_GPIO_Init+0x19e>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x19e>
 800380a:	21c0      	movs	r1, #192	; 0xc0
 800380c:	4831      	ldr	r0, [pc, #196]	; (80038d4 <HAL_GPIO_Init+0x260>)
 800380e:	f7fd fda4 	bl	800135a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	2203      	movs	r2, #3
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 0201 	and.w	r2, r3, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b03      	cmp	r3, #3
 800387e:	d02b      	beq.n	80038d8 <HAL_GPIO_Init+0x264>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_GPIO_Init+0x22c>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d007      	beq.n	80038a0 <HAL_GPIO_Init+0x22c>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0x22c>
 8003898:	21d1      	movs	r1, #209	; 0xd1
 800389a:	480e      	ldr	r0, [pc, #56]	; (80038d4 <HAL_GPIO_Init+0x260>)
 800389c:	f7fd fd5d 	bl	800135a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2203      	movs	r2, #3
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	60da      	str	r2, [r3, #12]
 80038d0:	e002      	b.n	80038d8 <HAL_GPIO_Init+0x264>
 80038d2:	bf00      	nop
 80038d4:	08013f2c 	.word	0x08013f2c
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	f040 80ee 	bne.w	8003ac2 <HAL_GPIO_Init+0x44e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80c5 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b09      	cmp	r3, #9
 80038f6:	f000 80c0 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80bb 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80b6 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80b1 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80ac 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b01      	cmp	r3, #1
 8003928:	f000 80a7 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b01      	cmp	r3, #1
 8003932:	f000 80a2 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b02      	cmp	r3, #2
 800393c:	f000 809d 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b02      	cmp	r3, #2
 8003946:	f000 8098 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b02      	cmp	r3, #2
 8003950:	f000 8093 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2b03      	cmp	r3, #3
 800395a:	f000 808e 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b04      	cmp	r3, #4
 8003964:	f000 8089 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b04      	cmp	r3, #4
 800396e:	f000 8084 	beq.w	8003a7a <HAL_GPIO_Init+0x406>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b04      	cmp	r3, #4
 8003978:	d07f      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b05      	cmp	r3, #5
 8003980:	d07b      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b05      	cmp	r3, #5
 8003988:	d077      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b09      	cmp	r3, #9
 8003990:	d073      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b06      	cmp	r3, #6
 8003998:	d06f      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b09      	cmp	r3, #9
 80039a0:	d06b      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b07      	cmp	r3, #7
 80039a8:	d067      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b07      	cmp	r3, #7
 80039b0:	d063      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b07      	cmp	r3, #7
 80039b8:	d05f      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d05b      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d057      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d053      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b09      	cmp	r3, #9
 80039d8:	d04f      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b09      	cmp	r3, #9
 80039e0:	d04b      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b0a      	cmp	r3, #10
 80039e8:	d047      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b0a      	cmp	r3, #10
 80039f0:	d043      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b0b      	cmp	r3, #11
 80039f8:	d03f      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b0c      	cmp	r3, #12
 8003a00:	d03b      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	d037      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b0d      	cmp	r3, #13
 8003a10:	d033      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b0f      	cmp	r3, #15
 8003a18:	d02f      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b05      	cmp	r3, #5
 8003a20:	d02b      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b05      	cmp	r3, #5
 8003a28:	d027      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d023      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d01f      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d01b      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	d017      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d013      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b0e      	cmp	r3, #14
 8003a58:	d00f      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b0d      	cmp	r3, #13
 8003a60:	d00b      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2b09      	cmp	r3, #9
 8003a68:	d007      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b0a      	cmp	r3, #10
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x406>
 8003a72:	21de      	movs	r1, #222	; 0xde
 8003a74:	4889      	ldr	r0, [pc, #548]	; (8003c9c <HAL_GPIO_Init+0x628>)
 8003a76:	f7fd fc70 	bl	800135a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	08da      	lsrs	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3208      	adds	r2, #8
 8003a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	220f      	movs	r2, #15
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	08da      	lsrs	r2, r3, #3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3208      	adds	r2, #8
 8003abc:	69b9      	ldr	r1, [r7, #24]
 8003abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	2203      	movs	r2, #3
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 0203 	and.w	r2, r3, #3
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80c0 	beq.w	8003c84 <HAL_GPIO_Init+0x610>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <HAL_GPIO_Init+0x62c>)
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	4a64      	ldr	r2, [pc, #400]	; (8003ca0 <HAL_GPIO_Init+0x62c>)
 8003b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b12:	6453      	str	r3, [r2, #68]	; 0x44
 8003b14:	4b62      	ldr	r3, [pc, #392]	; (8003ca0 <HAL_GPIO_Init+0x62c>)
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b20:	4a60      	ldr	r2, [pc, #384]	; (8003ca4 <HAL_GPIO_Init+0x630>)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	089b      	lsrs	r3, r3, #2
 8003b26:	3302      	adds	r3, #2
 8003b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	220f      	movs	r2, #15
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a58      	ldr	r2, [pc, #352]	; (8003ca8 <HAL_GPIO_Init+0x634>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d037      	beq.n	8003bbc <HAL_GPIO_Init+0x548>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a57      	ldr	r2, [pc, #348]	; (8003cac <HAL_GPIO_Init+0x638>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d031      	beq.n	8003bb8 <HAL_GPIO_Init+0x544>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a56      	ldr	r2, [pc, #344]	; (8003cb0 <HAL_GPIO_Init+0x63c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d02b      	beq.n	8003bb4 <HAL_GPIO_Init+0x540>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a55      	ldr	r2, [pc, #340]	; (8003cb4 <HAL_GPIO_Init+0x640>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d025      	beq.n	8003bb0 <HAL_GPIO_Init+0x53c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a54      	ldr	r2, [pc, #336]	; (8003cb8 <HAL_GPIO_Init+0x644>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d01f      	beq.n	8003bac <HAL_GPIO_Init+0x538>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a53      	ldr	r2, [pc, #332]	; (8003cbc <HAL_GPIO_Init+0x648>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d019      	beq.n	8003ba8 <HAL_GPIO_Init+0x534>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a52      	ldr	r2, [pc, #328]	; (8003cc0 <HAL_GPIO_Init+0x64c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <HAL_GPIO_Init+0x530>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a51      	ldr	r2, [pc, #324]	; (8003cc4 <HAL_GPIO_Init+0x650>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00d      	beq.n	8003ba0 <HAL_GPIO_Init+0x52c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a50      	ldr	r2, [pc, #320]	; (8003cc8 <HAL_GPIO_Init+0x654>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <HAL_GPIO_Init+0x528>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a4f      	ldr	r2, [pc, #316]	; (8003ccc <HAL_GPIO_Init+0x658>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <HAL_GPIO_Init+0x524>
 8003b94:	2309      	movs	r3, #9
 8003b96:	e012      	b.n	8003bbe <HAL_GPIO_Init+0x54a>
 8003b98:	230a      	movs	r3, #10
 8003b9a:	e010      	b.n	8003bbe <HAL_GPIO_Init+0x54a>
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	e00e      	b.n	8003bbe <HAL_GPIO_Init+0x54a>
 8003ba0:	2307      	movs	r3, #7
 8003ba2:	e00c      	b.n	8003bbe <HAL_GPIO_Init+0x54a>
 8003ba4:	2306      	movs	r3, #6
 8003ba6:	e00a      	b.n	8003bbe <HAL_GPIO_Init+0x54a>
 8003ba8:	2305      	movs	r3, #5
 8003baa:	e008      	b.n	8003bbe <HAL_GPIO_Init+0x54a>
 8003bac:	2304      	movs	r3, #4
 8003bae:	e006      	b.n	8003bbe <HAL_GPIO_Init+0x54a>
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e004      	b.n	8003bbe <HAL_GPIO_Init+0x54a>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e002      	b.n	8003bbe <HAL_GPIO_Init+0x54a>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <HAL_GPIO_Init+0x54a>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	f002 0203 	and.w	r2, r2, #3
 8003bc4:	0092      	lsls	r2, r2, #2
 8003bc6:	4093      	lsls	r3, r2
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bce:	4935      	ldr	r1, [pc, #212]	; (8003ca4 <HAL_GPIO_Init+0x630>)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bdc:	4b3c      	ldr	r3, [pc, #240]	; (8003cd0 <HAL_GPIO_Init+0x65c>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4013      	ands	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_GPIO_Init+0x58c>
        {
          temp |= iocurrent;
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c00:	4a33      	ldr	r2, [pc, #204]	; (8003cd0 <HAL_GPIO_Init+0x65c>)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c06:	4b32      	ldr	r3, [pc, #200]	; (8003cd0 <HAL_GPIO_Init+0x65c>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4013      	ands	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_GPIO_Init+0x5b6>
        {
          temp |= iocurrent;
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c2a:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <HAL_GPIO_Init+0x65c>)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c30:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <HAL_GPIO_Init+0x65c>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x5e0>
        {
          temp |= iocurrent;
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c54:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <HAL_GPIO_Init+0x65c>)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_GPIO_Init+0x65c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4013      	ands	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x60a>
        {
          temp |= iocurrent;
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c7e:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <HAL_GPIO_Init+0x65c>)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	3301      	adds	r3, #1
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	2b0f      	cmp	r3, #15
 8003c8e:	f67f ad91 	bls.w	80037b4 <HAL_GPIO_Init+0x140>
      }
    }
  }
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	3720      	adds	r7, #32
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	08013f2c 	.word	0x08013f2c
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40013800 	.word	0x40013800
 8003ca8:	40020000 	.word	0x40020000
 8003cac:	40020400 	.word	0x40020400
 8003cb0:	40020800 	.word	0x40020800
 8003cb4:	40020c00 	.word	0x40020c00
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40021400 	.word	0x40021400
 8003cc0:	40021800 	.word	0x40021800
 8003cc4:	40021c00 	.word	0x40021c00
 8003cc8:	40022000 	.word	0x40022000
 8003ccc:	40022400 	.word	0x40022400
 8003cd0:	40013c00 	.word	0x40013c00

08003cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d004      	beq.n	8003cf0 <HAL_GPIO_ReadPin+0x1c>
 8003ce6:	887b      	ldrh	r3, [r7, #2]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	041b      	lsls	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_GPIO_ReadPin+0x26>
 8003cf0:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8003cf4:	4809      	ldr	r0, [pc, #36]	; (8003d1c <HAL_GPIO_ReadPin+0x48>)
 8003cf6:	f7fd fb30 	bl	800135a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	887b      	ldrh	r3, [r7, #2]
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	e001      	b.n	8003d10 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	08013f2c 	.word	0x08013f2c

08003d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	807b      	strh	r3, [r7, #2]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003d30:	887b      	ldrh	r3, [r7, #2]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <HAL_GPIO_WritePin+0x20>
 8003d36:	887b      	ldrh	r3, [r7, #2]
 8003d38:	0c1b      	lsrs	r3, r3, #16
 8003d3a:	041b      	lsls	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <HAL_GPIO_WritePin+0x2a>
 8003d40:	f240 119d 	movw	r1, #413	; 0x19d
 8003d44:	480e      	ldr	r0, [pc, #56]	; (8003d80 <HAL_GPIO_WritePin+0x60>)
 8003d46:	f7fd fb08 	bl	800135a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003d4a:	787b      	ldrb	r3, [r7, #1]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_GPIO_WritePin+0x40>
 8003d50:	787b      	ldrb	r3, [r7, #1]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d004      	beq.n	8003d60 <HAL_GPIO_WritePin+0x40>
 8003d56:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003d5a:	4809      	ldr	r0, [pc, #36]	; (8003d80 <HAL_GPIO_WritePin+0x60>)
 8003d5c:	f7fd fafd 	bl	800135a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003d60:	787b      	ldrb	r3, [r7, #1]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d6c:	e003      	b.n	8003d76 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d6e:	887b      	ldrh	r3, [r7, #2]
 8003d70:	041a      	lsls	r2, r3, #16
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	619a      	str	r2, [r3, #24]
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	08013f2c 	.word	0x08013f2c

08003d84 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d86:	b08f      	sub	sp, #60	; 0x3c
 8003d88:	af0a      	add	r7, sp, #40	; 0x28
 8003d8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e062      	b.n	8003e5c <HAL_HCD_Init+0xd8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d9e:	d008      	beq.n	8003db2 <HAL_HCD_Init+0x2e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2f      	ldr	r2, [pc, #188]	; (8003e64 <HAL_HCD_Init+0xe0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <HAL_HCD_Init+0x2e>
 8003daa:	2179      	movs	r1, #121	; 0x79
 8003dac:	482e      	ldr	r0, [pc, #184]	; (8003e68 <HAL_HCD_Init+0xe4>)
 8003dae:	f7fd fad4 	bl	800135a <assert_failed>

  USBx = hhcd->Instance;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <HAL_HCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f00d fce5 	bl	801179c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <HAL_HCD_Init+0x68>
  {
    hhcd->Init.dma_enable = 0U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f008 f9d3 	bl	800c19c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	687e      	ldr	r6, [r7, #4]
 8003dfe:	466d      	mov	r5, sp
 8003e00:	f106 0410 	add.w	r4, r6, #16
 8003e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e10:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e14:	1d33      	adds	r3, r6, #4
 8003e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e18:	6838      	ldr	r0, [r7, #0]
 8003e1a:	f008 f94d 	bl	800c0b8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2101      	movs	r1, #1
 8003e24:	4618      	mov	r0, r3
 8003e26:	f008 f9ca 	bl	800c1be <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	687e      	ldr	r6, [r7, #4]
 8003e32:	466d      	mov	r5, sp
 8003e34:	f106 0410 	add.w	r4, r6, #16
 8003e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e44:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e48:	1d33      	adds	r3, r6, #4
 8003e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e4c:	6838      	ldr	r0, [r7, #0]
 8003e4e:	f008 fb53 	bl	800c4f8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e64:	40040000 	.word	0x40040000
 8003e68:	08013f68 	.word	0x08013f68

08003e6c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b089      	sub	sp, #36	; 0x24
 8003e70:	af04      	add	r7, sp, #16
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	4608      	mov	r0, r1
 8003e76:	4611      	mov	r1, r2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	70fb      	strb	r3, [r7, #3]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	70bb      	strb	r3, [r7, #2]
 8003e82:	4613      	mov	r3, r2
 8003e84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_HCD_HC_Init+0x28>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e076      	b.n	8003f82 <HAL_HCD_HC_Init+0x116>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	333d      	adds	r3, #61	; 0x3d
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3338      	adds	r3, #56	; 0x38
 8003ebc:	787a      	ldrb	r2, [r7, #1]
 8003ebe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3340      	adds	r3, #64	; 0x40
 8003ece:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ed0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	212c      	movs	r1, #44	; 0x2c
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	3339      	adds	r3, #57	; 0x39
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	212c      	movs	r1, #44	; 0x2c
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	4413      	add	r3, r2
 8003ef0:	333f      	adds	r3, #63	; 0x3f
 8003ef2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003ef6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	78ba      	ldrb	r2, [r7, #2]
 8003efc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f00:	b2d0      	uxtb	r0, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	333a      	adds	r3, #58	; 0x3a
 8003f0e:	4602      	mov	r2, r0
 8003f10:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003f12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	da09      	bge.n	8003f2e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003f1a:	78fb      	ldrb	r3, [r7, #3]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	333b      	adds	r3, #59	; 0x3b
 8003f28:	2201      	movs	r2, #1
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	e008      	b.n	8003f40 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	212c      	movs	r1, #44	; 0x2c
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	333b      	adds	r3, #59	; 0x3b
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	212c      	movs	r1, #44	; 0x2c
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	333c      	adds	r3, #60	; 0x3c
 8003f4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003f52:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	787c      	ldrb	r4, [r7, #1]
 8003f5a:	78ba      	ldrb	r2, [r7, #2]
 8003f5c:	78f9      	ldrb	r1, [r7, #3]
 8003f5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f60:	9302      	str	r3, [sp, #8]
 8003f62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	4623      	mov	r3, r4
 8003f70:	f008 fc3c 	bl	800c7ec <USB_HC_Init>
 8003f74:	4603      	mov	r3, r0
 8003f76:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}

08003f8a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_HCD_HC_Halt+0x1e>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e00f      	b.n	8003fc8 <HAL_HCD_HC_Halt+0x3e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f008 fe8c 	bl	800ccd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	4608      	mov	r0, r1
 8003fda:	4611      	mov	r1, r2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4603      	mov	r3, r0
 8003fe0:	70fb      	strb	r3, [r7, #3]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	70bb      	strb	r3, [r7, #2]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	212c      	movs	r1, #44	; 0x2c
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	333b      	adds	r3, #59	; 0x3b
 8003ff8:	78ba      	ldrb	r2, [r7, #2]
 8003ffa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	212c      	movs	r1, #44	; 0x2c
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	333f      	adds	r3, #63	; 0x3f
 800400a:	787a      	ldrb	r2, [r7, #1]
 800400c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800400e:	7c3b      	ldrb	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d112      	bne.n	800403a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	212c      	movs	r1, #44	; 0x2c
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	4413      	add	r3, r2
 8004020:	3342      	adds	r3, #66	; 0x42
 8004022:	2203      	movs	r2, #3
 8004024:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	212c      	movs	r1, #44	; 0x2c
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	4413      	add	r3, r2
 8004032:	333d      	adds	r3, #61	; 0x3d
 8004034:	7f3a      	ldrb	r2, [r7, #28]
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	e008      	b.n	800404c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	212c      	movs	r1, #44	; 0x2c
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	3342      	adds	r3, #66	; 0x42
 8004048:	2202      	movs	r2, #2
 800404a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800404c:	787b      	ldrb	r3, [r7, #1]
 800404e:	2b03      	cmp	r3, #3
 8004050:	f200 80c6 	bhi.w	80041e0 <HAL_HCD_HC_SubmitRequest+0x210>
 8004054:	a201      	add	r2, pc, #4	; (adr r2, 800405c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	0800406d 	.word	0x0800406d
 8004060:	080041cd 	.word	0x080041cd
 8004064:	080040d1 	.word	0x080040d1
 8004068:	0800414f 	.word	0x0800414f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800406c:	7c3b      	ldrb	r3, [r7, #16]
 800406e:	2b01      	cmp	r3, #1
 8004070:	f040 80b8 	bne.w	80041e4 <HAL_HCD_HC_SubmitRequest+0x214>
 8004074:	78bb      	ldrb	r3, [r7, #2]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f040 80b4 	bne.w	80041e4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800407c:	8b3b      	ldrh	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d108      	bne.n	8004094 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	3355      	adds	r3, #85	; 0x55
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3355      	adds	r3, #85	; 0x55
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	212c      	movs	r1, #44	; 0x2c
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	3342      	adds	r3, #66	; 0x42
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80040ba:	e093      	b.n	80041e4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	212c      	movs	r1, #44	; 0x2c
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	3342      	adds	r3, #66	; 0x42
 80040ca:	2202      	movs	r2, #2
 80040cc:	701a      	strb	r2, [r3, #0]
      break;
 80040ce:	e089      	b.n	80041e4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80040d0:	78bb      	ldrb	r3, [r7, #2]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d11d      	bne.n	8004112 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	3355      	adds	r3, #85	; 0x55
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	212c      	movs	r1, #44	; 0x2c
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	3342      	adds	r3, #66	; 0x42
 80040f8:	2200      	movs	r2, #0
 80040fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80040fc:	e073      	b.n	80041e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	212c      	movs	r1, #44	; 0x2c
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	4413      	add	r3, r2
 800410a:	3342      	adds	r3, #66	; 0x42
 800410c:	2202      	movs	r2, #2
 800410e:	701a      	strb	r2, [r3, #0]
      break;
 8004110:	e069      	b.n	80041e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	3354      	adds	r3, #84	; 0x54
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	212c      	movs	r1, #44	; 0x2c
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	4413      	add	r3, r2
 8004132:	3342      	adds	r3, #66	; 0x42
 8004134:	2200      	movs	r2, #0
 8004136:	701a      	strb	r2, [r3, #0]
      break;
 8004138:	e055      	b.n	80041e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	212c      	movs	r1, #44	; 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	3342      	adds	r3, #66	; 0x42
 8004148:	2202      	movs	r2, #2
 800414a:	701a      	strb	r2, [r3, #0]
      break;
 800414c:	e04b      	b.n	80041e6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800414e:	78bb      	ldrb	r3, [r7, #2]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d11d      	bne.n	8004190 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	212c      	movs	r1, #44	; 0x2c
 800415a:	fb01 f303 	mul.w	r3, r1, r3
 800415e:	4413      	add	r3, r2
 8004160:	3355      	adds	r3, #85	; 0x55
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	212c      	movs	r1, #44	; 0x2c
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	4413      	add	r3, r2
 8004174:	3342      	adds	r3, #66	; 0x42
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800417a:	e034      	b.n	80041e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	212c      	movs	r1, #44	; 0x2c
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	4413      	add	r3, r2
 8004188:	3342      	adds	r3, #66	; 0x42
 800418a:	2202      	movs	r2, #2
 800418c:	701a      	strb	r2, [r3, #0]
      break;
 800418e:	e02a      	b.n	80041e6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	212c      	movs	r1, #44	; 0x2c
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	3354      	adds	r3, #84	; 0x54
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	212c      	movs	r1, #44	; 0x2c
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	3342      	adds	r3, #66	; 0x42
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
      break;
 80041b6:	e016      	b.n	80041e6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	212c      	movs	r1, #44	; 0x2c
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	3342      	adds	r3, #66	; 0x42
 80041c6:	2202      	movs	r2, #2
 80041c8:	701a      	strb	r2, [r3, #0]
      break;
 80041ca:	e00c      	b.n	80041e6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3342      	adds	r3, #66	; 0x42
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
      break;
 80041de:	e002      	b.n	80041e6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80041e0:	bf00      	nop
 80041e2:	e000      	b.n	80041e6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80041e4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	3344      	adds	r3, #68	; 0x44
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	8b3a      	ldrh	r2, [r7, #24]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	202c      	movs	r0, #44	; 0x2c
 8004200:	fb00 f303 	mul.w	r3, r0, r3
 8004204:	440b      	add	r3, r1
 8004206:	334c      	adds	r3, #76	; 0x4c
 8004208:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	3360      	adds	r3, #96	; 0x60
 8004218:	2200      	movs	r2, #0
 800421a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	212c      	movs	r1, #44	; 0x2c
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	3350      	adds	r3, #80	; 0x50
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	212c      	movs	r1, #44	; 0x2c
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	4413      	add	r3, r2
 800423a:	3339      	adds	r3, #57	; 0x39
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	212c      	movs	r1, #44	; 0x2c
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	4413      	add	r3, r2
 800424c:	3361      	adds	r3, #97	; 0x61
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	222c      	movs	r2, #44	; 0x2c
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	3338      	adds	r3, #56	; 0x38
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	18d1      	adds	r1, r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	f008 fbe0 	bl	800ca30 <USB_HC_StartXfer>
 8004270:	4603      	mov	r3, r0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop

0800427c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f008 f8ed 	bl	800c472 <USB_GetMode>
 8004298:	4603      	mov	r3, r0
 800429a:	2b01      	cmp	r3, #1
 800429c:	f040 80f6 	bne.w	800448c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f008 f8d1 	bl	800c44c <USB_ReadInterrupts>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80ec 	beq.w	800448a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f008 f8c8 	bl	800c44c <USB_ReadInterrupts>
 80042bc:	4603      	mov	r3, r0
 80042be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042c6:	d104      	bne.n	80042d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80042d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f008 f8b8 	bl	800c44c <USB_ReadInterrupts>
 80042dc:	4603      	mov	r3, r0
 80042de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e6:	d104      	bne.n	80042f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f008 f8a8 	bl	800c44c <USB_ReadInterrupts>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004302:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004306:	d104      	bne.n	8004312 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004310:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f008 f898 	bl	800c44c <USB_ReadInterrupts>
 800431c:	4603      	mov	r3, r0
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b02      	cmp	r3, #2
 8004324:	d103      	bne.n	800432e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2202      	movs	r2, #2
 800432c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f008 f88a 	bl	800c44c <USB_ReadInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800433e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004342:	d11c      	bne.n	800437e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800434c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10f      	bne.n	800437e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800435e:	2110      	movs	r1, #16
 8004360:	6938      	ldr	r0, [r7, #16]
 8004362:	f007 ff79 	bl	800c258 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004366:	6938      	ldr	r0, [r7, #16]
 8004368:	f007 ffaa 	bl	800c2c0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f008 f974 	bl	800c660 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f00d fa8d 	bl	8011898 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f008 f862 	bl	800c44c <USB_ReadInterrupts>
 8004388:	4603      	mov	r3, r0
 800438a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800438e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004392:	d102      	bne.n	800439a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f001 f89e 	bl	80054d6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f008 f854 	bl	800c44c <USB_ReadInterrupts>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d106      	bne.n	80043bc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f00d fa56 	bl	8011860 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2208      	movs	r2, #8
 80043ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f008 f843 	bl	800c44c <USB_ReadInterrupts>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d101      	bne.n	80043d4 <HAL_HCD_IRQHandler+0x158>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <HAL_HCD_IRQHandler+0x15a>
 80043d4:	2300      	movs	r3, #0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d012      	beq.n	8004400 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0210 	bic.w	r2, r2, #16
 80043e8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 ffa1 	bl	8005332 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0210 	orr.w	r2, r2, #16
 80043fe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f008 f821 	bl	800c44c <USB_ReadInterrupts>
 800440a:	4603      	mov	r3, r0
 800440c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004414:	d13a      	bne.n	800448c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f008 fc4a 	bl	800ccb4 <USB_HC_ReadInterrupt>
 8004420:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	e025      	b.n	8004474 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d018      	beq.n	800446e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800444e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004452:	d106      	bne.n	8004462 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	4619      	mov	r1, r3
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f8ab 	bl	80045b6 <HCD_HC_IN_IRQHandler>
 8004460:	e005      	b.n	800446e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fbf9 	bl	8004c60 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	3301      	adds	r3, #1
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	429a      	cmp	r2, r3
 800447c:	d3d4      	bcc.n	8004428 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004486:	615a      	str	r2, [r3, #20]
 8004488:	e000      	b.n	800448c <HAL_HCD_IRQHandler+0x210>
      return;
 800448a:	bf00      	nop
    }
  }
}
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_HCD_Start+0x16>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e013      	b.n	80044d0 <HAL_HCD_Start+0x3e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2101      	movs	r1, #1
 80044b6:	4618      	mov	r0, r3
 80044b8:	f008 f936 	bl	800c728 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f007 fe5a 	bl	800c17a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_HCD_Stop+0x16>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e00d      	b.n	800450a <HAL_HCD_Stop+0x32>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f008 fd24 	bl	800cf48 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f008 f8d8 	bl	800c6d4 <USB_ResetPort>
 8004524:	4603      	mov	r3, r0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800453a:	78fb      	ldrb	r3, [r7, #3]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	212c      	movs	r1, #44	; 0x2c
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	4413      	add	r3, r2
 8004546:	3360      	adds	r3, #96	; 0x60
 8004548:	781b      	ldrb	r3, [r3, #0]
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	460b      	mov	r3, r1
 8004560:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	212c      	movs	r1, #44	; 0x2c
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	4413      	add	r3, r2
 800456e:	3350      	adds	r3, #80	; 0x50
 8004570:	681b      	ldr	r3, [r3, #0]
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f008 f91c 	bl	800c7c8 <USB_GetCurrentFrame>
 8004590:	4603      	mov	r3, r0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f008 f8f7 	bl	800c79a <USB_GetHostSpeed>
 80045ac:	4603      	mov	r3, r0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b086      	sub	sp, #24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	460b      	mov	r3, r1
 80045c0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d11a      	bne.n	800461c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f2:	461a      	mov	r2, r3
 80045f4:	2304      	movs	r3, #4
 80045f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	212c      	movs	r1, #44	; 0x2c
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	3361      	adds	r3, #97	; 0x61
 8004606:	2206      	movs	r2, #6
 8004608:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f008 fb5e 	bl	800ccd6 <USB_HC_Halt>
 800461a:	e0af      	b.n	800477c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004632:	d11b      	bne.n	800466c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	4413      	add	r3, r2
 800463c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004640:	461a      	mov	r2, r3
 8004642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004646:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	212c      	movs	r1, #44	; 0x2c
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	4413      	add	r3, r2
 8004654:	3361      	adds	r3, #97	; 0x61
 8004656:	2207      	movs	r2, #7
 8004658:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f008 fb36 	bl	800ccd6 <USB_HC_Halt>
 800466a:	e087      	b.n	800477c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b20      	cmp	r3, #32
 8004680:	d109      	bne.n	8004696 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4413      	add	r3, r2
 800468a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468e:	461a      	mov	r2, r3
 8004690:	2320      	movs	r3, #32
 8004692:	6093      	str	r3, [r2, #8]
 8004694:	e072      	b.n	800477c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4413      	add	r3, r2
 800469e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d11a      	bne.n	80046e2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b8:	461a      	mov	r2, r3
 80046ba:	2308      	movs	r3, #8
 80046bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	212c      	movs	r1, #44	; 0x2c
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	4413      	add	r3, r2
 80046ca:	3361      	adds	r3, #97	; 0x61
 80046cc:	2205      	movs	r2, #5
 80046ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	4611      	mov	r1, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	f008 fafb 	bl	800ccd6 <USB_HC_Halt>
 80046e0:	e04c      	b.n	800477c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f8:	d11b      	bne.n	8004732 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4413      	add	r3, r2
 8004702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004706:	461a      	mov	r2, r3
 8004708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800470c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	212c      	movs	r1, #44	; 0x2c
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	4413      	add	r3, r2
 800471a:	3361      	adds	r3, #97	; 0x61
 800471c:	2208      	movs	r2, #8
 800471e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	4611      	mov	r1, r2
 800472a:	4618      	mov	r0, r3
 800472c:	f008 fad3 	bl	800ccd6 <USB_HC_Halt>
 8004730:	e024      	b.n	800477c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4413      	add	r3, r2
 800473a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004744:	2b80      	cmp	r3, #128	; 0x80
 8004746:	d119      	bne.n	800477c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004754:	461a      	mov	r2, r3
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	212c      	movs	r1, #44	; 0x2c
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	4413      	add	r3, r2
 8004766:	3361      	adds	r3, #97	; 0x61
 8004768:	2206      	movs	r2, #6
 800476a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	4611      	mov	r1, r2
 8004776:	4618      	mov	r0, r3
 8004778:	f008 faad 	bl	800ccd6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004792:	d112      	bne.n	80047ba <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	4611      	mov	r1, r2
 800479e:	4618      	mov	r0, r3
 80047a0:	f008 fa99 	bl	800ccd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b0:	461a      	mov	r2, r3
 80047b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047b6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80047b8:	e24e      	b.n	8004c58 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	f040 80df 	bne.w	8004990 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d019      	beq.n	800480e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	212c      	movs	r1, #44	; 0x2c
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	3348      	adds	r3, #72	; 0x48
 80047e8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	0159      	lsls	r1, r3, #5
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	440b      	add	r3, r1
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80047fc:	1ad2      	subs	r2, r2, r3
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	202c      	movs	r0, #44	; 0x2c
 8004804:	fb00 f303 	mul.w	r3, r0, r3
 8004808:	440b      	add	r3, r1
 800480a:	3350      	adds	r3, #80	; 0x50
 800480c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	212c      	movs	r1, #44	; 0x2c
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	4413      	add	r3, r2
 800481a:	3361      	adds	r3, #97	; 0x61
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	212c      	movs	r1, #44	; 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	335c      	adds	r3, #92	; 0x5c
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4413      	add	r3, r2
 800483a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483e:	461a      	mov	r2, r3
 8004840:	2301      	movs	r3, #1
 8004842:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	212c      	movs	r1, #44	; 0x2c
 800484a:	fb01 f303 	mul.w	r3, r1, r3
 800484e:	4413      	add	r3, r2
 8004850:	333f      	adds	r3, #63	; 0x3f
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d009      	beq.n	800486c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	212c      	movs	r1, #44	; 0x2c
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	4413      	add	r3, r2
 8004864:	333f      	adds	r3, #63	; 0x3f
 8004866:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004868:	2b02      	cmp	r3, #2
 800486a:	d111      	bne.n	8004890 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	4611      	mov	r1, r2
 8004876:	4618      	mov	r0, r3
 8004878:	f008 fa2d 	bl	800ccd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4413      	add	r3, r2
 8004884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004888:	461a      	mov	r2, r3
 800488a:	2310      	movs	r3, #16
 800488c:	6093      	str	r3, [r2, #8]
 800488e:	e03a      	b.n	8004906 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	212c      	movs	r1, #44	; 0x2c
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	4413      	add	r3, r2
 800489c:	333f      	adds	r3, #63	; 0x3f
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d009      	beq.n	80048b8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	212c      	movs	r1, #44	; 0x2c
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	333f      	adds	r3, #63	; 0x3f
 80048b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d126      	bne.n	8004906 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048d6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	212c      	movs	r1, #44	; 0x2c
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	3360      	adds	r3, #96	; 0x60
 80048e6:	2201      	movs	r2, #1
 80048e8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	b2d9      	uxtb	r1, r3
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	202c      	movs	r0, #44	; 0x2c
 80048f4:	fb00 f303 	mul.w	r3, r0, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	3360      	adds	r3, #96	; 0x60
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f00c ffd7 	bl	80118b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d12b      	bne.n	8004966 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	212c      	movs	r1, #44	; 0x2c
 8004914:	fb01 f303 	mul.w	r3, r1, r3
 8004918:	4413      	add	r3, r2
 800491a:	3348      	adds	r3, #72	; 0x48
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	202c      	movs	r0, #44	; 0x2c
 8004924:	fb00 f202 	mul.w	r2, r0, r2
 8004928:	440a      	add	r2, r1
 800492a:	3240      	adds	r2, #64	; 0x40
 800492c:	8812      	ldrh	r2, [r2, #0]
 800492e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 818e 	beq.w	8004c58 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	212c      	movs	r1, #44	; 0x2c
 8004942:	fb01 f303 	mul.w	r3, r1, r3
 8004946:	4413      	add	r3, r2
 8004948:	3354      	adds	r3, #84	; 0x54
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	f083 0301 	eor.w	r3, r3, #1
 8004950:	b2d8      	uxtb	r0, r3
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	212c      	movs	r1, #44	; 0x2c
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	3354      	adds	r3, #84	; 0x54
 8004960:	4602      	mov	r2, r0
 8004962:	701a      	strb	r2, [r3, #0]
}
 8004964:	e178      	b.n	8004c58 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	212c      	movs	r1, #44	; 0x2c
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	4413      	add	r3, r2
 8004972:	3354      	adds	r3, #84	; 0x54
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	f083 0301 	eor.w	r3, r3, #1
 800497a:	b2d8      	uxtb	r0, r3
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	212c      	movs	r1, #44	; 0x2c
 8004982:	fb01 f303 	mul.w	r3, r1, r3
 8004986:	4413      	add	r3, r2
 8004988:	3354      	adds	r3, #84	; 0x54
 800498a:	4602      	mov	r2, r0
 800498c:	701a      	strb	r2, [r3, #0]
}
 800498e:	e163      	b.n	8004c58 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4413      	add	r3, r2
 8004998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	f040 80f6 	bne.w	8004b94 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	212c      	movs	r1, #44	; 0x2c
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	4413      	add	r3, r2
 80049b4:	3361      	adds	r3, #97	; 0x61
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d109      	bne.n	80049d0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	212c      	movs	r1, #44	; 0x2c
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	3360      	adds	r3, #96	; 0x60
 80049ca:	2201      	movs	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	e0c9      	b.n	8004b64 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	212c      	movs	r1, #44	; 0x2c
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	4413      	add	r3, r2
 80049dc:	3361      	adds	r3, #97	; 0x61
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d109      	bne.n	80049f8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	212c      	movs	r1, #44	; 0x2c
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	3360      	adds	r3, #96	; 0x60
 80049f2:	2205      	movs	r2, #5
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	e0b5      	b.n	8004b64 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	212c      	movs	r1, #44	; 0x2c
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	4413      	add	r3, r2
 8004a04:	3361      	adds	r3, #97	; 0x61
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b06      	cmp	r3, #6
 8004a0a:	d009      	beq.n	8004a20 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	212c      	movs	r1, #44	; 0x2c
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	3361      	adds	r3, #97	; 0x61
 8004a1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d150      	bne.n	8004ac2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	212c      	movs	r1, #44	; 0x2c
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	335c      	adds	r3, #92	; 0x5c
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	202c      	movs	r0, #44	; 0x2c
 8004a38:	fb00 f303 	mul.w	r3, r0, r3
 8004a3c:	440b      	add	r3, r1
 8004a3e:	335c      	adds	r3, #92	; 0x5c
 8004a40:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	212c      	movs	r1, #44	; 0x2c
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	335c      	adds	r3, #92	; 0x5c
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d912      	bls.n	8004a7c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	212c      	movs	r1, #44	; 0x2c
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	4413      	add	r3, r2
 8004a62:	335c      	adds	r3, #92	; 0x5c
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	212c      	movs	r1, #44	; 0x2c
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	3360      	adds	r3, #96	; 0x60
 8004a76:	2204      	movs	r2, #4
 8004a78:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a7a:	e073      	b.n	8004b64 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	212c      	movs	r1, #44	; 0x2c
 8004a82:	fb01 f303 	mul.w	r3, r1, r3
 8004a86:	4413      	add	r3, r2
 8004a88:	3360      	adds	r3, #96	; 0x60
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aa4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aac:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aba:	461a      	mov	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ac0:	e050      	b.n	8004b64 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	212c      	movs	r1, #44	; 0x2c
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	3361      	adds	r3, #97	; 0x61
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d122      	bne.n	8004b1c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	212c      	movs	r1, #44	; 0x2c
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	3360      	adds	r3, #96	; 0x60
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004afe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b06:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b14:	461a      	mov	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	e023      	b.n	8004b64 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	212c      	movs	r1, #44	; 0x2c
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	3361      	adds	r3, #97	; 0x61
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b07      	cmp	r3, #7
 8004b2e:	d119      	bne.n	8004b64 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	212c      	movs	r1, #44	; 0x2c
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	335c      	adds	r3, #92	; 0x5c
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	202c      	movs	r0, #44	; 0x2c
 8004b48:	fb00 f303 	mul.w	r3, r0, r3
 8004b4c:	440b      	add	r3, r1
 8004b4e:	335c      	adds	r3, #92	; 0x5c
 8004b50:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	212c      	movs	r1, #44	; 0x2c
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3360      	adds	r3, #96	; 0x60
 8004b60:	2204      	movs	r2, #4
 8004b62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b70:	461a      	mov	r2, r3
 8004b72:	2302      	movs	r3, #2
 8004b74:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	b2d9      	uxtb	r1, r3
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	202c      	movs	r0, #44	; 0x2c
 8004b80:	fb00 f303 	mul.w	r3, r0, r3
 8004b84:	4413      	add	r3, r2
 8004b86:	3360      	adds	r3, #96	; 0x60
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f00c fe91 	bl	80118b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b92:	e061      	b.n	8004c58 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	2b10      	cmp	r3, #16
 8004ba8:	d156      	bne.n	8004c58 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	212c      	movs	r1, #44	; 0x2c
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	333f      	adds	r3, #63	; 0x3f
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d111      	bne.n	8004be2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	212c      	movs	r1, #44	; 0x2c
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	4413      	add	r3, r2
 8004bca:	335c      	adds	r3, #92	; 0x5c
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f008 f87b 	bl	800ccd6 <USB_HC_Halt>
 8004be0:	e031      	b.n	8004c46 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	212c      	movs	r1, #44	; 0x2c
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	333f      	adds	r3, #63	; 0x3f
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d009      	beq.n	8004c0a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	212c      	movs	r1, #44	; 0x2c
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	333f      	adds	r3, #63	; 0x3f
 8004c04:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d11d      	bne.n	8004c46 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	212c      	movs	r1, #44	; 0x2c
 8004c10:	fb01 f303 	mul.w	r3, r1, r3
 8004c14:	4413      	add	r3, r2
 8004c16:	335c      	adds	r3, #92	; 0x5c
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d110      	bne.n	8004c46 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	212c      	movs	r1, #44	; 0x2c
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	4413      	add	r3, r2
 8004c30:	3361      	adds	r3, #97	; 0x61
 8004c32:	2203      	movs	r2, #3
 8004c34:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f008 f848 	bl	800ccd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c52:	461a      	mov	r2, r3
 8004c54:	2310      	movs	r3, #16
 8004c56:	6093      	str	r3, [r2, #8]
}
 8004c58:	bf00      	nop
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004c76:	78fb      	ldrb	r3, [r7, #3]
 8004c78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d11a      	bne.n	8004cc6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	2304      	movs	r3, #4
 8004ca0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	3361      	adds	r3, #97	; 0x61
 8004cb0:	2206      	movs	r2, #6
 8004cb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f008 f809 	bl	800ccd6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004cc4:	e331      	b.n	800532a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d12e      	bne.n	8004d3a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2320      	movs	r3, #32
 8004cec:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	212c      	movs	r1, #44	; 0x2c
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	333d      	adds	r3, #61	; 0x3d
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	f040 8313 	bne.w	800532a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	212c      	movs	r1, #44	; 0x2c
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	333d      	adds	r3, #61	; 0x3d
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	212c      	movs	r1, #44	; 0x2c
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	4413      	add	r3, r2
 8004d22:	3360      	adds	r3, #96	; 0x60
 8004d24:	2202      	movs	r2, #2
 8004d26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f007 ffcf 	bl	800ccd6 <USB_HC_Halt>
}
 8004d38:	e2f7      	b.n	800532a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d50:	d112      	bne.n	8004d78 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d64:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f007 ffb0 	bl	800ccd6 <USB_HC_Halt>
}
 8004d76:	e2d8      	b.n	800532a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d140      	bne.n	8004e10 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	212c      	movs	r1, #44	; 0x2c
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	4413      	add	r3, r2
 8004d9a:	335c      	adds	r3, #92	; 0x5c
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d111      	bne.n	8004dda <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	212c      	movs	r1, #44	; 0x2c
 8004dbc:	fb01 f303 	mul.w	r3, r1, r3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	333d      	adds	r3, #61	; 0x3d
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2340      	movs	r3, #64	; 0x40
 8004dd8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de6:	461a      	mov	r2, r3
 8004de8:	2301      	movs	r3, #1
 8004dea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	212c      	movs	r1, #44	; 0x2c
 8004df2:	fb01 f303 	mul.w	r3, r1, r3
 8004df6:	4413      	add	r3, r2
 8004df8:	3361      	adds	r3, #97	; 0x61
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f007 ff64 	bl	800ccd6 <USB_HC_Halt>
}
 8004e0e:	e28c      	b.n	800532a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d12c      	bne.n	8004e80 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	212c      	movs	r1, #44	; 0x2c
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	4413      	add	r3, r2
 8004e32:	3361      	adds	r3, #97	; 0x61
 8004e34:	2204      	movs	r2, #4
 8004e36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	212c      	movs	r1, #44	; 0x2c
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	4413      	add	r3, r2
 8004e44:	333d      	adds	r3, #61	; 0x3d
 8004e46:	2201      	movs	r2, #1
 8004e48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	212c      	movs	r1, #44	; 0x2c
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	4413      	add	r3, r2
 8004e56:	335c      	adds	r3, #92	; 0x5c
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	4611      	mov	r1, r2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f007 ff35 	bl	800ccd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	6093      	str	r3, [r2, #8]
}
 8004e7e:	e254      	b.n	800532a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d11a      	bne.n	8004ecc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	2308      	movs	r3, #8
 8004ea6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	212c      	movs	r1, #44	; 0x2c
 8004eae:	fb01 f303 	mul.w	r3, r1, r3
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3361      	adds	r3, #97	; 0x61
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f007 ff06 	bl	800ccd6 <USB_HC_Halt>
}
 8004eca:	e22e      	b.n	800532a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b10      	cmp	r3, #16
 8004ee0:	d140      	bne.n	8004f64 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	212c      	movs	r1, #44	; 0x2c
 8004ee8:	fb01 f303 	mul.w	r3, r1, r3
 8004eec:	4413      	add	r3, r2
 8004eee:	335c      	adds	r3, #92	; 0x5c
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	212c      	movs	r1, #44	; 0x2c
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	3361      	adds	r3, #97	; 0x61
 8004f02:	2203      	movs	r2, #3
 8004f04:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	212c      	movs	r1, #44	; 0x2c
 8004f0c:	fb01 f303 	mul.w	r3, r1, r3
 8004f10:	4413      	add	r3, r2
 8004f12:	333d      	adds	r3, #61	; 0x3d
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d112      	bne.n	8004f40 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	212c      	movs	r1, #44	; 0x2c
 8004f20:	fb01 f303 	mul.w	r3, r1, r3
 8004f24:	4413      	add	r3, r2
 8004f26:	333c      	adds	r3, #60	; 0x3c
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d108      	bne.n	8004f40 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	212c      	movs	r1, #44	; 0x2c
 8004f34:	fb01 f303 	mul.w	r3, r1, r3
 8004f38:	4413      	add	r3, r2
 8004f3a:	333d      	adds	r3, #61	; 0x3d
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f007 fec3 	bl	800ccd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2310      	movs	r3, #16
 8004f60:	6093      	str	r3, [r2, #8]
}
 8004f62:	e1e2      	b.n	800532a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f76:	2b80      	cmp	r3, #128	; 0x80
 8004f78:	d164      	bne.n	8005044 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d111      	bne.n	8004fa6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	212c      	movs	r1, #44	; 0x2c
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3361      	adds	r3, #97	; 0x61
 8004f90:	2206      	movs	r2, #6
 8004f92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f007 fe99 	bl	800ccd6 <USB_HC_Halt>
 8004fa4:	e044      	b.n	8005030 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	212c      	movs	r1, #44	; 0x2c
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	335c      	adds	r3, #92	; 0x5c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	202c      	movs	r0, #44	; 0x2c
 8004fbe:	fb00 f303 	mul.w	r3, r0, r3
 8004fc2:	440b      	add	r3, r1
 8004fc4:	335c      	adds	r3, #92	; 0x5c
 8004fc6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	212c      	movs	r1, #44	; 0x2c
 8004fce:	fb01 f303 	mul.w	r3, r1, r3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	335c      	adds	r3, #92	; 0x5c
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d920      	bls.n	800501e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	212c      	movs	r1, #44	; 0x2c
 8004fe2:	fb01 f303 	mul.w	r3, r1, r3
 8004fe6:	4413      	add	r3, r2
 8004fe8:	335c      	adds	r3, #92	; 0x5c
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	212c      	movs	r1, #44	; 0x2c
 8004ff4:	fb01 f303 	mul.w	r3, r1, r3
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3360      	adds	r3, #96	; 0x60
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	b2d9      	uxtb	r1, r3
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	202c      	movs	r0, #44	; 0x2c
 800500a:	fb00 f303 	mul.w	r3, r0, r3
 800500e:	4413      	add	r3, r2
 8005010:	3360      	adds	r3, #96	; 0x60
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f00c fc4c 	bl	80118b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800501c:	e008      	b.n	8005030 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	212c      	movs	r1, #44	; 0x2c
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	4413      	add	r3, r2
 800502a:	3360      	adds	r3, #96	; 0x60
 800502c:	2202      	movs	r2, #2
 800502e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503c:	461a      	mov	r2, r3
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	6093      	str	r3, [r2, #8]
}
 8005042:	e172      	b.n	800532a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505a:	d11b      	bne.n	8005094 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	212c      	movs	r1, #44	; 0x2c
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	4413      	add	r3, r2
 8005068:	3361      	adds	r3, #97	; 0x61
 800506a:	2208      	movs	r2, #8
 800506c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	4611      	mov	r1, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f007 fe2c 	bl	800ccd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	4413      	add	r3, r2
 8005086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508a:	461a      	mov	r2, r3
 800508c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005090:	6093      	str	r3, [r2, #8]
}
 8005092:	e14a      	b.n	800532a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	4413      	add	r3, r2
 800509c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	f040 813f 	bne.w	800532a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	212c      	movs	r1, #44	; 0x2c
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	3361      	adds	r3, #97	; 0x61
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d17d      	bne.n	80051bc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	212c      	movs	r1, #44	; 0x2c
 80050c6:	fb01 f303 	mul.w	r3, r1, r3
 80050ca:	4413      	add	r3, r2
 80050cc:	3360      	adds	r3, #96	; 0x60
 80050ce:	2201      	movs	r2, #1
 80050d0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	212c      	movs	r1, #44	; 0x2c
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	4413      	add	r3, r2
 80050de:	333f      	adds	r3, #63	; 0x3f
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d00a      	beq.n	80050fc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	212c      	movs	r1, #44	; 0x2c
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	4413      	add	r3, r2
 80050f2:	333f      	adds	r3, #63	; 0x3f
 80050f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	f040 8100 	bne.w	80052fc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d113      	bne.n	800512c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	212c      	movs	r1, #44	; 0x2c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	3355      	adds	r3, #85	; 0x55
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	f083 0301 	eor.w	r3, r3, #1
 8005118:	b2d8      	uxtb	r0, r3
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	212c      	movs	r1, #44	; 0x2c
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	4413      	add	r3, r2
 8005126:	3355      	adds	r3, #85	; 0x55
 8005128:	4602      	mov	r2, r0
 800512a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b01      	cmp	r3, #1
 8005132:	f040 80e3 	bne.w	80052fc <HCD_HC_OUT_IRQHandler+0x69c>
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	212c      	movs	r1, #44	; 0x2c
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	4413      	add	r3, r2
 8005142:	334c      	adds	r3, #76	; 0x4c
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 80d8 	beq.w	80052fc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	212c      	movs	r1, #44	; 0x2c
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	4413      	add	r3, r2
 8005158:	334c      	adds	r3, #76	; 0x4c
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	202c      	movs	r0, #44	; 0x2c
 8005162:	fb00 f202 	mul.w	r2, r0, r2
 8005166:	440a      	add	r2, r1
 8005168:	3240      	adds	r2, #64	; 0x40
 800516a:	8812      	ldrh	r2, [r2, #0]
 800516c:	4413      	add	r3, r2
 800516e:	3b01      	subs	r3, #1
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	202c      	movs	r0, #44	; 0x2c
 8005176:	fb00 f202 	mul.w	r2, r0, r2
 800517a:	440a      	add	r2, r1
 800517c:	3240      	adds	r2, #64	; 0x40
 800517e:	8812      	ldrh	r2, [r2, #0]
 8005180:	fbb3 f3f2 	udiv	r3, r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80b5 	beq.w	80052fc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	212c      	movs	r1, #44	; 0x2c
 8005198:	fb01 f303 	mul.w	r3, r1, r3
 800519c:	4413      	add	r3, r2
 800519e:	3355      	adds	r3, #85	; 0x55
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	f083 0301 	eor.w	r3, r3, #1
 80051a6:	b2d8      	uxtb	r0, r3
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	212c      	movs	r1, #44	; 0x2c
 80051ae:	fb01 f303 	mul.w	r3, r1, r3
 80051b2:	4413      	add	r3, r2
 80051b4:	3355      	adds	r3, #85	; 0x55
 80051b6:	4602      	mov	r2, r0
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	e09f      	b.n	80052fc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	212c      	movs	r1, #44	; 0x2c
 80051c2:	fb01 f303 	mul.w	r3, r1, r3
 80051c6:	4413      	add	r3, r2
 80051c8:	3361      	adds	r3, #97	; 0x61
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d109      	bne.n	80051e4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	212c      	movs	r1, #44	; 0x2c
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	4413      	add	r3, r2
 80051dc:	3360      	adds	r3, #96	; 0x60
 80051de:	2202      	movs	r2, #2
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	e08b      	b.n	80052fc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	212c      	movs	r1, #44	; 0x2c
 80051ea:	fb01 f303 	mul.w	r3, r1, r3
 80051ee:	4413      	add	r3, r2
 80051f0:	3361      	adds	r3, #97	; 0x61
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d109      	bne.n	800520c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	212c      	movs	r1, #44	; 0x2c
 80051fe:	fb01 f303 	mul.w	r3, r1, r3
 8005202:	4413      	add	r3, r2
 8005204:	3360      	adds	r3, #96	; 0x60
 8005206:	2202      	movs	r2, #2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e077      	b.n	80052fc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	212c      	movs	r1, #44	; 0x2c
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	4413      	add	r3, r2
 8005218:	3361      	adds	r3, #97	; 0x61
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b05      	cmp	r3, #5
 800521e:	d109      	bne.n	8005234 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	212c      	movs	r1, #44	; 0x2c
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	3360      	adds	r3, #96	; 0x60
 800522e:	2205      	movs	r2, #5
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	e063      	b.n	80052fc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	212c      	movs	r1, #44	; 0x2c
 800523a:	fb01 f303 	mul.w	r3, r1, r3
 800523e:	4413      	add	r3, r2
 8005240:	3361      	adds	r3, #97	; 0x61
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b06      	cmp	r3, #6
 8005246:	d009      	beq.n	800525c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	212c      	movs	r1, #44	; 0x2c
 800524e:	fb01 f303 	mul.w	r3, r1, r3
 8005252:	4413      	add	r3, r2
 8005254:	3361      	adds	r3, #97	; 0x61
 8005256:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005258:	2b08      	cmp	r3, #8
 800525a:	d14f      	bne.n	80052fc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	212c      	movs	r1, #44	; 0x2c
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	335c      	adds	r3, #92	; 0x5c
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	202c      	movs	r0, #44	; 0x2c
 8005274:	fb00 f303 	mul.w	r3, r0, r3
 8005278:	440b      	add	r3, r1
 800527a:	335c      	adds	r3, #92	; 0x5c
 800527c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	212c      	movs	r1, #44	; 0x2c
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	4413      	add	r3, r2
 800528a:	335c      	adds	r3, #92	; 0x5c
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d912      	bls.n	80052b8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	212c      	movs	r1, #44	; 0x2c
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	4413      	add	r3, r2
 800529e:	335c      	adds	r3, #92	; 0x5c
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	212c      	movs	r1, #44	; 0x2c
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	3360      	adds	r3, #96	; 0x60
 80052b2:	2204      	movs	r2, #4
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	e021      	b.n	80052fc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	212c      	movs	r1, #44	; 0x2c
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	3360      	adds	r3, #96	; 0x60
 80052c6:	2202      	movs	r2, #2
 80052c8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052e0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052e8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f6:	461a      	mov	r2, r3
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	4413      	add	r3, r2
 8005304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005308:	461a      	mov	r2, r3
 800530a:	2302      	movs	r3, #2
 800530c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	b2d9      	uxtb	r1, r3
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	202c      	movs	r0, #44	; 0x2c
 8005318:	fb00 f303 	mul.w	r3, r0, r3
 800531c:	4413      	add	r3, r2
 800531e:	3360      	adds	r3, #96	; 0x60
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f00c fac5 	bl	80118b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800532a:	bf00      	nop
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b08a      	sub	sp, #40	; 0x28
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	0c5b      	lsrs	r3, r3, #17
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005366:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d004      	beq.n	8005378 <HCD_RXQLVL_IRQHandler+0x46>
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b05      	cmp	r3, #5
 8005372:	f000 80a9 	beq.w	80054c8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005376:	e0aa      	b.n	80054ce <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80a6 	beq.w	80054cc <HCD_RXQLVL_IRQHandler+0x19a>
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	212c      	movs	r1, #44	; 0x2c
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	4413      	add	r3, r2
 800538c:	3344      	adds	r3, #68	; 0x44
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 809b 	beq.w	80054cc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	212c      	movs	r1, #44	; 0x2c
 800539c:	fb01 f303 	mul.w	r3, r1, r3
 80053a0:	4413      	add	r3, r2
 80053a2:	3350      	adds	r3, #80	; 0x50
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	441a      	add	r2, r3
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	202c      	movs	r0, #44	; 0x2c
 80053b0:	fb00 f303 	mul.w	r3, r0, r3
 80053b4:	440b      	add	r3, r1
 80053b6:	334c      	adds	r3, #76	; 0x4c
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d87a      	bhi.n	80054b4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	212c      	movs	r1, #44	; 0x2c
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	4413      	add	r3, r2
 80053ce:	3344      	adds	r3, #68	; 0x44
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	b292      	uxth	r2, r2
 80053d6:	4619      	mov	r1, r3
 80053d8:	f006 ffe0 	bl	800c39c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	212c      	movs	r1, #44	; 0x2c
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	3344      	adds	r3, #68	; 0x44
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	441a      	add	r2, r3
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	202c      	movs	r0, #44	; 0x2c
 80053f6:	fb00 f303 	mul.w	r3, r0, r3
 80053fa:	440b      	add	r3, r1
 80053fc:	3344      	adds	r3, #68	; 0x44
 80053fe:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	212c      	movs	r1, #44	; 0x2c
 8005406:	fb01 f303 	mul.w	r3, r1, r3
 800540a:	4413      	add	r3, r2
 800540c:	3350      	adds	r3, #80	; 0x50
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	441a      	add	r2, r3
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	202c      	movs	r0, #44	; 0x2c
 800541a:	fb00 f303 	mul.w	r3, r0, r3
 800541e:	440b      	add	r3, r1
 8005420:	3350      	adds	r3, #80	; 0x50
 8005422:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	0cdb      	lsrs	r3, r3, #19
 8005434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005438:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	212c      	movs	r1, #44	; 0x2c
 8005440:	fb01 f303 	mul.w	r3, r1, r3
 8005444:	4413      	add	r3, r2
 8005446:	3340      	adds	r3, #64	; 0x40
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4293      	cmp	r3, r2
 8005450:	d13c      	bne.n	80054cc <HCD_RXQLVL_IRQHandler+0x19a>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d039      	beq.n	80054cc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	4413      	add	r3, r2
 8005460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800546e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005476:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005484:	461a      	mov	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	212c      	movs	r1, #44	; 0x2c
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	4413      	add	r3, r2
 8005496:	3354      	adds	r3, #84	; 0x54
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	f083 0301 	eor.w	r3, r3, #1
 800549e:	b2d8      	uxtb	r0, r3
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	212c      	movs	r1, #44	; 0x2c
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	4413      	add	r3, r2
 80054ac:	3354      	adds	r3, #84	; 0x54
 80054ae:	4602      	mov	r2, r0
 80054b0:	701a      	strb	r2, [r3, #0]
      break;
 80054b2:	e00b      	b.n	80054cc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	212c      	movs	r1, #44	; 0x2c
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	4413      	add	r3, r2
 80054c0:	3360      	adds	r3, #96	; 0x60
 80054c2:	2204      	movs	r2, #4
 80054c4:	701a      	strb	r2, [r3, #0]
      break;
 80054c6:	e001      	b.n	80054cc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80054c8:	bf00      	nop
 80054ca:	e000      	b.n	80054ce <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80054cc:	bf00      	nop
  }
}
 80054ce:	bf00      	nop
 80054d0:	3728      	adds	r7, #40	; 0x28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b086      	sub	sp, #24
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005502:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b02      	cmp	r3, #2
 800550c:	d10b      	bne.n	8005526 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d102      	bne.n	800551e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f00c f9af 	bl	801187c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b08      	cmp	r3, #8
 800552e:	d132      	bne.n	8005596 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f043 0308 	orr.w	r3, r3, #8
 8005536:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b04      	cmp	r3, #4
 8005540:	d126      	bne.n	8005590 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d113      	bne.n	8005572 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005554:	d106      	bne.n	8005564 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2102      	movs	r1, #2
 800555c:	4618      	mov	r0, r3
 800555e:	f007 f87f 	bl	800c660 <USB_InitFSLSPClkSel>
 8005562:	e011      	b.n	8005588 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2101      	movs	r1, #1
 800556a:	4618      	mov	r0, r3
 800556c:	f007 f878 	bl	800c660 <USB_InitFSLSPClkSel>
 8005570:	e00a      	b.n	8005588 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d106      	bne.n	8005588 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005580:	461a      	mov	r2, r3
 8005582:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005586:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f00c f9a5 	bl	80118d8 <HAL_HCD_PortEnabled_Callback>
 800558e:	e002      	b.n	8005596 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f00c f9af 	bl	80118f4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b20      	cmp	r3, #32
 800559e:	d103      	bne.n	80055a8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f043 0320 	orr.w	r3, r3, #32
 80055a6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055ae:	461a      	mov	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6013      	str	r3, [r2, #0]
}
 80055b4:	bf00      	nop
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e1bd      	b.n	800594a <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a93      	ldr	r2, [pc, #588]	; (8005820 <HAL_I2C_Init+0x264>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00e      	beq.n	80055f6 <HAL_I2C_Init+0x3a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a91      	ldr	r2, [pc, #580]	; (8005824 <HAL_I2C_Init+0x268>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d009      	beq.n	80055f6 <HAL_I2C_Init+0x3a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a90      	ldr	r2, [pc, #576]	; (8005828 <HAL_I2C_Init+0x26c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d004      	beq.n	80055f6 <HAL_I2C_Init+0x3a>
 80055ec:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80055f0:	488e      	ldr	r0, [pc, #568]	; (800582c <HAL_I2C_Init+0x270>)
 80055f2:	f7fb feb2 	bl	800135a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <HAL_I2C_Init+0x4c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	4a8b      	ldr	r2, [pc, #556]	; (8005830 <HAL_I2C_Init+0x274>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d904      	bls.n	8005612 <HAL_I2C_Init+0x56>
 8005608:	f240 11bf 	movw	r1, #447	; 0x1bf
 800560c:	4887      	ldr	r0, [pc, #540]	; (800582c <HAL_I2C_Init+0x270>)
 800560e:	f7fb fea4 	bl	800135a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d009      	beq.n	800562e <HAL_I2C_Init+0x72>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005622:	d004      	beq.n	800562e <HAL_I2C_Init+0x72>
 8005624:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005628:	4880      	ldr	r0, [pc, #512]	; (800582c <HAL_I2C_Init+0x270>)
 800562a:	f7fb fe96 	bl	800135a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005636:	f023 0303 	bic.w	r3, r3, #3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <HAL_I2C_Init+0x8c>
 800563e:	f240 11c1 	movw	r1, #449	; 0x1c1
 8005642:	487a      	ldr	r0, [pc, #488]	; (800582c <HAL_I2C_Init+0x270>)
 8005644:	f7fb fe89 	bl	800135a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005650:	d009      	beq.n	8005666 <HAL_I2C_Init+0xaa>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800565a:	d004      	beq.n	8005666 <HAL_I2C_Init+0xaa>
 800565c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8005660:	4872      	ldr	r0, [pc, #456]	; (800582c <HAL_I2C_Init+0x270>)
 8005662:	f7fb fe7a 	bl	800135a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <HAL_I2C_Init+0xc4>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d004      	beq.n	8005680 <HAL_I2C_Init+0xc4>
 8005676:	f240 11c3 	movw	r1, #451	; 0x1c3
 800567a:	486c      	ldr	r0, [pc, #432]	; (800582c <HAL_I2C_Init+0x270>)
 800567c:	f7fb fe6d 	bl	800135a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <HAL_I2C_Init+0xda>
 800568c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005690:	4866      	ldr	r0, [pc, #408]	; (800582c <HAL_I2C_Init+0x270>)
 8005692:	f7fb fe62 	bl	800135a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_I2C_Init+0xf4>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	2b40      	cmp	r3, #64	; 0x40
 80056a4:	d004      	beq.n	80056b0 <HAL_I2C_Init+0xf4>
 80056a6:	f240 11c5 	movw	r1, #453	; 0x1c5
 80056aa:	4860      	ldr	r0, [pc, #384]	; (800582c <HAL_I2C_Init+0x270>)
 80056ac:	f7fb fe55 	bl	800135a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d008      	beq.n	80056ca <HAL_I2C_Init+0x10e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	2b80      	cmp	r3, #128	; 0x80
 80056be:	d004      	beq.n	80056ca <HAL_I2C_Init+0x10e>
 80056c0:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80056c4:	4859      	ldr	r0, [pc, #356]	; (800582c <HAL_I2C_Init+0x270>)
 80056c6:	f7fb fe48 	bl	800135a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fb fc32 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2224      	movs	r2, #36	; 0x24
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0201 	bic.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800570a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800571a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800571c:	f001 fa02 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 8005720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	4a43      	ldr	r2, [pc, #268]	; (8005834 <HAL_I2C_Init+0x278>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d807      	bhi.n	800573c <HAL_I2C_Init+0x180>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a42      	ldr	r2, [pc, #264]	; (8005838 <HAL_I2C_Init+0x27c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	bf94      	ite	ls
 8005734:	2301      	movls	r3, #1
 8005736:	2300      	movhi	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	e006      	b.n	800574a <HAL_I2C_Init+0x18e>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4a3f      	ldr	r2, [pc, #252]	; (800583c <HAL_I2C_Init+0x280>)
 8005740:	4293      	cmp	r3, r2
 8005742:	bf94      	ite	ls
 8005744:	2301      	movls	r3, #1
 8005746:	2300      	movhi	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e0fb      	b.n	800594a <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4a3a      	ldr	r2, [pc, #232]	; (8005840 <HAL_I2C_Init+0x284>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	0c9b      	lsrs	r3, r3, #18
 800575c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4a2c      	ldr	r2, [pc, #176]	; (8005834 <HAL_I2C_Init+0x278>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d802      	bhi.n	800578c <HAL_I2C_Init+0x1d0>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	3301      	adds	r3, #1
 800578a:	e009      	b.n	80057a0 <HAL_I2C_Init+0x1e4>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	4a2b      	ldr	r2, [pc, #172]	; (8005844 <HAL_I2C_Init+0x288>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	099b      	lsrs	r3, r3, #6
 800579e:	3301      	adds	r3, #1
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	491e      	ldr	r1, [pc, #120]	; (8005834 <HAL_I2C_Init+0x278>)
 80057bc:	428b      	cmp	r3, r1
 80057be:	d819      	bhi.n	80057f4 <HAL_I2C_Init+0x238>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	1e59      	subs	r1, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ce:	1c59      	adds	r1, r3, #1
 80057d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057d4:	400b      	ands	r3, r1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_I2C_Init+0x234>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1e59      	subs	r1, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80057e8:	3301      	adds	r3, #1
 80057ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ee:	e065      	b.n	80058bc <HAL_I2C_Init+0x300>
 80057f0:	2304      	movs	r3, #4
 80057f2:	e063      	b.n	80058bc <HAL_I2C_Init+0x300>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d125      	bne.n	8005848 <HAL_I2C_Init+0x28c>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1e58      	subs	r0, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6859      	ldr	r1, [r3, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	440b      	add	r3, r1
 800580a:	fbb0 f3f3 	udiv	r3, r0, r3
 800580e:	3301      	adds	r3, #1
 8005810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005814:	2b00      	cmp	r3, #0
 8005816:	bf0c      	ite	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	2300      	movne	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	e026      	b.n	800586e <HAL_I2C_Init+0x2b2>
 8005820:	40005400 	.word	0x40005400
 8005824:	40005800 	.word	0x40005800
 8005828:	40005c00 	.word	0x40005c00
 800582c:	08013fa0 	.word	0x08013fa0
 8005830:	00061a80 	.word	0x00061a80
 8005834:	000186a0 	.word	0x000186a0
 8005838:	001e847f 	.word	0x001e847f
 800583c:	003d08ff 	.word	0x003d08ff
 8005840:	431bde83 	.word	0x431bde83
 8005844:	10624dd3 	.word	0x10624dd3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1e58      	subs	r0, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6859      	ldr	r1, [r3, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	0099      	lsls	r1, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	fbb0 f3f3 	udiv	r3, r0, r3
 800585e:	3301      	adds	r3, #1
 8005860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_I2C_Init+0x2ba>
 8005872:	2301      	movs	r3, #1
 8005874:	e022      	b.n	80058bc <HAL_I2C_Init+0x300>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10e      	bne.n	800589c <HAL_I2C_Init+0x2e0>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1e58      	subs	r0, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6859      	ldr	r1, [r3, #4]
 8005886:	460b      	mov	r3, r1
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	440b      	add	r3, r1
 800588c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005890:	3301      	adds	r3, #1
 8005892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589a:	e00f      	b.n	80058bc <HAL_I2C_Init+0x300>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	1e58      	subs	r0, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6859      	ldr	r1, [r3, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	0099      	lsls	r1, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80058b2:	3301      	adds	r3, #1
 80058b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	6809      	ldr	r1, [r1, #0]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69da      	ldr	r2, [r3, #28]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6911      	ldr	r1, [r2, #16]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	68d2      	ldr	r2, [r2, #12]
 80058f6:	4311      	orrs	r1, r2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	430b      	orrs	r3, r1
 80058fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695a      	ldr	r2, [r3, #20]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop

08005954 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e14b      	b.n	8005bfe <HAL_LTDC_Init+0x2aa>
  }

  /* Check function parameters */
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a97      	ldr	r2, [pc, #604]	; (8005bc8 <HAL_LTDC_Init+0x274>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <HAL_LTDC_Init+0x24>
 8005970:	21e1      	movs	r1, #225	; 0xe1
 8005972:	4896      	ldr	r0, [pc, #600]	; (8005bcc <HAL_LTDC_Init+0x278>)
 8005974:	f7fb fcf1 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005980:	d303      	bcc.n	800598a <HAL_LTDC_Init+0x36>
 8005982:	21e2      	movs	r1, #226	; 0xe2
 8005984:	4891      	ldr	r0, [pc, #580]	; (8005bcc <HAL_LTDC_Init+0x278>)
 8005986:	f7fb fce8 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005992:	d303      	bcc.n	800599c <HAL_LTDC_Init+0x48>
 8005994:	21e3      	movs	r1, #227	; 0xe3
 8005996:	488d      	ldr	r0, [pc, #564]	; (8005bcc <HAL_LTDC_Init+0x278>)
 8005998:	f7fb fcdf 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a4:	d303      	bcc.n	80059ae <HAL_LTDC_Init+0x5a>
 80059a6:	21e4      	movs	r1, #228	; 0xe4
 80059a8:	4888      	ldr	r0, [pc, #544]	; (8005bcc <HAL_LTDC_Init+0x278>)
 80059aa:	f7fb fcd6 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b6:	d303      	bcc.n	80059c0 <HAL_LTDC_Init+0x6c>
 80059b8:	21e5      	movs	r1, #229	; 0xe5
 80059ba:	4884      	ldr	r0, [pc, #528]	; (8005bcc <HAL_LTDC_Init+0x278>)
 80059bc:	f7fb fccd 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c8:	d303      	bcc.n	80059d2 <HAL_LTDC_Init+0x7e>
 80059ca:	21e6      	movs	r1, #230	; 0xe6
 80059cc:	487f      	ldr	r0, [pc, #508]	; (8005bcc <HAL_LTDC_Init+0x278>)
 80059ce:	f7fb fcc4 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059da:	d303      	bcc.n	80059e4 <HAL_LTDC_Init+0x90>
 80059dc:	21e7      	movs	r1, #231	; 0xe7
 80059de:	487b      	ldr	r0, [pc, #492]	; (8005bcc <HAL_LTDC_Init+0x278>)
 80059e0:	f7fb fcbb 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ec:	d303      	bcc.n	80059f6 <HAL_LTDC_Init+0xa2>
 80059ee:	21e8      	movs	r1, #232	; 0xe8
 80059f0:	4876      	ldr	r0, [pc, #472]	; (8005bcc <HAL_LTDC_Init+0x278>)
 80059f2:	f7fb fcb2 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fe:	d303      	bcc.n	8005a08 <HAL_LTDC_Init+0xb4>
 8005a00:	21e9      	movs	r1, #233	; 0xe9
 8005a02:	4872      	ldr	r0, [pc, #456]	; (8005bcc <HAL_LTDC_Init+0x278>)
 8005a04:	f7fb fca9 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <HAL_LTDC_Init+0xce>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a18:	d003      	beq.n	8005a22 <HAL_LTDC_Init+0xce>
 8005a1a:	21ea      	movs	r1, #234	; 0xea
 8005a1c:	486b      	ldr	r0, [pc, #428]	; (8005bcc <HAL_LTDC_Init+0x278>)
 8005a1e:	f7fb fc9c 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_LTDC_Init+0xe8>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d003      	beq.n	8005a3c <HAL_LTDC_Init+0xe8>
 8005a34:	21eb      	movs	r1, #235	; 0xeb
 8005a36:	4865      	ldr	r0, [pc, #404]	; (8005bcc <HAL_LTDC_Init+0x278>)
 8005a38:	f7fb fc8f 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_LTDC_Init+0x102>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a4c:	d003      	beq.n	8005a56 <HAL_LTDC_Init+0x102>
 8005a4e:	21ec      	movs	r1, #236	; 0xec
 8005a50:	485e      	ldr	r0, [pc, #376]	; (8005bcc <HAL_LTDC_Init+0x278>)
 8005a52:	f7fb fc82 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d008      	beq.n	8005a70 <HAL_LTDC_Init+0x11c>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a66:	d003      	beq.n	8005a70 <HAL_LTDC_Init+0x11c>
 8005a68:	21ed      	movs	r1, #237	; 0xed
 8005a6a:	4858      	ldr	r0, [pc, #352]	; (8005bcc <HAL_LTDC_Init+0x278>)
 8005a6c:	f7fb fc75 	bl	800135a <assert_failed>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d106      	bne.n	8005a8a <HAL_LTDC_Init+0x136>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7fb fb5b 	bl	8001140 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699a      	ldr	r2, [r3, #24]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005aa0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6999      	ldr	r1, [r3, #24]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ab6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6899      	ldr	r1, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	4b3f      	ldr	r3, [pc, #252]	; (8005bd0 <HAL_LTDC_Init+0x27c>)
 8005ad2:	400b      	ands	r3, r1
 8005ad4:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	041b      	lsls	r3, r3, #16
 8005adc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6899      	ldr	r1, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68d9      	ldr	r1, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4b34      	ldr	r3, [pc, #208]	; (8005bd0 <HAL_LTDC_Init+0x27c>)
 8005b00:	400b      	ands	r3, r1
 8005b02:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	041b      	lsls	r3, r3, #16
 8005b0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68d9      	ldr	r1, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1a      	ldr	r2, [r3, #32]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6919      	ldr	r1, [r3, #16]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <HAL_LTDC_Init+0x27c>)
 8005b2e:	400b      	ands	r3, r1
 8005b30:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	041b      	lsls	r3, r3, #16
 8005b38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6919      	ldr	r1, [r3, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6959      	ldr	r1, [r3, #20]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <HAL_LTDC_Init+0x27c>)
 8005b5c:	400b      	ands	r3, r1
 8005b5e:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	041b      	lsls	r3, r3, #16
 8005b66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6959      	ldr	r1, [r3, #20]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b84:	021b      	lsls	r3, r3, #8
 8005b86:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	e005      	b.n	8005bd4 <HAL_LTDC_Init+0x280>
 8005bc8:	40016800 	.word	0x40016800
 8005bcc:	08013fd8 	.word	0x08013fd8
 8005bd0:	f000f800 	.word	0xf000f800
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0206 	orr.w	r2, r2, #6
 8005bda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop

08005c08 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d023      	beq.n	8005c72 <HAL_LTDC_IRQHandler+0x6a>
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01e      	beq.n	8005c72 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0204 	bic.w	r2, r2, #4
 8005c42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2204      	movs	r2, #4
 8005c4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c52:	f043 0201 	orr.w	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f86f 	bl	8005d50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d023      	beq.n	8005cc4 <HAL_LTDC_IRQHandler+0xbc>
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01e      	beq.n	8005cc4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0202 	bic.w	r2, r2, #2
 8005c94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ca4:	f043 0202 	orr.w	r2, r3, #2
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2204      	movs	r2, #4
 8005cb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f846 	bl	8005d50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01b      	beq.n	8005d06 <HAL_LTDC_IRQHandler+0xfe>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d016      	beq.n	8005d06 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2201      	movs	r2, #1
 8005cee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f82f 	bl	8005d64 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01b      	beq.n	8005d48 <HAL_LTDC_IRQHandler+0x140>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d016      	beq.n	8005d48 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0208 	bic.w	r2, r2, #8
 8005d28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2208      	movs	r2, #8
 8005d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f818 	bl	8005d78 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005d48:	bf00      	nop
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d8c:	b5b0      	push	{r4, r5, r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d904      	bls.n	8005da8 <HAL_LTDC_ConfigLayer+0x1c>
 8005d9e:	f44f 714f 	mov.w	r1, #828	; 0x33c
 8005da2:	4865      	ldr	r0, [pc, #404]	; (8005f38 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005da4:	f7fb fad9 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db0:	d304      	bcc.n	8005dbc <HAL_LTDC_ConfigLayer+0x30>
 8005db2:	f240 313d 	movw	r1, #829	; 0x33d
 8005db6:	4860      	ldr	r0, [pc, #384]	; (8005f38 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005db8:	f7fb facf 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc4:	d304      	bcc.n	8005dd0 <HAL_LTDC_ConfigLayer+0x44>
 8005dc6:	f240 313e 	movw	r1, #830	; 0x33e
 8005dca:	485b      	ldr	r0, [pc, #364]	; (8005f38 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005dcc:	f7fb fac5 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd8:	d304      	bcc.n	8005de4 <HAL_LTDC_ConfigLayer+0x58>
 8005dda:	f240 313f 	movw	r1, #831	; 0x33f
 8005dde:	4856      	ldr	r0, [pc, #344]	; (8005f38 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005de0:	f7fb fabb 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dec:	d304      	bcc.n	8005df8 <HAL_LTDC_ConfigLayer+0x6c>
 8005dee:	f44f 7150 	mov.w	r1, #832	; 0x340
 8005df2:	4851      	ldr	r0, [pc, #324]	; (8005f38 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005df4:	f7fb fab1 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d020      	beq.n	8005e42 <HAL_LTDC_ConfigLayer+0xb6>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d01c      	beq.n	8005e42 <HAL_LTDC_ConfigLayer+0xb6>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d018      	beq.n	8005e42 <HAL_LTDC_ConfigLayer+0xb6>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d014      	beq.n	8005e42 <HAL_LTDC_ConfigLayer+0xb6>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d010      	beq.n	8005e42 <HAL_LTDC_ConfigLayer+0xb6>
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b05      	cmp	r3, #5
 8005e26:	d00c      	beq.n	8005e42 <HAL_LTDC_ConfigLayer+0xb6>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b06      	cmp	r3, #6
 8005e2e:	d008      	beq.n	8005e42 <HAL_LTDC_ConfigLayer+0xb6>
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b07      	cmp	r3, #7
 8005e36:	d004      	beq.n	8005e42 <HAL_LTDC_ConfigLayer+0xb6>
 8005e38:	f240 3141 	movw	r1, #833	; 0x341
 8005e3c:	483e      	ldr	r0, [pc, #248]	; (8005f38 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005e3e:	f7fb fa8c 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	2bff      	cmp	r3, #255	; 0xff
 8005e48:	d904      	bls.n	8005e54 <HAL_LTDC_ConfigLayer+0xc8>
 8005e4a:	f240 3142 	movw	r1, #834	; 0x342
 8005e4e:	483a      	ldr	r0, [pc, #232]	; (8005f38 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005e50:	f7fb fa83 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	2bff      	cmp	r3, #255	; 0xff
 8005e5a:	d904      	bls.n	8005e66 <HAL_LTDC_ConfigLayer+0xda>
 8005e5c:	f240 3143 	movw	r1, #835	; 0x343
 8005e60:	4835      	ldr	r0, [pc, #212]	; (8005f38 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005e62:	f7fb fa7a 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6e:	d009      	beq.n	8005e84 <HAL_LTDC_ConfigLayer+0xf8>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e78:	d004      	beq.n	8005e84 <HAL_LTDC_ConfigLayer+0xf8>
 8005e7a:	f44f 7151 	mov.w	r1, #836	; 0x344
 8005e7e:	482e      	ldr	r0, [pc, #184]	; (8005f38 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005e80:	f7fb fa6b 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	2b05      	cmp	r3, #5
 8005e8a:	d008      	beq.n	8005e9e <HAL_LTDC_ConfigLayer+0x112>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	2b07      	cmp	r3, #7
 8005e92:	d004      	beq.n	8005e9e <HAL_LTDC_ConfigLayer+0x112>
 8005e94:	f240 3145 	movw	r1, #837	; 0x345
 8005e98:	4827      	ldr	r0, [pc, #156]	; (8005f38 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005e9a:	f7fb fa5e 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea6:	d304      	bcc.n	8005eb2 <HAL_LTDC_ConfigLayer+0x126>
 8005ea8:	f240 3146 	movw	r1, #838	; 0x346
 8005eac:	4822      	ldr	r0, [pc, #136]	; (8005f38 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005eae:	f7fb fa54 	bl	800135a <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eba:	d304      	bcc.n	8005ec6 <HAL_LTDC_ConfigLayer+0x13a>
 8005ebc:	f240 3147 	movw	r1, #839	; 0x347
 8005ec0:	481d      	ldr	r0, [pc, #116]	; (8005f38 <HAL_LTDC_ConfigLayer+0x1ac>)
 8005ec2:	f7fb fa4a 	bl	800135a <assert_failed>

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_LTDC_ConfigLayer+0x148>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e02c      	b.n	8005f2e <HAL_LTDC_ConfigLayer+0x1a2>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2134      	movs	r1, #52	; 0x34
 8005eea:	fb01 f303 	mul.w	r3, r1, r3
 8005eee:	4413      	add	r3, r2
 8005ef0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4614      	mov	r4, r2
 8005ef8:	461d      	mov	r5, r3
 8005efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f06:	682b      	ldr	r3, [r5, #0]
 8005f08:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 f814 	bl	8005f3c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bdb0      	pop	{r4, r5, r7, pc}
 8005f36:	bf00      	nop
 8005f38:	08013fd8 	.word	0x08013fd8

08005f3c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b089      	sub	sp, #36	; 0x24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	0c1b      	lsrs	r3, r3, #16
 8005f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f58:	4413      	add	r3, r2
 8005f5a:	041b      	lsls	r3, r3, #16
 8005f5c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	01db      	lsls	r3, r3, #7
 8005f68:	4413      	add	r3, r2
 8005f6a:	3384      	adds	r3, #132	; 0x84
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	4611      	mov	r1, r2
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	01d2      	lsls	r2, r2, #7
 8005f78:	440a      	add	r2, r1
 8005f7a:	3284      	adds	r2, #132	; 0x84
 8005f7c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f80:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
 8005f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f92:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f94:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	01db      	lsls	r3, r3, #7
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3384      	adds	r3, #132	; 0x84
 8005fa4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005faa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fba:	4413      	add	r3, r2
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	01db      	lsls	r3, r3, #7
 8005fca:	4413      	add	r3, r2
 8005fcc:	3384      	adds	r3, #132	; 0x84
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	01d2      	lsls	r2, r2, #7
 8005fda:	440a      	add	r2, r1
 8005fdc:	3284      	adds	r2, #132	; 0x84
 8005fde:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005fe2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ff2:	4413      	add	r3, r2
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	01db      	lsls	r3, r3, #7
 8006000:	440b      	add	r3, r1
 8006002:	3384      	adds	r3, #132	; 0x84
 8006004:	4619      	mov	r1, r3
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4313      	orrs	r3, r2
 800600a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	01db      	lsls	r3, r3, #7
 8006016:	4413      	add	r3, r2
 8006018:	3384      	adds	r3, #132	; 0x84
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	6812      	ldr	r2, [r2, #0]
 8006020:	4611      	mov	r1, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	01d2      	lsls	r2, r2, #7
 8006026:	440a      	add	r2, r1
 8006028:	3284      	adds	r2, #132	; 0x84
 800602a:	f023 0307 	bic.w	r3, r3, #7
 800602e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	01db      	lsls	r3, r3, #7
 800603a:	4413      	add	r3, r2
 800603c:	3384      	adds	r3, #132	; 0x84
 800603e:	461a      	mov	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006056:	041b      	lsls	r3, r3, #16
 8006058:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	061b      	lsls	r3, r3, #24
 8006060:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	01db      	lsls	r3, r3, #7
 800606c:	4413      	add	r3, r2
 800606e:	3384      	adds	r3, #132	; 0x84
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	01db      	lsls	r3, r3, #7
 800607c:	4413      	add	r3, r2
 800607e:	3384      	adds	r3, #132	; 0x84
 8006080:	461a      	mov	r2, r3
 8006082:	2300      	movs	r3, #0
 8006084:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800608c:	461a      	mov	r2, r3
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	431a      	orrs	r2, r3
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	431a      	orrs	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4619      	mov	r1, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	01db      	lsls	r3, r3, #7
 80060a0:	440b      	add	r3, r1
 80060a2:	3384      	adds	r3, #132	; 0x84
 80060a4:	4619      	mov	r1, r3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	01db      	lsls	r3, r3, #7
 80060b6:	4413      	add	r3, r2
 80060b8:	3384      	adds	r3, #132	; 0x84
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	6812      	ldr	r2, [r2, #0]
 80060c0:	4611      	mov	r1, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	01d2      	lsls	r2, r2, #7
 80060c6:	440a      	add	r2, r1
 80060c8:	3284      	adds	r2, #132	; 0x84
 80060ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	01db      	lsls	r3, r3, #7
 80060da:	4413      	add	r3, r2
 80060dc:	3384      	adds	r3, #132	; 0x84
 80060de:	461a      	mov	r2, r3
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	01db      	lsls	r3, r3, #7
 80060f0:	4413      	add	r3, r2
 80060f2:	3384      	adds	r3, #132	; 0x84
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	4611      	mov	r1, r2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	01d2      	lsls	r2, r2, #7
 8006100:	440a      	add	r2, r1
 8006102:	3284      	adds	r2, #132	; 0x84
 8006104:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006108:	f023 0307 	bic.w	r3, r3, #7
 800610c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	69da      	ldr	r2, [r3, #28]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	6809      	ldr	r1, [r1, #0]
 800611a:	4608      	mov	r0, r1
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	01c9      	lsls	r1, r1, #7
 8006120:	4401      	add	r1, r0
 8006122:	3184      	adds	r1, #132	; 0x84
 8006124:	4313      	orrs	r3, r2
 8006126:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	01db      	lsls	r3, r3, #7
 8006132:	4413      	add	r3, r2
 8006134:	3384      	adds	r3, #132	; 0x84
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	01db      	lsls	r3, r3, #7
 8006142:	4413      	add	r3, r2
 8006144:	3384      	adds	r3, #132	; 0x84
 8006146:	461a      	mov	r2, r3
 8006148:	2300      	movs	r3, #0
 800614a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	01db      	lsls	r3, r3, #7
 8006156:	4413      	add	r3, r2
 8006158:	3384      	adds	r3, #132	; 0x84
 800615a:	461a      	mov	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d102      	bne.n	8006170 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800616a:	2304      	movs	r3, #4
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	e01b      	b.n	80061a8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d102      	bne.n	800617e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006178:	2303      	movs	r3, #3
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	e014      	b.n	80061a8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b04      	cmp	r3, #4
 8006184:	d00b      	beq.n	800619e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800618a:	2b02      	cmp	r3, #2
 800618c:	d007      	beq.n	800619e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006192:	2b03      	cmp	r3, #3
 8006194:	d003      	beq.n	800619e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800619a:	2b07      	cmp	r3, #7
 800619c:	d102      	bne.n	80061a4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800619e:	2302      	movs	r3, #2
 80061a0:	61fb      	str	r3, [r7, #28]
 80061a2:	e001      	b.n	80061a8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80061a4:	2301      	movs	r3, #1
 80061a6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	01db      	lsls	r3, r3, #7
 80061b2:	4413      	add	r3, r2
 80061b4:	3384      	adds	r3, #132	; 0x84
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	4611      	mov	r1, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	01d2      	lsls	r2, r2, #7
 80061c2:	440a      	add	r2, r1
 80061c4:	3284      	adds	r2, #132	; 0x84
 80061c6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80061ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6859      	ldr	r1, [r3, #4]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	1acb      	subs	r3, r1, r3
 80061e2:	69f9      	ldr	r1, [r7, #28]
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80061ea:	68f9      	ldr	r1, [r7, #12]
 80061ec:	6809      	ldr	r1, [r1, #0]
 80061ee:	4608      	mov	r0, r1
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	01c9      	lsls	r1, r1, #7
 80061f4:	4401      	add	r1, r0
 80061f6:	3184      	adds	r1, #132	; 0x84
 80061f8:	4313      	orrs	r3, r2
 80061fa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	01db      	lsls	r3, r3, #7
 8006206:	4413      	add	r3, r2
 8006208:	3384      	adds	r3, #132	; 0x84
 800620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	6812      	ldr	r2, [r2, #0]
 8006210:	4611      	mov	r1, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	01d2      	lsls	r2, r2, #7
 8006216:	440a      	add	r2, r1
 8006218:	3284      	adds	r2, #132	; 0x84
 800621a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800621e:	f023 0307 	bic.w	r3, r3, #7
 8006222:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	01db      	lsls	r3, r3, #7
 800622e:	4413      	add	r3, r2
 8006230:	3384      	adds	r3, #132	; 0x84
 8006232:	461a      	mov	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	01db      	lsls	r3, r3, #7
 8006244:	4413      	add	r3, r2
 8006246:	3384      	adds	r3, #132	; 0x84
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	4611      	mov	r1, r2
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	01d2      	lsls	r2, r2, #7
 8006254:	440a      	add	r2, r1
 8006256:	3284      	adds	r2, #132	; 0x84
 8006258:	f043 0301 	orr.w	r3, r3, #1
 800625c:	6013      	str	r3, [r2, #0]
}
 800625e:	bf00      	nop
 8006260:	3724      	adds	r7, #36	; 0x24
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006276:	2300      	movs	r3, #0
 8006278:	603b      	str	r3, [r7, #0]
 800627a:	4b20      	ldr	r3, [pc, #128]	; (80062fc <HAL_PWREx_EnableOverDrive+0x90>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	4a1f      	ldr	r2, [pc, #124]	; (80062fc <HAL_PWREx_EnableOverDrive+0x90>)
 8006280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006284:	6413      	str	r3, [r2, #64]	; 0x40
 8006286:	4b1d      	ldr	r3, [pc, #116]	; (80062fc <HAL_PWREx_EnableOverDrive+0x90>)
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006292:	4b1b      	ldr	r3, [pc, #108]	; (8006300 <HAL_PWREx_EnableOverDrive+0x94>)
 8006294:	2201      	movs	r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006298:	f7fb fde6 	bl	8001e68 <HAL_GetTick>
 800629c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800629e:	e009      	b.n	80062b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062a0:	f7fb fde2 	bl	8001e68 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ae:	d901      	bls.n	80062b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e01f      	b.n	80062f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062b4:	4b13      	ldr	r3, [pc, #76]	; (8006304 <HAL_PWREx_EnableOverDrive+0x98>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c0:	d1ee      	bne.n	80062a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80062c2:	4b11      	ldr	r3, [pc, #68]	; (8006308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062c4:	2201      	movs	r2, #1
 80062c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062c8:	f7fb fdce 	bl	8001e68 <HAL_GetTick>
 80062cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062ce:	e009      	b.n	80062e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062d0:	f7fb fdca 	bl	8001e68 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062de:	d901      	bls.n	80062e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e007      	b.n	80062f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062e4:	4b07      	ldr	r3, [pc, #28]	; (8006304 <HAL_PWREx_EnableOverDrive+0x98>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062f0:	d1ee      	bne.n	80062d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40023800 	.word	0x40023800
 8006300:	420e0040 	.word	0x420e0040
 8006304:	40007000 	.word	0x40007000
 8006308:	420e0044 	.word	0x420e0044

0800630c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af02      	add	r7, sp, #8
 8006312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006314:	f7fb fda8 	bl	8001e68 <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e0f6      	b.n	8006512 <HAL_QSPI_Init+0x206>
  }

  /* Check the parameters */
  assert_param(IS_QSPI_ALL_INSTANCE(hqspi->Instance));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a7c      	ldr	r2, [pc, #496]	; (800651c <HAL_QSPI_Init+0x210>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_QSPI_Init+0x2c>
 800632e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8006332:	487b      	ldr	r0, [pc, #492]	; (8006520 <HAL_QSPI_Init+0x214>)
 8006334:	f7fb f811 	bl	800135a <assert_failed>
  assert_param(IS_QSPI_CLOCK_PRESCALER(hqspi->Init.ClockPrescaler));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2bff      	cmp	r3, #255	; 0xff
 800633e:	d904      	bls.n	800634a <HAL_QSPI_Init+0x3e>
 8006340:	f240 1131 	movw	r1, #305	; 0x131
 8006344:	4876      	ldr	r0, [pc, #472]	; (8006520 <HAL_QSPI_Init+0x214>)
 8006346:	f7fb f808 	bl	800135a <assert_failed>
  assert_param(IS_QSPI_FIFO_THRESHOLD(hqspi->Init.FifoThreshold));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_QSPI_Init+0x4e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b20      	cmp	r3, #32
 8006358:	d904      	bls.n	8006364 <HAL_QSPI_Init+0x58>
 800635a:	f44f 7199 	mov.w	r1, #306	; 0x132
 800635e:	4870      	ldr	r0, [pc, #448]	; (8006520 <HAL_QSPI_Init+0x214>)
 8006360:	f7fa fffb 	bl	800135a <assert_failed>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <HAL_QSPI_Init+0x72>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2b10      	cmp	r3, #16
 8006372:	d004      	beq.n	800637e <HAL_QSPI_Init+0x72>
 8006374:	f240 1133 	movw	r1, #307	; 0x133
 8006378:	4869      	ldr	r0, [pc, #420]	; (8006520 <HAL_QSPI_Init+0x214>)
 800637a:	f7fa ffee 	bl	800135a <assert_failed>
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b1f      	cmp	r3, #31
 8006384:	d904      	bls.n	8006390 <HAL_QSPI_Init+0x84>
 8006386:	f44f 719a 	mov.w	r1, #308	; 0x134
 800638a:	4865      	ldr	r0, [pc, #404]	; (8006520 <HAL_QSPI_Init+0x214>)
 800638c:	f7fa ffe5 	bl	800135a <assert_failed>
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d027      	beq.n	80063e8 <HAL_QSPI_Init+0xdc>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a0:	d022      	beq.n	80063e8 <HAL_QSPI_Init+0xdc>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063aa:	d01d      	beq.n	80063e8 <HAL_QSPI_Init+0xdc>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b4:	d018      	beq.n	80063e8 <HAL_QSPI_Init+0xdc>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063be:	d013      	beq.n	80063e8 <HAL_QSPI_Init+0xdc>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80063c8:	d00e      	beq.n	80063e8 <HAL_QSPI_Init+0xdc>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063d2:	d009      	beq.n	80063e8 <HAL_QSPI_Init+0xdc>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063dc:	d004      	beq.n	80063e8 <HAL_QSPI_Init+0xdc>
 80063de:	f240 1135 	movw	r1, #309	; 0x135
 80063e2:	484f      	ldr	r0, [pc, #316]	; (8006520 <HAL_QSPI_Init+0x214>)
 80063e4:	f7fa ffb9 	bl	800135a <assert_failed>
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <HAL_QSPI_Init+0xf6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d004      	beq.n	8006402 <HAL_QSPI_Init+0xf6>
 80063f8:	f44f 719b 	mov.w	r1, #310	; 0x136
 80063fc:	4848      	ldr	r0, [pc, #288]	; (8006520 <HAL_QSPI_Init+0x214>)
 80063fe:	f7fa ffac 	bl	800135a <assert_failed>
  assert_param(IS_QSPI_DUAL_FLASH_MODE(hqspi->Init.DualFlash));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	2b40      	cmp	r3, #64	; 0x40
 8006408:	d008      	beq.n	800641c <HAL_QSPI_Init+0x110>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <HAL_QSPI_Init+0x110>
 8006412:	f240 1137 	movw	r1, #311	; 0x137
 8006416:	4842      	ldr	r0, [pc, #264]	; (8006520 <HAL_QSPI_Init+0x214>)
 8006418:	f7fa ff9f 	bl	800135a <assert_failed>

  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d00c      	beq.n	800643e <HAL_QSPI_Init+0x132>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d008      	beq.n	800643e <HAL_QSPI_Init+0x132>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	2b80      	cmp	r3, #128	; 0x80
 8006432:	d004      	beq.n	800643e <HAL_QSPI_Init+0x132>
 8006434:	f240 113b 	movw	r1, #315	; 0x13b
 8006438:	4839      	ldr	r0, [pc, #228]	; (8006520 <HAL_QSPI_Init+0x214>)
 800643a:	f7fa ff8e 	bl	800135a <assert_failed>
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <HAL_QSPI_Init+0x156>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fa ffb8 	bl	80013c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006458:	f241 3188 	movw	r1, #5000	; 0x1388
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f863 	bl	8006528 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	3b01      	subs	r3, #1
 8006472:	021a      	lsls	r2, r3, #8
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	2120      	movs	r1, #32
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f85b 	bl	8006544 <QSPI_WaitFlagStateUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006492:	7afb      	ldrb	r3, [r7, #11]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d137      	bne.n	8006508 <HAL_QSPI_Init+0x1fc>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064a2:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6852      	ldr	r2, [r2, #4]
 80064aa:	0611      	lsls	r1, r2, #24
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	68d2      	ldr	r2, [r2, #12]
 80064b0:	4311      	orrs	r1, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	69d2      	ldr	r2, [r2, #28]
 80064b6:	4311      	orrs	r1, r2
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6a12      	ldr	r2, [r2, #32]
 80064bc:	4311      	orrs	r1, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	430b      	orrs	r3, r1
 80064c4:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	4b15      	ldr	r3, [pc, #84]	; (8006524 <HAL_QSPI_Init+0x218>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6912      	ldr	r2, [r2, #16]
 80064d4:	0411      	lsls	r1, r2, #16
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6952      	ldr	r2, [r2, #20]
 80064da:	4311      	orrs	r1, r2
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6992      	ldr	r2, [r2, #24]
 80064e0:	4311      	orrs	r1, r2
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	430b      	orrs	r3, r1
 80064e8:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0201 	orr.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006510:	7afb      	ldrb	r3, [r7, #11]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	a0001000 	.word	0xa0001000
 8006520:	08014014 	.word	0x08014014
 8006524:	ffe0f8fe 	.word	0xffe0f8fe

08006528 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	4613      	mov	r3, r2
 8006552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006554:	e01a      	b.n	800658c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d016      	beq.n	800658c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655e:	f7fb fc83 	bl	8001e68 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	429a      	cmp	r2, r3
 800656c:	d302      	bcc.n	8006574 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10b      	bne.n	800658c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2204      	movs	r2, #4
 8006578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006580:	f043 0201 	orr.w	r2, r3, #1
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e00e      	b.n	80065aa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4013      	ands	r3, r2
 8006596:	2b00      	cmp	r3, #0
 8006598:	bf14      	ite	ne
 800659a:	2301      	movne	r3, #1
 800659c:	2300      	moveq	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d1d6      	bne.n	8006556 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e18c      	b.n	80068e2 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_RCC_ClockConfig+0x24>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b0f      	cmp	r3, #15
 80065d6:	d904      	bls.n	80065e2 <HAL_RCC_ClockConfig+0x2e>
 80065d8:	f240 215a 	movw	r1, #602	; 0x25a
 80065dc:	4887      	ldr	r0, [pc, #540]	; (80067fc <HAL_RCC_ClockConfig+0x248>)
 80065de:	f7fa febc 	bl	800135a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d031      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d02e      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d02b      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d028      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d025      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b05      	cmp	r3, #5
 8006604:	d022      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b06      	cmp	r3, #6
 800660a:	d01f      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b07      	cmp	r3, #7
 8006610:	d01c      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b08      	cmp	r3, #8
 8006616:	d019      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b09      	cmp	r3, #9
 800661c:	d016      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b0a      	cmp	r3, #10
 8006622:	d013      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2b0b      	cmp	r3, #11
 8006628:	d010      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b0c      	cmp	r3, #12
 800662e:	d00d      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b0d      	cmp	r3, #13
 8006634:	d00a      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b0e      	cmp	r3, #14
 800663a:	d007      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b0f      	cmp	r3, #15
 8006640:	d004      	beq.n	800664c <HAL_RCC_ClockConfig+0x98>
 8006642:	f240 215b 	movw	r1, #603	; 0x25b
 8006646:	486d      	ldr	r0, [pc, #436]	; (80067fc <HAL_RCC_ClockConfig+0x248>)
 8006648:	f7fa fe87 	bl	800135a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800664c:	4b6c      	ldr	r3, [pc, #432]	; (8006800 <HAL_RCC_ClockConfig+0x24c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d90c      	bls.n	8006674 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665a:	4b69      	ldr	r3, [pc, #420]	; (8006800 <HAL_RCC_ClockConfig+0x24c>)
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006662:	4b67      	ldr	r3, [pc, #412]	; (8006800 <HAL_RCC_ClockConfig+0x24c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d001      	beq.n	8006674 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e136      	b.n	80068e2 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d049      	beq.n	8006714 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800668c:	4b5d      	ldr	r3, [pc, #372]	; (8006804 <HAL_RCC_ClockConfig+0x250>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	4a5c      	ldr	r2, [pc, #368]	; (8006804 <HAL_RCC_ClockConfig+0x250>)
 8006692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066a4:	4b57      	ldr	r3, [pc, #348]	; (8006804 <HAL_RCC_ClockConfig+0x250>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	4a56      	ldr	r2, [pc, #344]	; (8006804 <HAL_RCC_ClockConfig+0x250>)
 80066aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d024      	beq.n	8006702 <HAL_RCC_ClockConfig+0x14e>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b80      	cmp	r3, #128	; 0x80
 80066be:	d020      	beq.n	8006702 <HAL_RCC_ClockConfig+0x14e>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	2b90      	cmp	r3, #144	; 0x90
 80066c6:	d01c      	beq.n	8006702 <HAL_RCC_ClockConfig+0x14e>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2ba0      	cmp	r3, #160	; 0xa0
 80066ce:	d018      	beq.n	8006702 <HAL_RCC_ClockConfig+0x14e>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	2bb0      	cmp	r3, #176	; 0xb0
 80066d6:	d014      	beq.n	8006702 <HAL_RCC_ClockConfig+0x14e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2bc0      	cmp	r3, #192	; 0xc0
 80066de:	d010      	beq.n	8006702 <HAL_RCC_ClockConfig+0x14e>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	2bd0      	cmp	r3, #208	; 0xd0
 80066e6:	d00c      	beq.n	8006702 <HAL_RCC_ClockConfig+0x14e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	2be0      	cmp	r3, #224	; 0xe0
 80066ee:	d008      	beq.n	8006702 <HAL_RCC_ClockConfig+0x14e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2bf0      	cmp	r3, #240	; 0xf0
 80066f6:	d004      	beq.n	8006702 <HAL_RCC_ClockConfig+0x14e>
 80066f8:	f240 217e 	movw	r1, #638	; 0x27e
 80066fc:	483f      	ldr	r0, [pc, #252]	; (80067fc <HAL_RCC_ClockConfig+0x248>)
 80066fe:	f7fa fe2c 	bl	800135a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006702:	4b40      	ldr	r3, [pc, #256]	; (8006804 <HAL_RCC_ClockConfig+0x250>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	493d      	ldr	r1, [pc, #244]	; (8006804 <HAL_RCC_ClockConfig+0x250>)
 8006710:	4313      	orrs	r3, r2
 8006712:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d059      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d010      	beq.n	800674a <HAL_RCC_ClockConfig+0x196>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d00c      	beq.n	800674a <HAL_RCC_ClockConfig+0x196>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b02      	cmp	r3, #2
 8006736:	d008      	beq.n	800674a <HAL_RCC_ClockConfig+0x196>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b03      	cmp	r3, #3
 800673e:	d004      	beq.n	800674a <HAL_RCC_ClockConfig+0x196>
 8006740:	f240 2185 	movw	r1, #645	; 0x285
 8006744:	482d      	ldr	r0, [pc, #180]	; (80067fc <HAL_RCC_ClockConfig+0x248>)
 8006746:	f7fa fe08 	bl	800135a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d107      	bne.n	8006762 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006752:	4b2c      	ldr	r3, [pc, #176]	; (8006804 <HAL_RCC_ClockConfig+0x250>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d119      	bne.n	8006792 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e0bf      	b.n	80068e2 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d003      	beq.n	8006772 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800676e:	2b03      	cmp	r3, #3
 8006770:	d107      	bne.n	8006782 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006772:	4b24      	ldr	r3, [pc, #144]	; (8006804 <HAL_RCC_ClockConfig+0x250>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e0af      	b.n	80068e2 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006782:	4b20      	ldr	r3, [pc, #128]	; (8006804 <HAL_RCC_ClockConfig+0x250>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e0a7      	b.n	80068e2 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006792:	4b1c      	ldr	r3, [pc, #112]	; (8006804 <HAL_RCC_ClockConfig+0x250>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f023 0203 	bic.w	r2, r3, #3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	4919      	ldr	r1, [pc, #100]	; (8006804 <HAL_RCC_ClockConfig+0x250>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067a4:	f7fb fb60 	bl	8001e68 <HAL_GetTick>
 80067a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067aa:	e00a      	b.n	80067c2 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067ac:	f7fb fb5c 	bl	8001e68 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e08f      	b.n	80068e2 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c2:	4b10      	ldr	r3, [pc, #64]	; (8006804 <HAL_RCC_ClockConfig+0x250>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 020c 	and.w	r2, r3, #12
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d1eb      	bne.n	80067ac <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067d4:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <HAL_RCC_ClockConfig+0x24c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d212      	bcs.n	8006808 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e2:	4b07      	ldr	r3, [pc, #28]	; (8006800 <HAL_RCC_ClockConfig+0x24c>)
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ea:	4b05      	ldr	r3, [pc, #20]	; (8006800 <HAL_RCC_ClockConfig+0x24c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d007      	beq.n	8006808 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e072      	b.n	80068e2 <HAL_RCC_ClockConfig+0x32e>
 80067fc:	08014050 	.word	0x08014050
 8006800:	40023c00 	.word	0x40023c00
 8006804:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d025      	beq.n	8006860 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d018      	beq.n	800684e <HAL_RCC_ClockConfig+0x29a>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006824:	d013      	beq.n	800684e <HAL_RCC_ClockConfig+0x29a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800682e:	d00e      	beq.n	800684e <HAL_RCC_ClockConfig+0x29a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006838:	d009      	beq.n	800684e <HAL_RCC_ClockConfig+0x29a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006842:	d004      	beq.n	800684e <HAL_RCC_ClockConfig+0x29a>
 8006844:	f240 21c3 	movw	r1, #707	; 0x2c3
 8006848:	4828      	ldr	r0, [pc, #160]	; (80068ec <HAL_RCC_ClockConfig+0x338>)
 800684a:	f7fa fd86 	bl	800135a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800684e:	4b28      	ldr	r3, [pc, #160]	; (80068f0 <HAL_RCC_ClockConfig+0x33c>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	4925      	ldr	r1, [pc, #148]	; (80068f0 <HAL_RCC_ClockConfig+0x33c>)
 800685c:	4313      	orrs	r3, r2
 800685e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d026      	beq.n	80068ba <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d018      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x2f2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800687c:	d013      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x2f2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006886:	d00e      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x2f2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006890:	d009      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x2f2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800689a:	d004      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x2f2>
 800689c:	f240 21ca 	movw	r1, #714	; 0x2ca
 80068a0:	4812      	ldr	r0, [pc, #72]	; (80068ec <HAL_RCC_ClockConfig+0x338>)
 80068a2:	f7fa fd5a 	bl	800135a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068a6:	4b12      	ldr	r3, [pc, #72]	; (80068f0 <HAL_RCC_ClockConfig+0x33c>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	490e      	ldr	r1, [pc, #56]	; (80068f0 <HAL_RCC_ClockConfig+0x33c>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068ba:	f000 f821 	bl	8006900 <HAL_RCC_GetSysClockFreq>
 80068be:	4602      	mov	r2, r0
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <HAL_RCC_ClockConfig+0x33c>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	091b      	lsrs	r3, r3, #4
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	490a      	ldr	r1, [pc, #40]	; (80068f4 <HAL_RCC_ClockConfig+0x340>)
 80068cc:	5ccb      	ldrb	r3, [r1, r3]
 80068ce:	fa22 f303 	lsr.w	r3, r2, r3
 80068d2:	4a09      	ldr	r2, [pc, #36]	; (80068f8 <HAL_RCC_ClockConfig+0x344>)
 80068d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068d6:	4b09      	ldr	r3, [pc, #36]	; (80068fc <HAL_RCC_ClockConfig+0x348>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fa ffb0 	bl	8001840 <HAL_InitTick>

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	08014050 	.word	0x08014050
 80068f0:	40023800 	.word	0x40023800
 80068f4:	08014320 	.word	0x08014320
 80068f8:	20000000 	.word	0x20000000
 80068fc:	20000004 	.word	0x20000004

08006900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006904:	b094      	sub	sp, #80	; 0x50
 8006906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	647b      	str	r3, [r7, #68]	; 0x44
 800690c:	2300      	movs	r3, #0
 800690e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006910:	2300      	movs	r3, #0
 8006912:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006918:	4b79      	ldr	r3, [pc, #484]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 030c 	and.w	r3, r3, #12
 8006920:	2b08      	cmp	r3, #8
 8006922:	d00d      	beq.n	8006940 <HAL_RCC_GetSysClockFreq+0x40>
 8006924:	2b08      	cmp	r3, #8
 8006926:	f200 80e1 	bhi.w	8006aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <HAL_RCC_GetSysClockFreq+0x34>
 800692e:	2b04      	cmp	r3, #4
 8006930:	d003      	beq.n	800693a <HAL_RCC_GetSysClockFreq+0x3a>
 8006932:	e0db      	b.n	8006aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006934:	4b73      	ldr	r3, [pc, #460]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8006936:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006938:	e0db      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800693a:	4b73      	ldr	r3, [pc, #460]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800693c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800693e:	e0d8      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006940:	4b6f      	ldr	r3, [pc, #444]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006948:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800694a:	4b6d      	ldr	r3, [pc, #436]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d063      	beq.n	8006a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006956:	4b6a      	ldr	r3, [pc, #424]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	099b      	lsrs	r3, r3, #6
 800695c:	2200      	movs	r2, #0
 800695e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006968:	633b      	str	r3, [r7, #48]	; 0x30
 800696a:	2300      	movs	r3, #0
 800696c:	637b      	str	r3, [r7, #52]	; 0x34
 800696e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006972:	4622      	mov	r2, r4
 8006974:	462b      	mov	r3, r5
 8006976:	f04f 0000 	mov.w	r0, #0
 800697a:	f04f 0100 	mov.w	r1, #0
 800697e:	0159      	lsls	r1, r3, #5
 8006980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006984:	0150      	lsls	r0, r2, #5
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4621      	mov	r1, r4
 800698c:	1a51      	subs	r1, r2, r1
 800698e:	6139      	str	r1, [r7, #16]
 8006990:	4629      	mov	r1, r5
 8006992:	eb63 0301 	sbc.w	r3, r3, r1
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069a4:	4659      	mov	r1, fp
 80069a6:	018b      	lsls	r3, r1, #6
 80069a8:	4651      	mov	r1, sl
 80069aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069ae:	4651      	mov	r1, sl
 80069b0:	018a      	lsls	r2, r1, #6
 80069b2:	4651      	mov	r1, sl
 80069b4:	ebb2 0801 	subs.w	r8, r2, r1
 80069b8:	4659      	mov	r1, fp
 80069ba:	eb63 0901 	sbc.w	r9, r3, r1
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069d2:	4690      	mov	r8, r2
 80069d4:	4699      	mov	r9, r3
 80069d6:	4623      	mov	r3, r4
 80069d8:	eb18 0303 	adds.w	r3, r8, r3
 80069dc:	60bb      	str	r3, [r7, #8]
 80069de:	462b      	mov	r3, r5
 80069e0:	eb49 0303 	adc.w	r3, r9, r3
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069f2:	4629      	mov	r1, r5
 80069f4:	024b      	lsls	r3, r1, #9
 80069f6:	4621      	mov	r1, r4
 80069f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069fc:	4621      	mov	r1, r4
 80069fe:	024a      	lsls	r2, r1, #9
 8006a00:	4610      	mov	r0, r2
 8006a02:	4619      	mov	r1, r3
 8006a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a06:	2200      	movs	r2, #0
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a10:	f7f9 fbf6 	bl	8000200 <__aeabi_uldivmod>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4613      	mov	r3, r2
 8006a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a1c:	e058      	b.n	8006ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a1e:	4b38      	ldr	r3, [pc, #224]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	099b      	lsrs	r3, r3, #6
 8006a24:	2200      	movs	r2, #0
 8006a26:	4618      	mov	r0, r3
 8006a28:	4611      	mov	r1, r2
 8006a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a2e:	623b      	str	r3, [r7, #32]
 8006a30:	2300      	movs	r3, #0
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
 8006a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a38:	4642      	mov	r2, r8
 8006a3a:	464b      	mov	r3, r9
 8006a3c:	f04f 0000 	mov.w	r0, #0
 8006a40:	f04f 0100 	mov.w	r1, #0
 8006a44:	0159      	lsls	r1, r3, #5
 8006a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a4a:	0150      	lsls	r0, r2, #5
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4641      	mov	r1, r8
 8006a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a56:	4649      	mov	r1, r9
 8006a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a70:	ebb2 040a 	subs.w	r4, r2, sl
 8006a74:	eb63 050b 	sbc.w	r5, r3, fp
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	00eb      	lsls	r3, r5, #3
 8006a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a86:	00e2      	lsls	r2, r4, #3
 8006a88:	4614      	mov	r4, r2
 8006a8a:	461d      	mov	r5, r3
 8006a8c:	4643      	mov	r3, r8
 8006a8e:	18e3      	adds	r3, r4, r3
 8006a90:	603b      	str	r3, [r7, #0]
 8006a92:	464b      	mov	r3, r9
 8006a94:	eb45 0303 	adc.w	r3, r5, r3
 8006a98:	607b      	str	r3, [r7, #4]
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	028b      	lsls	r3, r1, #10
 8006aaa:	4621      	mov	r1, r4
 8006aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	028a      	lsls	r2, r1, #10
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aba:	2200      	movs	r2, #0
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	61fa      	str	r2, [r7, #28]
 8006ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ac4:	f7f9 fb9c 	bl	8000200 <__aeabi_uldivmod>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4613      	mov	r3, r2
 8006ace:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	0c1b      	lsrs	r3, r3, #16
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	3301      	adds	r3, #1
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aea:	e002      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aec:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8006aee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3750      	adds	r7, #80	; 0x50
 8006af8:	46bd      	mov	sp, r7
 8006afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006afe:	bf00      	nop
 8006b00:	40023800 	.word	0x40023800
 8006b04:	00f42400 	.word	0x00f42400
 8006b08:	007a1200 	.word	0x007a1200

08006b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b10:	4b03      	ldr	r3, [pc, #12]	; (8006b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b12:	681b      	ldr	r3, [r3, #0]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20000000 	.word	0x20000000

08006b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b28:	f7ff fff0 	bl	8006b0c <HAL_RCC_GetHCLKFreq>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	0a9b      	lsrs	r3, r3, #10
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	4903      	ldr	r1, [pc, #12]	; (8006b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b3a:	5ccb      	ldrb	r3, [r1, r3]
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40023800 	.word	0x40023800
 8006b48:	08014330 	.word	0x08014330

08006b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b50:	f7ff ffdc 	bl	8006b0c <HAL_RCC_GetHCLKFreq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	0b5b      	lsrs	r3, r3, #13
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	4903      	ldr	r1, [pc, #12]	; (8006b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b62:	5ccb      	ldrb	r3, [r1, r3]
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	08014330 	.word	0x08014330

08006b74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	220f      	movs	r2, #15
 8006b82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b84:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f003 0203 	and.w	r2, r3, #3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b90:	4b0f      	ldr	r3, [pc, #60]	; (8006bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b9c:	4b0c      	ldr	r3, [pc, #48]	; (8006bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ba8:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	08db      	lsrs	r3, r3, #3
 8006bae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bb6:	4b07      	ldr	r3, [pc, #28]	; (8006bd4 <HAL_RCC_GetClockConfig+0x60>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 020f 	and.w	r2, r3, #15
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	601a      	str	r2, [r3, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40023800 	.word	0x40023800
 8006bd4:	40023c00 	.word	0x40023c00

08006bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d004      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c04:	d304      	bcc.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8006c06:	f240 316b 	movw	r1, #875	; 0x36b
 8006c0a:	4889      	ldr	r0, [pc, #548]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c0c:	f7fa fba5 	bl	800135a <assert_failed>

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d018      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d009      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c2c:	d004      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006c2e:	f240 3171 	movw	r1, #881	; 0x371
 8006c32:	487f      	ldr	r0, [pc, #508]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c34:	f7fa fb91 	bl	800135a <assert_failed>

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c38:	4b7e      	ldr	r3, [pc, #504]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c3e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c46:	497b      	ldr	r1, [pc, #492]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d018      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c6a:	d004      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006c6c:	f44f 715f 	mov.w	r1, #892	; 0x37c
 8006c70:	486f      	ldr	r0, [pc, #444]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c72:	f7fa fb72 	bl	800135a <assert_failed>

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006c76:	4b6f      	ldr	r3, [pc, #444]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c7c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	496b      	ldr	r1, [pc, #428]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10c      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xda>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xda>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 80cb 	beq.w	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2b31      	cmp	r3, #49	; 0x31
 8006cb8:	d904      	bls.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006cc2:	d904      	bls.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8006cc4:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8006cc8:	4859      	ldr	r0, [pc, #356]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cca:	f7fa fb46 	bl	800135a <assert_failed>

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006cce:	4b5a      	ldr	r3, [pc, #360]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cd4:	f7fb f8c8 	bl	8001e68 <HAL_GetTick>
 8006cd8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x116>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cdc:	f7fb f8c4 	bl	8001e68 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e376      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x804>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cee:	4b51      	ldr	r3, [pc, #324]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f0      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x104>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d016      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d903      	bls.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b07      	cmp	r3, #7
 8006d14:	d904      	bls.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006d16:	f240 31a2 	movw	r1, #930	; 0x3a2
 8006d1a:	4845      	ldr	r0, [pc, #276]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d1c:	f7fa fb1d 	bl	800135a <assert_failed>
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	019a      	lsls	r2, r3, #6
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	071b      	lsls	r3, r3, #28
 8006d2c:	4941      	ldr	r1, [pc, #260]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d039      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d903      	bls.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	2b0f      	cmp	r3, #15
 8006d4e:	d904      	bls.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006d50:	f240 31af 	movw	r1, #943	; 0x3af
 8006d54:	4836      	ldr	r0, [pc, #216]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d56:	f7fa fb00 	bl	800135a <assert_failed>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d904      	bls.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006d6a:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8006d6e:	4830      	ldr	r0, [pc, #192]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d70:	f7fa faf3 	bl	800135a <assert_failed>

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d74:	4b2f      	ldr	r3, [pc, #188]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d7a:	0f1b      	lsrs	r3, r3, #28
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	019a      	lsls	r2, r3, #6
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	061b      	lsls	r3, r3, #24
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	071b      	lsls	r3, r3, #28
 8006d94:	4927      	ldr	r1, [pc, #156]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006d9c:	4b25      	ldr	r3, [pc, #148]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006da2:	f023 021f 	bic.w	r2, r3, #31
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	4921      	ldr	r1, [pc, #132]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d027      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x238>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d903      	bls.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	2b0f      	cmp	r3, #15
 8006dce:	d904      	bls.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006dd0:	f240 31c1 	movw	r1, #961	; 0x3c1
 8006dd4:	4816      	ldr	r0, [pc, #88]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006dd6:	f7fa fac0 	bl	800135a <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d903      	bls.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x212>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	2b07      	cmp	r3, #7
 8006de8:	d904      	bls.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006dea:	f240 31c2 	movw	r1, #962	; 0x3c2
 8006dee:	4810      	ldr	r0, [pc, #64]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006df0:	f7fa fab3 	bl	800135a <assert_failed>

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	019a      	lsls	r2, r3, #6
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	061b      	lsls	r3, r3, #24
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	071b      	lsls	r3, r3, #28
 8006e08:	490a      	ldr	r1, [pc, #40]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e10:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e16:	f7fb f827 	bl	8001e68 <HAL_GetTick>
 8006e1a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e1c:	e00e      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x264>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e1e:	f7fb f823 	bl	8001e68 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d907      	bls.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x264>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e2d5      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x804>
 8006e30:	08014088 	.word	0x08014088
 8006e34:	40023800 	.word	0x40023800
 8006e38:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e3c:	4b9d      	ldr	r3, [pc, #628]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0ea      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x246>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d112      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10c      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 8130 	beq.w	80070ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e76:	f040 812a 	bne.w	80070ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b31      	cmp	r3, #49	; 0x31
 8006e80:	d904      	bls.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006e8a:	d904      	bls.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8006e8c:	f240 31e2 	movw	r1, #994	; 0x3e2
 8006e90:	4889      	ldr	r0, [pc, #548]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006e92:	f7fa fa62 	bl	800135a <assert_failed>

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006e96:	4b89      	ldr	r3, [pc, #548]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e9c:	f7fa ffe4 	bl	8001e68 <HAL_GetTick>
 8006ea0:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ea4:	f7fa ffe0 	bl	8001e68 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e292      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x804>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006eb6:	4b7f      	ldr	r3, [pc, #508]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ec2:	d0ef      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d048      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d903      	bls.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	2b0f      	cmp	r3, #15
 8006ede:	d904      	bls.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006ee0:	f240 31f7 	movw	r1, #1015	; 0x3f7
 8006ee4:	4874      	ldr	r0, [pc, #464]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006ee6:	f7fa fa38 	bl	800135a <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x322>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d904      	bls.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8006efa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8006efe:	486e      	ldr	r0, [pc, #440]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006f00:	f7fa fa2b 	bl	800135a <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006f04:	4b6b      	ldr	r3, [pc, #428]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8006f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f0a:	0c1b      	lsrs	r3, r3, #16
 8006f0c:	f003 0303 	and.w	r3, r3, #3
 8006f10:	3301      	adds	r3, #1
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f16:	4b67      	ldr	r3, [pc, #412]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1c:	0f1b      	lsrs	r3, r3, #28
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	019a      	lsls	r2, r3, #6
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	085b      	lsrs	r3, r3, #1
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	041b      	lsls	r3, r3, #16
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	061b      	lsls	r3, r3, #24
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	071b      	lsls	r3, r3, #28
 8006f40:	495c      	ldr	r1, [pc, #368]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f48:	4b5a      	ldr	r3, [pc, #360]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8006f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f4e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	3b01      	subs	r3, #1
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	4956      	ldr	r1, [pc, #344]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0308 	and.w	r3, r3, #8
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d051      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d903      	bls.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	2b07      	cmp	r3, #7
 8006f7c:	d904      	bls.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8006f7e:	f240 4109 	movw	r1, #1033	; 0x409
 8006f82:	484d      	ldr	r0, [pc, #308]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006f84:	f7fa f9e9 	bl	800135a <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d013      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f98:	d00e      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fa2:	d009      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fac:	d004      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006fae:	f240 410a 	movw	r1, #1034	; 0x40a
 8006fb2:	4841      	ldr	r0, [pc, #260]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8006fb4:	f7fa f9d1 	bl	800135a <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006fb8:	4b3e      	ldr	r3, [pc, #248]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8006fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbe:	0c1b      	lsrs	r3, r3, #16
 8006fc0:	f003 0303 	and.w	r3, r3, #3
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006fca:	4b3a      	ldr	r3, [pc, #232]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd0:	0e1b      	lsrs	r3, r3, #24
 8006fd2:	f003 030f 	and.w	r3, r3, #15
 8006fd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	019a      	lsls	r2, r3, #6
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	085b      	lsrs	r3, r3, #1
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	041b      	lsls	r3, r3, #16
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	061b      	lsls	r3, r3, #24
 8006fec:	431a      	orrs	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	071b      	lsls	r3, r3, #28
 8006ff4:	492f      	ldr	r1, [pc, #188]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ffc:	4b2d      	ldr	r3, [pc, #180]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8006ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007002:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700a:	492a      	ldr	r1, [pc, #168]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800700c:	4313      	orrs	r3, r2
 800700e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701a:	2b00      	cmp	r3, #0
 800701c:	d039      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8007022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007026:	d134      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	2b02      	cmp	r3, #2
 800702e:	d010      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	2b04      	cmp	r3, #4
 8007036:	d00c      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	2b06      	cmp	r3, #6
 800703e:	d008      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	2b08      	cmp	r3, #8
 8007046:	d004      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007048:	f240 411d 	movw	r1, #1053	; 0x41d
 800704c:	481a      	ldr	r0, [pc, #104]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800704e:	f7fa f984 	bl	800135a <assert_failed>

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007052:	4b18      	ldr	r3, [pc, #96]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8007054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007058:	0e1b      	lsrs	r3, r3, #24
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007060:	4b14      	ldr	r3, [pc, #80]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8007062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007066:	0f1b      	lsrs	r3, r3, #28
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	019a      	lsls	r2, r3, #6
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	085b      	lsrs	r3, r3, #1
 800707a:	3b01      	subs	r3, #1
 800707c:	041b      	lsls	r3, r3, #16
 800707e:	431a      	orrs	r2, r3
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	061b      	lsls	r3, r3, #24
 8007084:	431a      	orrs	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	071b      	lsls	r3, r3, #28
 800708a:	490a      	ldr	r1, [pc, #40]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800708c:	4313      	orrs	r3, r2
 800708e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007092:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007094:	2201      	movs	r2, #1
 8007096:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007098:	f7fa fee6 	bl	8001e68 <HAL_GetTick>
 800709c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800709e:	e00f      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80070a0:	f7fa fee2 	bl	8001e68 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d908      	bls.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e194      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x804>
 80070b2:	bf00      	nop
 80070b4:	40023800 	.word	0x40023800
 80070b8:	08014088 	.word	0x08014088
 80070bc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070c0:	4b89      	ldr	r3, [pc, #548]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x710>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070cc:	d1e8      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 8174 	beq.w	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e4:	f000 80a6 	beq.w	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f0:	f000 80a0 	beq.w	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	4a7c      	ldr	r2, [pc, #496]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x714>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	f000 809a 	beq.w	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	4a7a      	ldr	r2, [pc, #488]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x718>)
 8007106:	4293      	cmp	r3, r2
 8007108:	f000 8094 	beq.w	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	4a78      	ldr	r2, [pc, #480]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	f000 808e 	beq.w	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	4a76      	ldr	r2, [pc, #472]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800711e:	4293      	cmp	r3, r2
 8007120:	f000 8088 	beq.w	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	4a74      	ldr	r2, [pc, #464]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x724>)
 800712a:	4293      	cmp	r3, r2
 800712c:	f000 8082 	beq.w	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	4a72      	ldr	r2, [pc, #456]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x728>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d07c      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	4a71      	ldr	r2, [pc, #452]	; (8007304 <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d077      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	4a6f      	ldr	r2, [pc, #444]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d072      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007152:	4a6e      	ldr	r2, [pc, #440]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x734>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d06d      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	4a6c      	ldr	r2, [pc, #432]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d068      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	4a6b      	ldr	r2, [pc, #428]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d063      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	4a69      	ldr	r2, [pc, #420]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d05e      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	4a68      	ldr	r2, [pc, #416]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d059      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	4a66      	ldr	r2, [pc, #408]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d054      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	4a65      	ldr	r2, [pc, #404]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d04f      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	4a63      	ldr	r2, [pc, #396]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x750>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d04a      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	4a62      	ldr	r2, [pc, #392]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d045      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	4a60      	ldr	r2, [pc, #384]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x758>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d040      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	4a5f      	ldr	r2, [pc, #380]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d03b      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	4a5d      	ldr	r2, [pc, #372]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d036      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	4a5c      	ldr	r2, [pc, #368]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d031      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	4a5a      	ldr	r2, [pc, #360]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d02c      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071de:	4a59      	ldr	r2, [pc, #356]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d027      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	4a57      	ldr	r2, [pc, #348]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x770>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d022      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f2:	4a56      	ldr	r2, [pc, #344]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x774>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d01d      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	4a54      	ldr	r2, [pc, #336]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x778>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d018      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	4a53      	ldr	r2, [pc, #332]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x77c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d013      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	4a51      	ldr	r2, [pc, #324]	; (8007358 <HAL_RCCEx_PeriphCLKConfig+0x780>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00e      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	4a50      	ldr	r2, [pc, #320]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x784>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d009      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	4a4e      	ldr	r2, [pc, #312]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800722a:	f240 413e 	movw	r1, #1086	; 0x43e
 800722e:	484d      	ldr	r0, [pc, #308]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8007230:	f7fa f893 	bl	800135a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007234:	2300      	movs	r3, #0
 8007236:	60bb      	str	r3, [r7, #8]
 8007238:	4b2b      	ldr	r3, [pc, #172]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x710>)
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	4a2a      	ldr	r2, [pc, #168]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x710>)
 800723e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007242:	6413      	str	r3, [r2, #64]	; 0x40
 8007244:	4b28      	ldr	r3, [pc, #160]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x710>)
 8007246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007250:	4b45      	ldr	r3, [pc, #276]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x790>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a44      	ldr	r2, [pc, #272]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x790>)
 8007256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800725a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800725c:	f7fa fe04 	bl	8001e68 <HAL_GetTick>
 8007260:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x69e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007264:	f7fa fe00 	bl	8001e68 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      {
        return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e0b2      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x804>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007276:	4b3c      	ldr	r3, [pc, #240]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x790>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f0      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007282:	4b19      	ldr	r3, [pc, #100]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x710>)
 8007284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800728a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d074      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	429a      	cmp	r2, r3
 800729e:	d06d      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x7a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a0:	4b11      	ldr	r3, [pc, #68]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x710>)
 80072a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a8:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072aa:	4b30      	ldr	r3, [pc, #192]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80072ac:	2201      	movs	r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072b0:	4b2e      	ldr	r3, [pc, #184]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80072b6:	4a0c      	ldr	r2, [pc, #48]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x710>)
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x710>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d159      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80072c8:	f7fa fdce 	bl	8001e68 <HAL_GetTick>
 80072cc:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ce:	e04f      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072d0:	f7fa fdca 	bl	8001e68 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	f241 3288 	movw	r2, #5000	; 0x1388
 80072de:	4293      	cmp	r3, r2
 80072e0:	d946      	bls.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x798>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e07a      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x804>
 80072e6:	bf00      	nop
 80072e8:	40023800 	.word	0x40023800
 80072ec:	00020300 	.word	0x00020300
 80072f0:	00030300 	.word	0x00030300
 80072f4:	00040300 	.word	0x00040300
 80072f8:	00050300 	.word	0x00050300
 80072fc:	00060300 	.word	0x00060300
 8007300:	00070300 	.word	0x00070300
 8007304:	00080300 	.word	0x00080300
 8007308:	00090300 	.word	0x00090300
 800730c:	000a0300 	.word	0x000a0300
 8007310:	000b0300 	.word	0x000b0300
 8007314:	000c0300 	.word	0x000c0300
 8007318:	000d0300 	.word	0x000d0300
 800731c:	000e0300 	.word	0x000e0300
 8007320:	000f0300 	.word	0x000f0300
 8007324:	00100300 	.word	0x00100300
 8007328:	00110300 	.word	0x00110300
 800732c:	00120300 	.word	0x00120300
 8007330:	00130300 	.word	0x00130300
 8007334:	00140300 	.word	0x00140300
 8007338:	00150300 	.word	0x00150300
 800733c:	00160300 	.word	0x00160300
 8007340:	00170300 	.word	0x00170300
 8007344:	00180300 	.word	0x00180300
 8007348:	00190300 	.word	0x00190300
 800734c:	001a0300 	.word	0x001a0300
 8007350:	001b0300 	.word	0x001b0300
 8007354:	001c0300 	.word	0x001c0300
 8007358:	001d0300 	.word	0x001d0300
 800735c:	001e0300 	.word	0x001e0300
 8007360:	001f0300 	.word	0x001f0300
 8007364:	08014088 	.word	0x08014088
 8007368:	40007000 	.word	0x40007000
 800736c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007370:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>)
 8007372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0a9      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007384:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007388:	d10d      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800738a:	4b16      	ldr	r3, [pc, #88]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800739a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739e:	4911      	ldr	r1, [pc, #68]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	608b      	str	r3, [r1, #8]
 80073a4:	e005      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x7da>
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	4a0e      	ldr	r2, [pc, #56]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>)
 80073ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073b0:	6093      	str	r3, [r2, #8]
 80073b2:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>)
 80073b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073be:	4909      	ldr	r1, [pc, #36]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d004      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x802>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80073d6:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x810>)
 80073d8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3720      	adds	r7, #32
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	40023800 	.word	0x40023800
 80073e8:	424711e0 	.word	0x424711e0

080073ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e32f      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b0f      	cmp	r3, #15
 8007404:	d904      	bls.n	8007410 <HAL_RCC_OscConfig+0x24>
 8007406:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 800740a:	4898      	ldr	r0, [pc, #608]	; (800766c <HAL_RCC_OscConfig+0x280>)
 800740c:	f7f9 ffa5 	bl	800135a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8089 	beq.w	8007530 <HAL_RCC_OscConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00e      	beq.n	8007444 <HAL_RCC_OscConfig+0x58>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800742e:	d009      	beq.n	8007444 <HAL_RCC_OscConfig+0x58>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007438:	d004      	beq.n	8007444 <HAL_RCC_OscConfig+0x58>
 800743a:	f640 5115 	movw	r1, #3349	; 0xd15
 800743e:	488b      	ldr	r0, [pc, #556]	; (800766c <HAL_RCC_OscConfig+0x280>)
 8007440:	f7f9 ff8b 	bl	800135a <assert_failed>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007444:	4b8a      	ldr	r3, [pc, #552]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f003 030c 	and.w	r3, r3, #12
 800744c:	2b04      	cmp	r3, #4
 800744e:	d00c      	beq.n	800746a <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007450:	4b87      	ldr	r3, [pc, #540]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007458:	2b08      	cmp	r3, #8
 800745a:	d112      	bne.n	8007482 <HAL_RCC_OscConfig+0x96>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800745c:	4b84      	ldr	r3, [pc, #528]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007468:	d10b      	bne.n	8007482 <HAL_RCC_OscConfig+0x96>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800746a:	4b81      	ldr	r3, [pc, #516]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d05b      	beq.n	800752e <HAL_RCC_OscConfig+0x142>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d157      	bne.n	800752e <HAL_RCC_OscConfig+0x142>
      {
        return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e2ed      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800748a:	d106      	bne.n	800749a <HAL_RCC_OscConfig+0xae>
 800748c:	4b78      	ldr	r3, [pc, #480]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a77      	ldr	r2, [pc, #476]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 8007492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	e01d      	b.n	80074d6 <HAL_RCC_OscConfig+0xea>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074a2:	d10c      	bne.n	80074be <HAL_RCC_OscConfig+0xd2>
 80074a4:	4b72      	ldr	r3, [pc, #456]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a71      	ldr	r2, [pc, #452]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80074aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	4b6f      	ldr	r3, [pc, #444]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a6e      	ldr	r2, [pc, #440]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80074b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	e00b      	b.n	80074d6 <HAL_RCC_OscConfig+0xea>
 80074be:	4b6c      	ldr	r3, [pc, #432]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a6b      	ldr	r2, [pc, #428]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80074c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	4b69      	ldr	r3, [pc, #420]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a68      	ldr	r2, [pc, #416]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80074d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d013      	beq.n	8007506 <HAL_RCC_OscConfig+0x11a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074de:	f7fa fcc3 	bl	8001e68 <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074e4:	e008      	b.n	80074f8 <HAL_RCC_OscConfig+0x10c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074e6:	f7fa fcbf 	bl	8001e68 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b64      	cmp	r3, #100	; 0x64
 80074f2:	d901      	bls.n	80074f8 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e2b2      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074f8:	4b5d      	ldr	r3, [pc, #372]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0f0      	beq.n	80074e6 <HAL_RCC_OscConfig+0xfa>
 8007504:	e014      	b.n	8007530 <HAL_RCC_OscConfig+0x144>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007506:	f7fa fcaf 	bl	8001e68 <HAL_GetTick>
 800750a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800750c:	e008      	b.n	8007520 <HAL_RCC_OscConfig+0x134>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800750e:	f7fa fcab 	bl	8001e68 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b64      	cmp	r3, #100	; 0x64
 800751a:	d901      	bls.n	8007520 <HAL_RCC_OscConfig+0x134>
          {
            return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e29e      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007520:	4b53      	ldr	r3, [pc, #332]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f0      	bne.n	800750e <HAL_RCC_OscConfig+0x122>
 800752c:	e000      	b.n	8007530 <HAL_RCC_OscConfig+0x144>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800752e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d079      	beq.n	8007630 <HAL_RCC_OscConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d008      	beq.n	8007556 <HAL_RCC_OscConfig+0x16a>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d004      	beq.n	8007556 <HAL_RCC_OscConfig+0x16a>
 800754c:	f640 514d 	movw	r1, #3405	; 0xd4d
 8007550:	4846      	ldr	r0, [pc, #280]	; (800766c <HAL_RCC_OscConfig+0x280>)
 8007552:	f7f9 ff02 	bl	800135a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b1f      	cmp	r3, #31
 800755c:	d904      	bls.n	8007568 <HAL_RCC_OscConfig+0x17c>
 800755e:	f640 514e 	movw	r1, #3406	; 0xd4e
 8007562:	4842      	ldr	r0, [pc, #264]	; (800766c <HAL_RCC_OscConfig+0x280>)
 8007564:	f7f9 fef9 	bl	800135a <assert_failed>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007568:	4b41      	ldr	r3, [pc, #260]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f003 030c 	and.w	r3, r3, #12
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <HAL_RCC_OscConfig+0x1a0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007574:	4b3e      	ldr	r3, [pc, #248]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800757c:	2b08      	cmp	r3, #8
 800757e:	d11c      	bne.n	80075ba <HAL_RCC_OscConfig+0x1ce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007580:	4b3b      	ldr	r3, [pc, #236]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d116      	bne.n	80075ba <HAL_RCC_OscConfig+0x1ce>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800758c:	4b38      	ldr	r3, [pc, #224]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <HAL_RCC_OscConfig+0x1b8>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d001      	beq.n	80075a4 <HAL_RCC_OscConfig+0x1b8>
      {
        return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e25c      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075a4:	4b32      	ldr	r3, [pc, #200]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	492f      	ldr	r1, [pc, #188]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075b8:	e03a      	b.n	8007630 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d020      	beq.n	8007604 <HAL_RCC_OscConfig+0x218>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075c2:	4b2c      	ldr	r3, [pc, #176]	; (8007674 <HAL_RCC_OscConfig+0x288>)
 80075c4:	2201      	movs	r2, #1
 80075c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c8:	f7fa fc4e 	bl	8001e68 <HAL_GetTick>
 80075cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075ce:	e008      	b.n	80075e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075d0:	f7fa fc4a 	bl	8001e68 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e23d      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075e2:	4b23      	ldr	r3, [pc, #140]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d0f0      	beq.n	80075d0 <HAL_RCC_OscConfig+0x1e4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ee:	4b20      	ldr	r3, [pc, #128]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	491c      	ldr	r1, [pc, #112]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	600b      	str	r3, [r1, #0]
 8007602:	e015      	b.n	8007630 <HAL_RCC_OscConfig+0x244>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007604:	4b1b      	ldr	r3, [pc, #108]	; (8007674 <HAL_RCC_OscConfig+0x288>)
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760a:	f7fa fc2d 	bl	8001e68 <HAL_GetTick>
 800760e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007610:	e008      	b.n	8007624 <HAL_RCC_OscConfig+0x238>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007612:	f7fa fc29 	bl	8001e68 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x238>
          {
            return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e21c      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007624:	4b12      	ldr	r3, [pc, #72]	; (8007670 <HAL_RCC_OscConfig+0x284>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f0      	bne.n	8007612 <HAL_RCC_OscConfig+0x226>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b00      	cmp	r3, #0
 800763a:	d045      	beq.n	80076c8 <HAL_RCC_OscConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d008      	beq.n	8007656 <HAL_RCC_OscConfig+0x26a>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d004      	beq.n	8007656 <HAL_RCC_OscConfig+0x26a>
 800764c:	f640 5194 	movw	r1, #3476	; 0xd94
 8007650:	4806      	ldr	r0, [pc, #24]	; (800766c <HAL_RCC_OscConfig+0x280>)
 8007652:	f7f9 fe82 	bl	800135a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01e      	beq.n	800769c <HAL_RCC_OscConfig+0x2b0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800765e:	4b06      	ldr	r3, [pc, #24]	; (8007678 <HAL_RCC_OscConfig+0x28c>)
 8007660:	2201      	movs	r2, #1
 8007662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007664:	f7fa fc00 	bl	8001e68 <HAL_GetTick>
 8007668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800766a:	e010      	b.n	800768e <HAL_RCC_OscConfig+0x2a2>
 800766c:	08014088 	.word	0x08014088
 8007670:	40023800 	.word	0x40023800
 8007674:	42470000 	.word	0x42470000
 8007678:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800767c:	f7fa fbf4 	bl	8001e68 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	2b02      	cmp	r3, #2
 8007688:	d901      	bls.n	800768e <HAL_RCC_OscConfig+0x2a2>
        {
          return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e1e7      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800768e:	4b5e      	ldr	r3, [pc, #376]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 8007690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0f0      	beq.n	800767c <HAL_RCC_OscConfig+0x290>
 800769a:	e015      	b.n	80076c8 <HAL_RCC_OscConfig+0x2dc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800769c:	4b5b      	ldr	r3, [pc, #364]	; (800780c <HAL_RCC_OscConfig+0x420>)
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a2:	f7fa fbe1 	bl	8001e68 <HAL_GetTick>
 80076a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076a8:	e008      	b.n	80076bc <HAL_RCC_OscConfig+0x2d0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076aa:	f7fa fbdd 	bl	8001e68 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <HAL_RCC_OscConfig+0x2d0>
        {
          return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e1d0      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076bc:	4b52      	ldr	r3, [pc, #328]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 80076be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1f0      	bne.n	80076aa <HAL_RCC_OscConfig+0x2be>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 80b0 	beq.w	8007836 <HAL_RCC_OscConfig+0x44a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076d6:	2300      	movs	r3, #0
 80076d8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00c      	beq.n	80076fc <HAL_RCC_OscConfig+0x310>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d008      	beq.n	80076fc <HAL_RCC_OscConfig+0x310>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b05      	cmp	r3, #5
 80076f0:	d004      	beq.n	80076fc <HAL_RCC_OscConfig+0x310>
 80076f2:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 80076f6:	4846      	ldr	r0, [pc, #280]	; (8007810 <HAL_RCC_OscConfig+0x424>)
 80076f8:	f7f9 fe2f 	bl	800135a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076fc:	4b42      	ldr	r3, [pc, #264]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 80076fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10f      	bne.n	8007728 <HAL_RCC_OscConfig+0x33c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007708:	2300      	movs	r3, #0
 800770a:	60bb      	str	r3, [r7, #8]
 800770c:	4b3e      	ldr	r3, [pc, #248]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 800770e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007710:	4a3d      	ldr	r2, [pc, #244]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 8007712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007716:	6413      	str	r3, [r2, #64]	; 0x40
 8007718:	4b3b      	ldr	r3, [pc, #236]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 800771a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007720:	60bb      	str	r3, [r7, #8]
 8007722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007724:	2301      	movs	r3, #1
 8007726:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007728:	4b3a      	ldr	r3, [pc, #232]	; (8007814 <HAL_RCC_OscConfig+0x428>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007730:	2b00      	cmp	r3, #0
 8007732:	d118      	bne.n	8007766 <HAL_RCC_OscConfig+0x37a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007734:	4b37      	ldr	r3, [pc, #220]	; (8007814 <HAL_RCC_OscConfig+0x428>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a36      	ldr	r2, [pc, #216]	; (8007814 <HAL_RCC_OscConfig+0x428>)
 800773a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800773e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007740:	f7fa fb92 	bl	8001e68 <HAL_GetTick>
 8007744:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007746:	e008      	b.n	800775a <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007748:	f7fa fb8e 	bl	8001e68 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0x36e>
        {
          return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e181      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800775a:	4b2e      	ldr	r3, [pc, #184]	; (8007814 <HAL_RCC_OscConfig+0x428>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0f0      	beq.n	8007748 <HAL_RCC_OscConfig+0x35c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d106      	bne.n	800777c <HAL_RCC_OscConfig+0x390>
 800776e:	4b26      	ldr	r3, [pc, #152]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 8007770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007772:	4a25      	ldr	r2, [pc, #148]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 8007774:	f043 0301 	orr.w	r3, r3, #1
 8007778:	6713      	str	r3, [r2, #112]	; 0x70
 800777a:	e01c      	b.n	80077b6 <HAL_RCC_OscConfig+0x3ca>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	2b05      	cmp	r3, #5
 8007782:	d10c      	bne.n	800779e <HAL_RCC_OscConfig+0x3b2>
 8007784:	4b20      	ldr	r3, [pc, #128]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 8007786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007788:	4a1f      	ldr	r2, [pc, #124]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 800778a:	f043 0304 	orr.w	r3, r3, #4
 800778e:	6713      	str	r3, [r2, #112]	; 0x70
 8007790:	4b1d      	ldr	r3, [pc, #116]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 8007792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007794:	4a1c      	ldr	r2, [pc, #112]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 8007796:	f043 0301 	orr.w	r3, r3, #1
 800779a:	6713      	str	r3, [r2, #112]	; 0x70
 800779c:	e00b      	b.n	80077b6 <HAL_RCC_OscConfig+0x3ca>
 800779e:	4b1a      	ldr	r3, [pc, #104]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 80077a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a2:	4a19      	ldr	r2, [pc, #100]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	6713      	str	r3, [r2, #112]	; 0x70
 80077aa:	4b17      	ldr	r3, [pc, #92]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 80077ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ae:	4a16      	ldr	r2, [pc, #88]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 80077b0:	f023 0304 	bic.w	r3, r3, #4
 80077b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d015      	beq.n	80077ea <HAL_RCC_OscConfig+0x3fe>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077be:	f7fa fb53 	bl	8001e68 <HAL_GetTick>
 80077c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077c4:	e00a      	b.n	80077dc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077c6:	f7fa fb4f 	bl	8001e68 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e140      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077dc:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <HAL_RCC_OscConfig+0x41c>)
 80077de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0ee      	beq.n	80077c6 <HAL_RCC_OscConfig+0x3da>
 80077e8:	e01c      	b.n	8007824 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ea:	f7fa fb3d 	bl	8001e68 <HAL_GetTick>
 80077ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077f0:	e012      	b.n	8007818 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077f2:	f7fa fb39 	bl	8001e68 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007800:	4293      	cmp	r3, r2
 8007802:	d909      	bls.n	8007818 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e12a      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
 8007808:	40023800 	.word	0x40023800
 800780c:	42470e80 	.word	0x42470e80
 8007810:	08014088 	.word	0x08014088
 8007814:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007818:	4b93      	ldr	r3, [pc, #588]	; (8007a68 <HAL_RCC_OscConfig+0x67c>)
 800781a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e6      	bne.n	80077f2 <HAL_RCC_OscConfig+0x406>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d105      	bne.n	8007836 <HAL_RCC_OscConfig+0x44a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800782a:	4b8f      	ldr	r3, [pc, #572]	; (8007a68 <HAL_RCC_OscConfig+0x67c>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	4a8e      	ldr	r2, [pc, #568]	; (8007a68 <HAL_RCC_OscConfig+0x67c>)
 8007830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007834:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00c      	beq.n	8007858 <HAL_RCC_OscConfig+0x46c>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d008      	beq.n	8007858 <HAL_RCC_OscConfig+0x46c>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d004      	beq.n	8007858 <HAL_RCC_OscConfig+0x46c>
 800784e:	f640 6103 	movw	r1, #3587	; 0xe03
 8007852:	4886      	ldr	r0, [pc, #536]	; (8007a6c <HAL_RCC_OscConfig+0x680>)
 8007854:	f7f9 fd81 	bl	800135a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 80fd 	beq.w	8007a5c <HAL_RCC_OscConfig+0x670>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007862:	4b81      	ldr	r3, [pc, #516]	; (8007a68 <HAL_RCC_OscConfig+0x67c>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 030c 	and.w	r3, r3, #12
 800786a:	2b08      	cmp	r3, #8
 800786c:	f000 80b6 	beq.w	80079dc <HAL_RCC_OscConfig+0x5f0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	2b02      	cmp	r3, #2
 8007876:	f040 809a 	bne.w	80079ae <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <HAL_RCC_OscConfig+0x4aa>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800788a:	d004      	beq.n	8007896 <HAL_RCC_OscConfig+0x4aa>
 800788c:	f640 610c 	movw	r1, #3596	; 0xe0c
 8007890:	4876      	ldr	r0, [pc, #472]	; (8007a6c <HAL_RCC_OscConfig+0x680>)
 8007892:	f7f9 fd62 	bl	800135a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	2b3f      	cmp	r3, #63	; 0x3f
 800789c:	d904      	bls.n	80078a8 <HAL_RCC_OscConfig+0x4bc>
 800789e:	f640 610d 	movw	r1, #3597	; 0xe0d
 80078a2:	4872      	ldr	r0, [pc, #456]	; (8007a6c <HAL_RCC_OscConfig+0x680>)
 80078a4:	f7f9 fd59 	bl	800135a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	2b31      	cmp	r3, #49	; 0x31
 80078ae:	d904      	bls.n	80078ba <HAL_RCC_OscConfig+0x4ce>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80078b8:	d904      	bls.n	80078c4 <HAL_RCC_OscConfig+0x4d8>
 80078ba:	f640 610e 	movw	r1, #3598	; 0xe0e
 80078be:	486b      	ldr	r0, [pc, #428]	; (8007a6c <HAL_RCC_OscConfig+0x680>)
 80078c0:	f7f9 fd4b 	bl	800135a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d010      	beq.n	80078ee <HAL_RCC_OscConfig+0x502>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	d00c      	beq.n	80078ee <HAL_RCC_OscConfig+0x502>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d8:	2b06      	cmp	r3, #6
 80078da:	d008      	beq.n	80078ee <HAL_RCC_OscConfig+0x502>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d004      	beq.n	80078ee <HAL_RCC_OscConfig+0x502>
 80078e4:	f640 610f 	movw	r1, #3599	; 0xe0f
 80078e8:	4860      	ldr	r0, [pc, #384]	; (8007a6c <HAL_RCC_OscConfig+0x680>)
 80078ea:	f7f9 fd36 	bl	800135a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d903      	bls.n	80078fe <HAL_RCC_OscConfig+0x512>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	2b0f      	cmp	r3, #15
 80078fc:	d904      	bls.n	8007908 <HAL_RCC_OscConfig+0x51c>
 80078fe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007902:	485a      	ldr	r0, [pc, #360]	; (8007a6c <HAL_RCC_OscConfig+0x680>)
 8007904:	f7f9 fd29 	bl	800135a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	2b01      	cmp	r3, #1
 800790e:	d903      	bls.n	8007918 <HAL_RCC_OscConfig+0x52c>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007914:	2b07      	cmp	r3, #7
 8007916:	d904      	bls.n	8007922 <HAL_RCC_OscConfig+0x536>
 8007918:	f640 6111 	movw	r1, #3601	; 0xe11
 800791c:	4853      	ldr	r0, [pc, #332]	; (8007a6c <HAL_RCC_OscConfig+0x680>)
 800791e:	f7f9 fd1c 	bl	800135a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007922:	4b53      	ldr	r3, [pc, #332]	; (8007a70 <HAL_RCC_OscConfig+0x684>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007928:	f7fa fa9e 	bl	8001e68 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x556>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007930:	f7fa fa9a 	bl	8001e68 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e08d      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007942:	4b49      	ldr	r3, [pc, #292]	; (8007a68 <HAL_RCC_OscConfig+0x67c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1f0      	bne.n	8007930 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	69da      	ldr	r2, [r3, #28]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	019b      	lsls	r3, r3, #6
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	085b      	lsrs	r3, r3, #1
 8007966:	3b01      	subs	r3, #1
 8007968:	041b      	lsls	r3, r3, #16
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	061b      	lsls	r3, r3, #24
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	071b      	lsls	r3, r3, #28
 800797a:	493b      	ldr	r1, [pc, #236]	; (8007a68 <HAL_RCC_OscConfig+0x67c>)
 800797c:	4313      	orrs	r3, r2
 800797e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007980:	4b3b      	ldr	r3, [pc, #236]	; (8007a70 <HAL_RCC_OscConfig+0x684>)
 8007982:	2201      	movs	r2, #1
 8007984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007986:	f7fa fa6f 	bl	8001e68 <HAL_GetTick>
 800798a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800798c:	e008      	b.n	80079a0 <HAL_RCC_OscConfig+0x5b4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800798e:	f7fa fa6b 	bl	8001e68 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	2b02      	cmp	r3, #2
 800799a:	d901      	bls.n	80079a0 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e05e      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079a0:	4b31      	ldr	r3, [pc, #196]	; (8007a68 <HAL_RCC_OscConfig+0x67c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0f0      	beq.n	800798e <HAL_RCC_OscConfig+0x5a2>
 80079ac:	e056      	b.n	8007a5c <HAL_RCC_OscConfig+0x670>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ae:	4b30      	ldr	r3, [pc, #192]	; (8007a70 <HAL_RCC_OscConfig+0x684>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b4:	f7fa fa58 	bl	8001e68 <HAL_GetTick>
 80079b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ba:	e008      	b.n	80079ce <HAL_RCC_OscConfig+0x5e2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079bc:	f7fa fa54 	bl	8001e68 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0x5e2>
          {
            return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e047      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ce:	4b26      	ldr	r3, [pc, #152]	; (8007a68 <HAL_RCC_OscConfig+0x67c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1f0      	bne.n	80079bc <HAL_RCC_OscConfig+0x5d0>
 80079da:	e03f      	b.n	8007a5c <HAL_RCC_OscConfig+0x670>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_RCC_OscConfig+0x5fc>
      {
        return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e03a      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079e8:	4b1f      	ldr	r3, [pc, #124]	; (8007a68 <HAL_RCC_OscConfig+0x67c>)
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d030      	beq.n	8007a58 <HAL_RCC_OscConfig+0x66c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d129      	bne.n	8007a58 <HAL_RCC_OscConfig+0x66c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d122      	bne.n	8007a58 <HAL_RCC_OscConfig+0x66c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a18:	4013      	ands	r3, r2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d119      	bne.n	8007a58 <HAL_RCC_OscConfig+0x66c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	085b      	lsrs	r3, r3, #1
 8007a30:	3b01      	subs	r3, #1
 8007a32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d10f      	bne.n	8007a58 <HAL_RCC_OscConfig+0x66c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d107      	bne.n	8007a58 <HAL_RCC_OscConfig+0x66c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d001      	beq.n	8007a5c <HAL_RCC_OscConfig+0x670>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e000      	b.n	8007a5e <HAL_RCC_OscConfig+0x672>
        }
      }
    }
  }
  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	40023800 	.word	0x40023800
 8007a6c:	08014088 	.word	0x08014088
 8007a70:	42470060 	.word	0x42470060

08007a74 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e0c4      	b.n	8007c14 <HAL_RTC_Init+0x1a0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a63      	ldr	r2, [pc, #396]	; (8007c1c <HAL_RTC_Init+0x1a8>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d004      	beq.n	8007a9e <HAL_RTC_Init+0x2a>
 8007a94:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007a98:	4861      	ldr	r0, [pc, #388]	; (8007c20 <HAL_RTC_Init+0x1ac>)
 8007a9a:	f7f9 fc5e 	bl	800135a <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b40      	cmp	r3, #64	; 0x40
 8007aa4:	d008      	beq.n	8007ab8 <HAL_RTC_Init+0x44>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d004      	beq.n	8007ab8 <HAL_RTC_Init+0x44>
 8007aae:	f240 1105 	movw	r1, #261	; 0x105
 8007ab2:	485b      	ldr	r0, [pc, #364]	; (8007c20 <HAL_RTC_Init+0x1ac>)
 8007ab4:	f7f9 fc51 	bl	800135a <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	2b7f      	cmp	r3, #127	; 0x7f
 8007abe:	d904      	bls.n	8007aca <HAL_RTC_Init+0x56>
 8007ac0:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007ac4:	4856      	ldr	r0, [pc, #344]	; (8007c20 <HAL_RTC_Init+0x1ac>)
 8007ac6:	f7f9 fc48 	bl	800135a <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad2:	d304      	bcc.n	8007ade <HAL_RTC_Init+0x6a>
 8007ad4:	f240 1107 	movw	r1, #263	; 0x107
 8007ad8:	4851      	ldr	r0, [pc, #324]	; (8007c20 <HAL_RTC_Init+0x1ac>)
 8007ada:	f7f9 fc3e 	bl	800135a <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d013      	beq.n	8007b0e <HAL_RTC_Init+0x9a>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aee:	d00e      	beq.n	8007b0e <HAL_RTC_Init+0x9a>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007af8:	d009      	beq.n	8007b0e <HAL_RTC_Init+0x9a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b02:	d004      	beq.n	8007b0e <HAL_RTC_Init+0x9a>
 8007b04:	f44f 7184 	mov.w	r1, #264	; 0x108
 8007b08:	4845      	ldr	r0, [pc, #276]	; (8007c20 <HAL_RTC_Init+0x1ac>)
 8007b0a:	f7f9 fc26 	bl	800135a <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d009      	beq.n	8007b2a <HAL_RTC_Init+0xb6>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b1e:	d004      	beq.n	8007b2a <HAL_RTC_Init+0xb6>
 8007b20:	f240 1109 	movw	r1, #265	; 0x109
 8007b24:	483e      	ldr	r0, [pc, #248]	; (8007c20 <HAL_RTC_Init+0x1ac>)
 8007b26:	f7f9 fc18 	bl	800135a <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <HAL_RTC_Init+0xd2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b3a:	d004      	beq.n	8007b46 <HAL_RTC_Init+0xd2>
 8007b3c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8007b40:	4837      	ldr	r0, [pc, #220]	; (8007c20 <HAL_RTC_Init+0x1ac>)
 8007b42:	f7f9 fc0a 	bl	800135a <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	7f5b      	ldrb	r3, [r3, #29]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d105      	bne.n	8007b5c <HAL_RTC_Init+0xe8>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7f9 fcd6 	bl	8001508 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	22ca      	movs	r2, #202	; 0xca
 8007b68:	625a      	str	r2, [r3, #36]	; 0x24
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2253      	movs	r2, #83	; 0x53
 8007b70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f87e 	bl	8007c74 <RTC_EnterInitMode>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d12c      	bne.n	8007bdc <HAL_RTC_Init+0x168>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6812      	ldr	r2, [r2, #0]
 8007b8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b94:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6899      	ldr	r1, [r3, #8]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	68d2      	ldr	r2, [r2, #12]
 8007bbc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6919      	ldr	r1, [r3, #16]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	041a      	lsls	r2, r3, #16
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f885 	bl	8007ce2 <RTC_ExitInitMode>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d113      	bne.n	8007c0a <HAL_RTC_Init+0x196>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bf0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	699a      	ldr	r2, [r3, #24]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	22ff      	movs	r2, #255	; 0xff
 8007c10:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	40002800 	.word	0x40002800
 8007c20:	080140c4 	.word	0x080140c4

08007c24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c3e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c40:	f7fa f912 	bl	8001e68 <HAL_GetTick>
 8007c44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c46:	e009      	b.n	8007c5c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c48:	f7fa f90e 	bl	8001e68 <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c56:	d901      	bls.n	8007c5c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e007      	b.n	8007c6c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d0ee      	beq.n	8007c48 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d122      	bne.n	8007cd8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ca0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ca2:	f7fa f8e1 	bl	8001e68 <HAL_GetTick>
 8007ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007ca8:	e00c      	b.n	8007cc4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007caa:	f7fa f8dd 	bl	8001e68 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cb8:	d904      	bls.n	8007cc4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <RTC_EnterInitMode+0x64>
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d1e8      	bne.n	8007caa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cfc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 0320 	and.w	r3, r3, #32
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10a      	bne.n	8007d22 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff ff89 	bl	8007c24 <HAL_RTC_WaitForSynchro>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d004      	beq.n	8007d22 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2204      	movs	r2, #4
 8007d1c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e2d4      	b.n	80082f8 <HAL_SAI_Init+0x5cc>
  }

  /* check the instance */
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a87      	ldr	r2, [pc, #540]	; (8007f70 <HAL_SAI_Init+0x244>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d009      	beq.n	8007d6c <HAL_SAI_Init+0x40>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a85      	ldr	r2, [pc, #532]	; (8007f74 <HAL_SAI_Init+0x248>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d004      	beq.n	8007d6c <HAL_SAI_Init+0x40>
 8007d62:	f240 1187 	movw	r1, #391	; 0x187
 8007d66:	4884      	ldr	r0, [pc, #528]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007d68:	f7f9 faf7 	bl	800135a <assert_failed>

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	4a82      	ldr	r2, [pc, #520]	; (8007f7c <HAL_SAI_Init+0x250>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d034      	beq.n	8007de0 <HAL_SAI_Init+0xb4>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	4a81      	ldr	r2, [pc, #516]	; (8007f80 <HAL_SAI_Init+0x254>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d02f      	beq.n	8007de0 <HAL_SAI_Init+0xb4>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d029      	beq.n	8007de0 <HAL_SAI_Init+0xb4>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	f64a 4244 	movw	r2, #44100	; 0xac44
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d023      	beq.n	8007de0 <HAL_SAI_Init+0xb4>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8007da0:	d01e      	beq.n	8007de0 <HAL_SAI_Init+0xb4>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	f245 6222 	movw	r2, #22050	; 0x5622
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d018      	beq.n	8007de0 <HAL_SAI_Init+0xb4>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8007db6:	d013      	beq.n	8007de0 <HAL_SAI_Init+0xb4>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	f642 3211 	movw	r2, #11025	; 0x2b11
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d00d      	beq.n	8007de0 <HAL_SAI_Init+0xb4>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8007dcc:	d008      	beq.n	8007de0 <HAL_SAI_Init+0xb4>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d004      	beq.n	8007de0 <HAL_SAI_Init+0xb4>
 8007dd6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8007dda:	4867      	ldr	r0, [pc, #412]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007ddc:	f7f9 fabd 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00c      	beq.n	8007e02 <HAL_SAI_Init+0xd6>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d008      	beq.n	8007e02 <HAL_SAI_Init+0xd6>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d004      	beq.n	8007e02 <HAL_SAI_Init+0xd6>
 8007df8:	f240 118b 	movw	r1, #395	; 0x18b
 8007dfc:	485e      	ldr	r0, [pc, #376]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007dfe:	f7f9 faac 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d010      	beq.n	8007e2c <HAL_SAI_Init+0x100>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d00c      	beq.n	8007e2c <HAL_SAI_Init+0x100>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d008      	beq.n	8007e2c <HAL_SAI_Init+0x100>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d004      	beq.n	8007e2c <HAL_SAI_Init+0x100>
 8007e22:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8007e26:	4854      	ldr	r0, [pc, #336]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007e28:	f7f9 fa97 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00c      	beq.n	8007e4e <HAL_SAI_Init+0x122>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d008      	beq.n	8007e4e <HAL_SAI_Init+0x122>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d004      	beq.n	8007e4e <HAL_SAI_Init+0x122>
 8007e44:	f240 118d 	movw	r1, #397	; 0x18d
 8007e48:	484b      	ldr	r0, [pc, #300]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007e4a:	f7f9 fa86 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e52:	2b40      	cmp	r3, #64	; 0x40
 8007e54:	d018      	beq.n	8007e88 <HAL_SAI_Init+0x15c>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5a:	2b60      	cmp	r3, #96	; 0x60
 8007e5c:	d014      	beq.n	8007e88 <HAL_SAI_Init+0x15c>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e62:	2b80      	cmp	r3, #128	; 0x80
 8007e64:	d010      	beq.n	8007e88 <HAL_SAI_Init+0x15c>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6a:	2ba0      	cmp	r3, #160	; 0xa0
 8007e6c:	d00c      	beq.n	8007e88 <HAL_SAI_Init+0x15c>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e72:	2bc0      	cmp	r3, #192	; 0xc0
 8007e74:	d008      	beq.n	8007e88 <HAL_SAI_Init+0x15c>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	2be0      	cmp	r3, #224	; 0xe0
 8007e7c:	d004      	beq.n	8007e88 <HAL_SAI_Init+0x15c>
 8007e7e:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8007e82:	483d      	ldr	r0, [pc, #244]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007e84:	f7f9 fa69 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d009      	beq.n	8007ea4 <HAL_SAI_Init+0x178>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e98:	d004      	beq.n	8007ea4 <HAL_SAI_Init+0x178>
 8007e9a:	f240 118f 	movw	r1, #399	; 0x18f
 8007e9e:	4836      	ldr	r0, [pc, #216]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007ea0:	f7f9 fa5b 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d008      	beq.n	8007ebe <HAL_SAI_Init+0x192>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d004      	beq.n	8007ebe <HAL_SAI_Init+0x192>
 8007eb4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007eb8:	482f      	ldr	r0, [pc, #188]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007eba:	f7f9 fa4e 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d010      	beq.n	8007ee8 <HAL_SAI_Init+0x1bc>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d00c      	beq.n	8007ee8 <HAL_SAI_Init+0x1bc>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d008      	beq.n	8007ee8 <HAL_SAI_Init+0x1bc>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d004      	beq.n	8007ee8 <HAL_SAI_Init+0x1bc>
 8007ede:	f240 1191 	movw	r1, #401	; 0x191
 8007ee2:	4825      	ldr	r0, [pc, #148]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007ee4:	f7f9 fa39 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d009      	beq.n	8007f04 <HAL_SAI_Init+0x1d8>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ef8:	d004      	beq.n	8007f04 <HAL_SAI_Init+0x1d8>
 8007efa:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8007efe:	481e      	ldr	r0, [pc, #120]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007f00:	f7f9 fa2b 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d009      	beq.n	8007f20 <HAL_SAI_Init+0x1f4>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f14:	d004      	beq.n	8007f20 <HAL_SAI_Init+0x1f4>
 8007f16:	f240 1193 	movw	r1, #403	; 0x193
 8007f1a:	4817      	ldr	r0, [pc, #92]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007f1c:	f7f9 fa1d 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d014      	beq.n	8007f52 <HAL_SAI_Init+0x226>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d010      	beq.n	8007f52 <HAL_SAI_Init+0x226>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d00c      	beq.n	8007f52 <HAL_SAI_Init+0x226>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d008      	beq.n	8007f52 <HAL_SAI_Init+0x226>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d004      	beq.n	8007f52 <HAL_SAI_Init+0x226>
 8007f48:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8007f4c:	480a      	ldr	r0, [pc, #40]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007f4e:	f7f9 fa04 	bl	800135a <assert_failed>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5a:	d013      	beq.n	8007f84 <HAL_SAI_Init+0x258>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00f      	beq.n	8007f84 <HAL_SAI_Init+0x258>
 8007f64:	f240 1195 	movw	r1, #405	; 0x195
 8007f68:	4803      	ldr	r0, [pc, #12]	; (8007f78 <HAL_SAI_Init+0x24c>)
 8007f6a:	f7f9 f9f6 	bl	800135a <assert_failed>
 8007f6e:	e009      	b.n	8007f84 <HAL_SAI_Init+0x258>
 8007f70:	40015804 	.word	0x40015804
 8007f74:	40015824 	.word	0x40015824
 8007f78:	080140fc 	.word	0x080140fc
 8007f7c:	0002ee00 	.word	0x0002ee00
 8007f80:	00017700 	.word	0x00017700
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d018      	beq.n	8007fbe <HAL_SAI_Init+0x292>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f94:	d013      	beq.n	8007fbe <HAL_SAI_Init+0x292>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f9e:	d00e      	beq.n	8007fbe <HAL_SAI_Init+0x292>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007fa8:	d009      	beq.n	8007fbe <HAL_SAI_Init+0x292>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8007fb2:	d004      	beq.n	8007fbe <HAL_SAI_Init+0x292>
 8007fb4:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8007fb8:	4885      	ldr	r0, [pc, #532]	; (80081d0 <HAL_SAI_Init+0x4a4>)
 8007fba:	f7f9 f9ce 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d008      	beq.n	8007fd8 <HAL_SAI_Init+0x2ac>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fca:	2b10      	cmp	r3, #16
 8007fcc:	d004      	beq.n	8007fd8 <HAL_SAI_Init+0x2ac>
 8007fce:	f240 1197 	movw	r1, #407	; 0x197
 8007fd2:	487f      	ldr	r0, [pc, #508]	; (80081d0 <HAL_SAI_Init+0x4a4>)
 8007fd4:	f7f9 f9c1 	bl	800135a <assert_failed>

  /* Check the SAI Block Frame parameters */
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fdc:	2b07      	cmp	r3, #7
 8007fde:	d904      	bls.n	8007fea <HAL_SAI_Init+0x2be>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe8:	d904      	bls.n	8007ff4 <HAL_SAI_Init+0x2c8>
 8007fea:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8007fee:	4878      	ldr	r0, [pc, #480]	; (80081d0 <HAL_SAI_Init+0x4a4>)
 8007ff0:	f7f9 f9b3 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <HAL_SAI_Init+0x2d8>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008000:	2b80      	cmp	r3, #128	; 0x80
 8008002:	d904      	bls.n	800800e <HAL_SAI_Init+0x2e2>
 8008004:	f240 119b 	movw	r1, #411	; 0x19b
 8008008:	4871      	ldr	r0, [pc, #452]	; (80081d0 <HAL_SAI_Init+0x4a4>)
 800800a:	f7f9 f9a6 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008012:	2b00      	cmp	r3, #0
 8008014:	d009      	beq.n	800802a <HAL_SAI_Init+0x2fe>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800801e:	d004      	beq.n	800802a <HAL_SAI_Init+0x2fe>
 8008020:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8008024:	486a      	ldr	r0, [pc, #424]	; (80081d0 <HAL_SAI_Init+0x4a4>)
 8008026:	f7f9 f998 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <HAL_SAI_Init+0x31a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800803a:	d004      	beq.n	8008046 <HAL_SAI_Init+0x31a>
 800803c:	f240 119d 	movw	r1, #413	; 0x19d
 8008040:	4863      	ldr	r0, [pc, #396]	; (80081d0 <HAL_SAI_Init+0x4a4>)
 8008042:	f7f9 f98a 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804a:	2b00      	cmp	r3, #0
 800804c:	d009      	beq.n	8008062 <HAL_SAI_Init+0x336>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008056:	d004      	beq.n	8008062 <HAL_SAI_Init+0x336>
 8008058:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800805c:	485c      	ldr	r0, [pc, #368]	; (80081d0 <HAL_SAI_Init+0x4a4>)
 800805e:	f7f9 f97c 	bl	800135a <assert_failed>

  /* Check the SAI Block Slot parameters */
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008066:	2b18      	cmp	r3, #24
 8008068:	d904      	bls.n	8008074 <HAL_SAI_Init+0x348>
 800806a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800806e:	4858      	ldr	r0, [pc, #352]	; (80081d0 <HAL_SAI_Init+0x4a4>)
 8008070:	f7f9 f973 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00c      	beq.n	8008096 <HAL_SAI_Init+0x36a>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008080:	2b40      	cmp	r3, #64	; 0x40
 8008082:	d008      	beq.n	8008096 <HAL_SAI_Init+0x36a>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008088:	2b80      	cmp	r3, #128	; 0x80
 800808a:	d004      	beq.n	8008096 <HAL_SAI_Init+0x36a>
 800808c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8008090:	484f      	ldr	r0, [pc, #316]	; (80081d0 <HAL_SAI_Init+0x4a4>)
 8008092:	f7f9 f962 	bl	800135a <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_SAI_Init+0x37a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080a2:	2b10      	cmp	r3, #16
 80080a4:	d904      	bls.n	80080b0 <HAL_SAI_Init+0x384>
 80080a6:	f240 11a3 	movw	r1, #419	; 0x1a3
 80080aa:	4849      	ldr	r0, [pc, #292]	; (80081d0 <HAL_SAI_Init+0x4a4>)
 80080ac:	f7f9 f955 	bl	800135a <assert_failed>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b8:	d304      	bcc.n	80080c4 <HAL_SAI_Init+0x398>
 80080ba:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80080be:	4844      	ldr	r0, [pc, #272]	; (80081d0 <HAL_SAI_Init+0x4a4>)
 80080c0:	f7f9 f94b 	bl	800135a <assert_failed>

  if (hsai->State == HAL_SAI_STATE_RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d106      	bne.n	80080de <HAL_SAI_Init+0x3b2>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7f9 fa9d 	bl	8001618 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2202      	movs	r2, #2
 80080e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f90e 	bl	8008308 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f943 	bl	8008378 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d030      	beq.n	800815c <HAL_SAI_Init+0x430>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f962 	bl	80083c4 <SAI_GetInputClock>
 8008100:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	461a      	mov	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	025b      	lsls	r3, r3, #9
 8008114:	fbb2 f3f3 	udiv	r3, r2, r3
 8008118:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4a2d      	ldr	r2, [pc, #180]	; (80081d4 <HAL_SAI_Init+0x4a8>)
 800811e:	fba2 2303 	umull	r2, r3, r2, r3
 8008122:	08da      	lsrs	r2, r3, #3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8008128:	68f9      	ldr	r1, [r7, #12]
 800812a:	4b2a      	ldr	r3, [pc, #168]	; (80081d4 <HAL_SAI_Init+0x4a8>)
 800812c:	fba3 2301 	umull	r2, r3, r3, r1
 8008130:	08da      	lsrs	r2, r3, #3
 8008132:	4613      	mov	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	1aca      	subs	r2, r1, r3
 800813c:	2a08      	cmp	r2, #8
 800813e:	d904      	bls.n	800814a <HAL_SAI_Init+0x41e>
    {
      hsai->Init.Mckdiv += 1U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814e:	2b04      	cmp	r3, #4
 8008150:	d104      	bne.n	800815c <HAL_SAI_Init+0x430>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	085a      	lsrs	r2, r3, #1
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	2b0f      	cmp	r3, #15
 8008162:	d904      	bls.n	800816e <HAL_SAI_Init+0x442>
 8008164:	f240 11e3 	movw	r1, #483	; 0x1e3
 8008168:	4819      	ldr	r0, [pc, #100]	; (80081d0 <HAL_SAI_Init+0x4a4>)
 800816a:	f7f9 f8f6 	bl	800135a <assert_failed>

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_SAI_Init+0x452>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2b02      	cmp	r3, #2
 800817c:	d109      	bne.n	8008192 <HAL_SAI_Init+0x466>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	2b01      	cmp	r3, #1
 8008184:	d101      	bne.n	800818a <HAL_SAI_Init+0x45e>
 8008186:	2300      	movs	r3, #0
 8008188:	e001      	b.n	800818e <HAL_SAI_Init+0x462>
 800818a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	e008      	b.n	80081a4 <HAL_SAI_Init+0x478>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	2b01      	cmp	r3, #1
 8008198:	d102      	bne.n	80081a0 <HAL_SAI_Init+0x474>
 800819a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800819e:	e000      	b.n	80081a2 <HAL_SAI_Init+0x476>
 80081a0:	2300      	movs	r3, #0
 80081a2:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d815      	bhi.n	80081d8 <HAL_SAI_Init+0x4ac>
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d20b      	bcs.n	80081c8 <HAL_SAI_Init+0x49c>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <HAL_SAI_Init+0x48e>
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d003      	beq.n	80081c0 <HAL_SAI_Init+0x494>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80081b8:	e00e      	b.n	80081d8 <HAL_SAI_Init+0x4ac>
      syncen_bits = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	613b      	str	r3, [r7, #16]
    break;
 80081be:	e00c      	b.n	80081da <HAL_SAI_Init+0x4ae>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80081c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081c4:	613b      	str	r3, [r7, #16]
    break;
 80081c6:	e008      	b.n	80081da <HAL_SAI_Init+0x4ae>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80081c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081cc:	613b      	str	r3, [r7, #16]
    break;
 80081ce:	e004      	b.n	80081da <HAL_SAI_Init+0x4ae>
 80081d0:	080140fc 	.word	0x080140fc
 80081d4:	cccccccd 	.word	0xcccccccd
      break;
 80081d8:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6819      	ldr	r1, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	4b46      	ldr	r3, [pc, #280]	; (8008300 <HAL_SAI_Init+0x5d4>)
 80081e6:	400b      	ands	r3, r1
 80081e8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6819      	ldr	r1, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80081fe:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008204:	431a      	orrs	r2, r3
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8008212:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800821e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008224:	051b      	lsls	r3, r3, #20
 8008226:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	6812      	ldr	r2, [r2, #0]
 800823a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800823e:	f023 030f 	bic.w	r3, r3, #15
 8008242:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6859      	ldr	r1, [r3, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	699a      	ldr	r2, [r3, #24]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008252:	431a      	orrs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008258:	431a      	orrs	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6899      	ldr	r1, [r3, #8]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	4b25      	ldr	r3, [pc, #148]	; (8008304 <HAL_SAI_Init+0x5d8>)
 800826e:	400b      	ands	r3, r1
 8008270:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6899      	ldr	r1, [r3, #8]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800827c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008282:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 8008288:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 800828e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008294:	3b01      	subs	r3, #1
 8008296:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008298:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68d9      	ldr	r1, [r3, #12]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	f24f 0320 	movw	r3, #61472	; 0xf020
 80082b0:	400b      	ands	r3, r1
 80082b2:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68d9      	ldr	r1, [r3, #12]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80082ca:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d0:	3b01      	subs	r3, #1
 80082d2:	021b      	lsls	r3, r3, #8
 80082d4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	ff05c010 	.word	0xff05c010
 8008304:	fff88000 	.word	0xfff88000

08008308 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008310:	4b17      	ldr	r3, [pc, #92]	; (8008370 <SAI_Disable+0x68>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a17      	ldr	r2, [pc, #92]	; (8008374 <SAI_Disable+0x6c>)
 8008316:	fba2 2303 	umull	r2, r3, r2, r3
 800831a:	0b1b      	lsrs	r3, r3, #12
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008332:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	1e5a      	subs	r2, r3, #1
 8008338:	60fa      	str	r2, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10a      	bne.n	8008354 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008344:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	72fb      	strb	r3, [r7, #11]
      break;
 8008352:	e006      	b.n	8008362 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e8      	bne.n	8008334 <SAI_Disable+0x2c>

  return status;
 8008362:	7afb      	ldrb	r3, [r7, #11]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	20000000 	.word	0x20000000
 8008374:	95cbec1b 	.word	0x95cbec1b

08008378 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b02      	cmp	r3, #2
 8008386:	d00c      	beq.n	80083a2 <SAI_BlockSynchroConfig+0x2a>
 8008388:	2b02      	cmp	r3, #2
 800838a:	d80d      	bhi.n	80083a8 <SAI_BlockSynchroConfig+0x30>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <SAI_BlockSynchroConfig+0x1e>
 8008390:	2b01      	cmp	r3, #1
 8008392:	d003      	beq.n	800839c <SAI_BlockSynchroConfig+0x24>
 8008394:	e008      	b.n	80083a8 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	60fb      	str	r3, [r7, #12]
      break;
 800839a:	e008      	b.n	80083ae <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800839c:	2310      	movs	r3, #16
 800839e:	60fb      	str	r3, [r7, #12]
      break;
 80083a0:	e005      	b.n	80083ae <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80083a2:	2320      	movs	r3, #32
 80083a4:	60fb      	str	r3, [r7, #12]
      break;
 80083a6:	e002      	b.n	80083ae <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	60fb      	str	r3, [r7, #12]
      break;
 80083ac:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 80083ae:	4a04      	ldr	r2, [pc, #16]	; (80083c0 <SAI_BlockSynchroConfig+0x48>)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80083b4:	bf00      	nop
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	40015800 	.word	0x40015800

080083c4 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	613b      	str	r3, [r7, #16]
 80083d4:	2300      	movs	r3, #0
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d012      	beq.n	8008406 <SAI_GetInputClock+0x42>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083e8:	d00d      	beq.n	8008406 <SAI_GetInputClock+0x42>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083f2:	d008      	beq.n	8008406 <SAI_GetInputClock+0x42>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083fc:	d003      	beq.n	8008406 <SAI_GetInputClock+0x42>
 80083fe:	21b5      	movs	r1, #181	; 0xb5
 8008400:	4846      	ldr	r0, [pc, #280]	; (800851c <SAI_GetInputClock+0x158>)
 8008402:	f7f8 ffaa 	bl	800135a <assert_failed>

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a45      	ldr	r2, [pc, #276]	; (8008520 <SAI_GetInputClock+0x15c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d10b      	bne.n	8008428 <SAI_GetInputClock+0x64>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8008410:	4b44      	ldr	r3, [pc, #272]	; (8008524 <SAI_GetInputClock+0x160>)
 8008412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008416:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	4941      	ldr	r1, [pc, #260]	; (8008524 <SAI_GetInputClock+0x160>)
 8008420:	4313      	orrs	r3, r2
 8008422:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8008426:	e00b      	b.n	8008440 <SAI_GetInputClock+0x7c>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8008428:	4b3e      	ldr	r3, [pc, #248]	; (8008524 <SAI_GetInputClock+0x160>)
 800842a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800842e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	493a      	ldr	r1, [pc, #232]	; (8008524 <SAI_GetInputClock+0x160>)
 800843a:	4313      	orrs	r3, r2
 800843c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008440:	4b38      	ldr	r3, [pc, #224]	; (8008524 <SAI_GetInputClock+0x160>)
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d108      	bne.n	800845e <SAI_GetInputClock+0x9a>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800844c:	4b35      	ldr	r3, [pc, #212]	; (8008524 <SAI_GetInputClock+0x160>)
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008454:	4a34      	ldr	r2, [pc, #208]	; (8008528 <SAI_GetInputClock+0x164>)
 8008456:	fbb2 f3f3 	udiv	r3, r2, r3
 800845a:	613b      	str	r3, [r7, #16]
 800845c:	e007      	b.n	800846e <SAI_GetInputClock+0xaa>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800845e:	4b31      	ldr	r3, [pc, #196]	; (8008524 <SAI_GetInputClock+0x160>)
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008466:	4a31      	ldr	r2, [pc, #196]	; (800852c <SAI_GetInputClock+0x168>)
 8008468:	fbb2 f3f3 	udiv	r3, r2, r3
 800846c:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d121      	bne.n	80084ba <SAI_GetInputClock+0xf6>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8008476:	4b2b      	ldr	r3, [pc, #172]	; (8008524 <SAI_GetInputClock+0x160>)
 8008478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800847c:	0e1b      	lsrs	r3, r3, #24
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 8008484:	4b27      	ldr	r3, [pc, #156]	; (8008524 <SAI_GetInputClock+0x160>)
 8008486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848a:	099b      	lsrs	r3, r3, #6
 800848c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	fb03 f202 	mul.w	r2, r3, r2
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	fbb2 f3f3 	udiv	r3, r2, r3
 800849c:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800849e:	4b21      	ldr	r3, [pc, #132]	; (8008524 <SAI_GetInputClock+0x160>)
 80084a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a4:	0a1b      	lsrs	r3, r3, #8
 80084a6:	f003 031f 	and.w	r3, r3, #31
 80084aa:	3301      	adds	r3, #1
 80084ac:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	e02a      	b.n	8008510 <SAI_GetInputClock+0x14c>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084c2:	d120      	bne.n	8008506 <SAI_GetInputClock+0x142>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80084c4:	4b17      	ldr	r3, [pc, #92]	; (8008524 <SAI_GetInputClock+0x160>)
 80084c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ca:	0e1b      	lsrs	r3, r3, #24
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80084d2:	4b14      	ldr	r3, [pc, #80]	; (8008524 <SAI_GetInputClock+0x160>)
 80084d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d8:	099b      	lsrs	r3, r3, #6
 80084da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	fb03 f202 	mul.w	r2, r3, r2
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ea:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80084ec:	4b0d      	ldr	r3, [pc, #52]	; (8008524 <SAI_GetInputClock+0x160>)
 80084ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084f2:	f003 031f 	and.w	r3, r3, #31
 80084f6:	3301      	adds	r3, #1
 80084f8:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	e004      	b.n	8008510 <SAI_GetInputClock+0x14c>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8008506:	4b0a      	ldr	r3, [pc, #40]	; (8008530 <SAI_GetInputClock+0x16c>)
 8008508:	2201      	movs	r2, #1
 800850a:	601a      	str	r2, [r3, #0]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 800850c:	4b09      	ldr	r3, [pc, #36]	; (8008534 <SAI_GetInputClock+0x170>)
 800850e:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8008510:	697b      	ldr	r3, [r7, #20]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	08014134 	.word	0x08014134
 8008520:	40015804 	.word	0x40015804
 8008524:	40023800 	.word	0x40023800
 8008528:	00f42400 	.word	0x00f42400
 800852c:	007a1200 	.word	0x007a1200
 8008530:	4247015c 	.word	0x4247015c
 8008534:	00bb8000 	.word	0x00bb8000

08008538 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e080      	b.n	800864c <HAL_SD_Init+0x114>
  }

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(hsd->Instance));
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a41      	ldr	r2, [pc, #260]	; (8008654 <HAL_SD_Init+0x11c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d004      	beq.n	800855e <HAL_SD_Init+0x26>
 8008554:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8008558:	483f      	ldr	r0, [pc, #252]	; (8008658 <HAL_SD_Init+0x120>)
 800855a:	f7f8 fefe 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(hsd->Init.ClockEdge));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d009      	beq.n	800857a <HAL_SD_Init+0x42>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800856e:	d004      	beq.n	800857a <HAL_SD_Init+0x42>
 8008570:	f240 1159 	movw	r1, #345	; 0x159
 8008574:	4838      	ldr	r0, [pc, #224]	; (8008658 <HAL_SD_Init+0x120>)
 8008576:	f7f8 fef0 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_CLOCK_BYPASS(hsd->Init.ClockBypass));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d009      	beq.n	8008596 <HAL_SD_Init+0x5e>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800858a:	d004      	beq.n	8008596 <HAL_SD_Init+0x5e>
 800858c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8008590:	4831      	ldr	r0, [pc, #196]	; (8008658 <HAL_SD_Init+0x120>)
 8008592:	f7f8 fee2 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d009      	beq.n	80085b2 <HAL_SD_Init+0x7a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a6:	d004      	beq.n	80085b2 <HAL_SD_Init+0x7a>
 80085a8:	f240 115b 	movw	r1, #347	; 0x15b
 80085ac:	482a      	ldr	r0, [pc, #168]	; (8008658 <HAL_SD_Init+0x120>)
 80085ae:	f7f8 fed4 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00e      	beq.n	80085d8 <HAL_SD_Init+0xa0>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085c2:	d009      	beq.n	80085d8 <HAL_SD_Init+0xa0>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085cc:	d004      	beq.n	80085d8 <HAL_SD_Init+0xa0>
 80085ce:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80085d2:	4821      	ldr	r0, [pc, #132]	; (8008658 <HAL_SD_Init+0x120>)
 80085d4:	f7f8 fec1 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d009      	beq.n	80085f4 <HAL_SD_Init+0xbc>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085e8:	d004      	beq.n	80085f4 <HAL_SD_Init+0xbc>
 80085ea:	f240 115d 	movw	r1, #349	; 0x15d
 80085ee:	481a      	ldr	r0, [pc, #104]	; (8008658 <HAL_SD_Init+0x120>)
 80085f0:	f7f8 feb3 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	2bff      	cmp	r3, #255	; 0xff
 80085fa:	d904      	bls.n	8008606 <HAL_SD_Init+0xce>
 80085fc:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008600:	4815      	ldr	r0, [pc, #84]	; (8008658 <HAL_SD_Init+0x120>)
 8008602:	f7f8 feaa 	bl	800135a <assert_failed>

  if(hsd->State == HAL_SD_STATE_RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d105      	bne.n	800861e <HAL_SD_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7f9 f87d 	bl	8001718 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2203      	movs	r2, #3
 8008622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f818 	bl	800865c <HAL_SD_InitCard>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <HAL_SD_Init+0xfe>
  {
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e00a      	b.n	800864c <HAL_SD_Init+0x114>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	40012c00 	.word	0x40012c00
 8008658:	08014170 	.word	0x08014170

0800865c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800865c:	b5b0      	push	{r4, r5, r7, lr}
 800865e:	b08e      	sub	sp, #56	; 0x38
 8008660:	af04      	add	r7, sp, #16
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008664:	2300      	movs	r3, #0
 8008666:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008668:	2300      	movs	r3, #0
 800866a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800866c:	2300      	movs	r3, #0
 800866e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008670:	2300      	movs	r3, #0
 8008672:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008674:	2300      	movs	r3, #0
 8008676:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008678:	2376      	movs	r3, #118	; 0x76
 800867a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681d      	ldr	r5, [r3, #0]
 8008680:	466c      	mov	r4, sp
 8008682:	f107 0314 	add.w	r3, r7, #20
 8008686:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800868a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800868e:	f107 0308 	add.w	r3, r7, #8
 8008692:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008694:	4628      	mov	r0, r5
 8008696:	f002 fe9d 	bl	800b3d4 <SDIO_Init>
 800869a:	4603      	mov	r3, r0
 800869c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80086a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e04f      	b.n	800874c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80086ac:	4b29      	ldr	r3, [pc, #164]	; (8008754 <HAL_SD_InitCard+0xf8>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f002 ff13 	bl	800b4e2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80086bc:	4b25      	ldr	r3, [pc, #148]	; (8008754 <HAL_SD_InitCard+0xf8>)
 80086be:	2201      	movs	r2, #1
 80086c0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80086c2:	2002      	movs	r0, #2
 80086c4:	f7f9 fbdc 	bl	8001e80 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fe1d 	bl	8009308 <SD_PowerON>
 80086ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	431a      	orrs	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e02e      	b.n	800874c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fd3c 	bl	800916c <SD_InitCard>
 80086f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00b      	beq.n	8008714 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	431a      	orrs	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e01b      	b.n	800874c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800871c:	4618      	mov	r0, r3
 800871e:	f003 f833 	bl	800b788 <SDMMC_CmdBlockLength>
 8008722:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00f      	beq.n	800874a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a0a      	ldr	r2, [pc, #40]	; (8008758 <HAL_SD_InitCard+0xfc>)
 8008730:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	431a      	orrs	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e000      	b.n	800874c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3728      	adds	r7, #40	; 0x28
 8008750:	46bd      	mov	sp, r7
 8008752:	bdb0      	pop	{r4, r5, r7, pc}
 8008754:	422580a0 	.word	0x422580a0
 8008758:	004005ff 	.word	0x004005ff

0800875c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08c      	sub	sp, #48	; 0x30
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d107      	bne.n	8008784 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008778:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e0be      	b.n	8008902 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b01      	cmp	r3, #1
 800878e:	f040 80b7 	bne.w	8008900 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	441a      	add	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d907      	bls.n	80087b6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e0a5      	b.n	8008902 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2203      	movs	r2, #3
 80087ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2200      	movs	r2, #0
 80087c4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80087d4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087da:	4a4c      	ldr	r2, [pc, #304]	; (800890c <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80087dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e2:	4a4b      	ldr	r2, [pc, #300]	; (8008910 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80087e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	2200      	movs	r2, #0
 80087ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	2200      	movs	r2, #0
 80087f4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3380      	adds	r3, #128	; 0x80
 800881c:	4619      	mov	r1, r3
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	025b      	lsls	r3, r3, #9
 8008824:	089b      	lsrs	r3, r3, #2
 8008826:	f7f9 fc8b 	bl	8002140 <HAL_DMA_Start_IT>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d017      	beq.n	8008860 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800883e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a33      	ldr	r2, [pc, #204]	; (8008914 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008846:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e050      	b.n	8008902 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008860:	4b2d      	ldr	r3, [pc, #180]	; (8008918 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008862:	2201      	movs	r2, #1
 8008864:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886a:	2b01      	cmp	r3, #1
 800886c:	d002      	beq.n	8008874 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008870:	025b      	lsls	r3, r3, #9
 8008872:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008874:	f04f 33ff 	mov.w	r3, #4294967295
 8008878:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	025b      	lsls	r3, r3, #9
 800887e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008880:	2390      	movs	r3, #144	; 0x90
 8008882:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008884:	2302      	movs	r3, #2
 8008886:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008888:	2300      	movs	r3, #0
 800888a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800888c:	2301      	movs	r3, #1
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f107 0210 	add.w	r2, r7, #16
 8008898:	4611      	mov	r1, r2
 800889a:	4618      	mov	r0, r3
 800889c:	f002 fed6 	bl	800b64c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d90a      	bls.n	80088bc <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2282      	movs	r2, #130	; 0x82
 80088aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088b2:	4618      	mov	r0, r3
 80088b4:	f002 ffac 	bl	800b810 <SDMMC_CmdReadMultiBlock>
 80088b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80088ba:	e009      	b.n	80088d0 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2281      	movs	r2, #129	; 0x81
 80088c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088c8:	4618      	mov	r0, r3
 80088ca:	f002 ff7f 	bl	800b7cc <SDMMC_CmdReadSingleBlock>
 80088ce:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80088d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d012      	beq.n	80088fc <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a0e      	ldr	r2, [pc, #56]	; (8008914 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80088dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e4:	431a      	orrs	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e002      	b.n	8008902 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	e000      	b.n	8008902 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008900:	2302      	movs	r3, #2
  }
}
 8008902:	4618      	mov	r0, r3
 8008904:	3730      	adds	r7, #48	; 0x30
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	08009057 	.word	0x08009057
 8008910:	080090c9 	.word	0x080090c9
 8008914:	004005ff 	.word	0x004005ff
 8008918:	4225858c 	.word	0x4225858c

0800891c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08c      	sub	sp, #48	; 0x30
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d107      	bne.n	8008944 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008938:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e0c1      	b.n	8008ac8 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b01      	cmp	r3, #1
 800894e:	f040 80ba 	bne.w	8008ac6 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	441a      	add	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008962:	429a      	cmp	r2, r3
 8008964:	d907      	bls.n	8008976 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e0a8      	b.n	8008ac8 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2203      	movs	r2, #3
 800897a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f042 021a 	orr.w	r2, r2, #26
 8008994:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899a:	4a4d      	ldr	r2, [pc, #308]	; (8008ad0 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800899c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a2:	4a4c      	ldr	r2, [pc, #304]	; (8008ad4 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 80089a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089aa:	2200      	movs	r2, #0
 80089ac:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d002      	beq.n	80089bc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80089b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b8:	025b      	lsls	r3, r3, #9
 80089ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d90a      	bls.n	80089d8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	22a0      	movs	r2, #160	; 0xa0
 80089c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089ce:	4618      	mov	r0, r3
 80089d0:	f002 ff62 	bl	800b898 <SDMMC_CmdWriteMultiBlock>
 80089d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80089d6:	e009      	b.n	80089ec <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2290      	movs	r2, #144	; 0x90
 80089dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089e4:	4618      	mov	r0, r3
 80089e6:	f002 ff35 	bl	800b854 <SDMMC_CmdWriteSingleBlock>
 80089ea:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80089ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d012      	beq.n	8008a18 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a38      	ldr	r2, [pc, #224]	; (8008ad8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80089f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	431a      	orrs	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e057      	b.n	8008ac8 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008a18:	4b30      	ldr	r3, [pc, #192]	; (8008adc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a22:	2240      	movs	r2, #64	; 0x40
 8008a24:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008a46:	68b9      	ldr	r1, [r7, #8]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3380      	adds	r3, #128	; 0x80
 8008a4e:	461a      	mov	r2, r3
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	025b      	lsls	r3, r3, #9
 8008a54:	089b      	lsrs	r3, r3, #2
 8008a56:	f7f9 fb73 	bl	8002140 <HAL_DMA_Start_IT>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01a      	beq.n	8008a96 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 021a 	bic.w	r2, r2, #26
 8008a6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008a76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e018      	b.n	8008ac8 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a96:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	025b      	lsls	r3, r3, #9
 8008aa0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008aa2:	2390      	movs	r3, #144	; 0x90
 8008aa4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f107 0210 	add.w	r2, r7, #16
 8008aba:	4611      	mov	r1, r2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f002 fdc5 	bl	800b64c <SDIO_ConfigData>

      return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	e000      	b.n	8008ac8 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8008ac6:	2302      	movs	r3, #2
  }
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3730      	adds	r7, #48	; 0x30
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	0800902d 	.word	0x0800902d
 8008ad4:	080090c9 	.word	0x080090c9
 8008ad8:	004005ff 	.word	0x004005ff
 8008adc:	4225858c 	.word	0x4225858c

08008ae0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b02:	0f9b      	lsrs	r3, r3, #30
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b0e:	0e9b      	lsrs	r3, r3, #26
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	f003 030f 	and.w	r3, r3, #15
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b20:	0e1b      	lsrs	r3, r3, #24
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	f003 0303 	and.w	r3, r3, #3
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b32:	0c1b      	lsrs	r3, r3, #16
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b3e:	0a1b      	lsrs	r3, r3, #8
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b54:	0d1b      	lsrs	r3, r3, #20
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b60:	0c1b      	lsrs	r3, r3, #16
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 030f 	and.w	r3, r3, #15
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b72:	0bdb      	lsrs	r3, r3, #15
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b84:	0b9b      	lsrs	r3, r3, #14
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b96:	0b5b      	lsrs	r3, r3, #13
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ba8:	0b1b      	lsrs	r3, r3, #12
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d163      	bne.n	8008c8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc8:	009a      	lsls	r2, r3, #2
 8008bca:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008bce:	4013      	ands	r3, r2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008bd4:	0f92      	lsrs	r2, r2, #30
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008be0:	0edb      	lsrs	r3, r3, #27
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	f003 0307 	and.w	r3, r3, #7
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf2:	0e1b      	lsrs	r3, r3, #24
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c04:	0d5b      	lsrs	r3, r3, #21
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c16:	0c9b      	lsrs	r3, r3, #18
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c28:	0bdb      	lsrs	r3, r3, #15
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	f003 0307 	and.w	r3, r3, #7
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	7e1b      	ldrb	r3, [r3, #24]
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	3302      	adds	r3, #2
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008c56:	fb03 f202 	mul.w	r2, r3, r2
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	7a1b      	ldrb	r3, [r3, #8]
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	f003 030f 	and.w	r3, r3, #15
 8008c68:	2201      	movs	r2, #1
 8008c6a:	409a      	lsls	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008c78:	0a52      	lsrs	r2, r2, #9
 8008c7a:	fb03 f202 	mul.w	r2, r3, r2
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c88:	661a      	str	r2, [r3, #96]	; 0x60
 8008c8a:	e031      	b.n	8008cf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d11d      	bne.n	8008cd0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c98:	041b      	lsls	r3, r3, #16
 8008c9a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ca2:	0c1b      	lsrs	r3, r3, #16
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	029a      	lsls	r2, r3, #10
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cc4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	661a      	str	r2, [r3, #96]	; 0x60
 8008cce:	e00f      	b.n	8008cf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a58      	ldr	r2, [pc, #352]	; (8008e38 <HAL_SD_GetCardCSD+0x344>)
 8008cd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e09d      	b.n	8008e2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cf4:	0b9b      	lsrs	r3, r3, #14
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d06:	09db      	lsrs	r3, r3, #7
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d28:	0fdb      	lsrs	r3, r3, #31
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d34:	0f5b      	lsrs	r3, r3, #29
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	f003 0303 	and.w	r3, r3, #3
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d46:	0e9b      	lsrs	r3, r3, #26
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	f003 0307 	and.w	r3, r3, #7
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d58:	0d9b      	lsrs	r3, r3, #22
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	f003 030f 	and.w	r3, r3, #15
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6a:	0d5b      	lsrs	r3, r3, #21
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d86:	0c1b      	lsrs	r3, r3, #16
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9a:	0bdb      	lsrs	r3, r3, #15
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dae:	0b9b      	lsrs	r3, r3, #14
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc2:	0b5b      	lsrs	r3, r3, #13
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd6:	0b1b      	lsrs	r3, r3, #12
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dea:	0a9b      	lsrs	r3, r3, #10
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfe:	0a1b      	lsrs	r3, r3, #8
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e12:	085b      	lsrs	r3, r3, #1
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	004005ff 	.word	0x004005ff

08008e3c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008e94:	b5b0      	push	{r4, r5, r7, lr}
 8008e96:	b08e      	sub	sp, #56	; 0x38
 8008e98:	af04      	add	r7, sp, #16
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00c      	beq.n	8008ec4 <HAL_SD_ConfigWideBusOperation+0x30>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eb0:	d008      	beq.n	8008ec4 <HAL_SD_ConfigWideBusOperation+0x30>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb8:	d004      	beq.n	8008ec4 <HAL_SD_ConfigWideBusOperation+0x30>
 8008eba:	f640 01c4 	movw	r1, #2244	; 0x8c4
 8008ebe:	4849      	ldr	r0, [pc, #292]	; (8008fe4 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008ec0:	f7f8 fa4b 	bl	800135a <assert_failed>

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2203      	movs	r2, #3
 8008ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d02e      	beq.n	8008f32 <HAL_SD_ConfigWideBusOperation+0x9e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eda:	d106      	bne.n	8008eea <HAL_SD_ConfigWideBusOperation+0x56>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38
 8008ee8:	e029      	b.n	8008f3e <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ef0:	d10a      	bne.n	8008f08 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fabe 	bl	8009474 <SD_WideBus_Enable>
 8008ef8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008efe:	6a3b      	ldr	r3, [r7, #32]
 8008f00:	431a      	orrs	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	639a      	str	r2, [r3, #56]	; 0x38
 8008f06:	e01a      	b.n	8008f3e <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10a      	bne.n	8008f24 <HAL_SD_ConfigWideBusOperation+0x90>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fafb 	bl	800950a <SD_WideBus_Disable>
 8008f14:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	639a      	str	r2, [r3, #56]	; 0x38
 8008f22:	e00c      	b.n	8008f3e <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	639a      	str	r2, [r3, #56]	; 0x38
 8008f30:	e005      	b.n	8008f3e <HAL_SD_ConfigWideBusOperation+0xaa>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f36:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00b      	beq.n	8008f5e <HAL_SD_ConfigWideBusOperation+0xca>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a27      	ldr	r2, [pc, #156]	; (8008fe8 <HAL_SD_ConfigWideBusOperation+0x154>)
 8008f4c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f5c:	e01f      	b.n	8008f9e <HAL_SD_ConfigWideBusOperation+0x10a>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681d      	ldr	r5, [r3, #0]
 8008f84:	466c      	mov	r4, sp
 8008f86:	f107 0314 	add.w	r3, r7, #20
 8008f8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f92:	f107 0308 	add.w	r3, r7, #8
 8008f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f002 fa1b 	bl	800b3d4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f002 fbee 	bl	800b788 <SDMMC_CmdBlockLength>
 8008fac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00c      	beq.n	8008fce <HAL_SD_ConfigWideBusOperation+0x13a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a0b      	ldr	r2, [pc, #44]	; (8008fe8 <HAL_SD_ConfigWideBusOperation+0x154>)
 8008fba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	431a      	orrs	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3728      	adds	r7, #40	; 0x28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	08014170 	.word	0x08014170
 8008fe8:	004005ff 	.word	0x004005ff

08008fec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008ff8:	f107 030c 	add.w	r3, r7, #12
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fa10 	bl	8009424 <SD_SendStatus>
 8009004:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d005      	beq.n	8009018 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	431a      	orrs	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	0a5b      	lsrs	r3, r3, #9
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009022:	693b      	ldr	r3, [r7, #16]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009038:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009048:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800904a:	bf00      	nop
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009062:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009068:	2b82      	cmp	r3, #130	; 0x82
 800906a:	d111      	bne.n	8009090 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4618      	mov	r0, r3
 8009072:	f002 fc33 	bl	800b8dc <SDMMC_CmdStopTransfer>
 8009076:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d008      	beq.n	8009090 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	431a      	orrs	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f7ff fd28 	bl	8008ae0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 0208 	bic.w	r2, r2, #8
 800909e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80090a8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f004 f84f 	bl	800d15c <HAL_SD_RxCpltCallback>
#endif
}
 80090be:	bf00      	nop
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
	...

080090c8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7f9 f898 	bl	800220c <HAL_DMA_GetError>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d03e      	beq.n	8009160 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d002      	beq.n	80090fe <SD_DMAError+0x36>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d12d      	bne.n	800915a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a19      	ldr	r2, [pc, #100]	; (8009168 <SD_DMAError+0xa0>)
 8009104:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009114:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009122:	6978      	ldr	r0, [r7, #20]
 8009124:	f7ff ff62 	bl	8008fec <HAL_SD_GetCardState>
 8009128:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b06      	cmp	r3, #6
 800912e:	d002      	beq.n	8009136 <SD_DMAError+0x6e>
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b05      	cmp	r3, #5
 8009134:	d10a      	bne.n	800914c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4618      	mov	r0, r3
 800913c:	f002 fbce 	bl	800b8dc <SDMMC_CmdStopTransfer>
 8009140:	4602      	mov	r2, r0
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009146:	431a      	orrs	r2, r3
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	2200      	movs	r2, #0
 8009158:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800915a:	6978      	ldr	r0, [r7, #20]
 800915c:	f7ff fcc0 	bl	8008ae0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009160:	bf00      	nop
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	004005ff 	.word	0x004005ff

0800916c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800916c:	b5b0      	push	{r4, r5, r7, lr}
 800916e:	b094      	sub	sp, #80	; 0x50
 8009170:	af04      	add	r7, sp, #16
 8009172:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009174:	2301      	movs	r3, #1
 8009176:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4618      	mov	r0, r3
 800917e:	f002 f9be 	bl	800b4fe <SDIO_GetPowerState>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d102      	bne.n	800918e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009188:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800918c:	e0b8      	b.n	8009300 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009192:	2b03      	cmp	r3, #3
 8009194:	d02f      	beq.n	80091f6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4618      	mov	r0, r3
 800919c:	f002 fca8 	bl	800baf0 <SDMMC_CmdSendCID>
 80091a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80091a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <SD_InitCard+0x40>
    {
      return errorstate;
 80091a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091aa:	e0a9      	b.n	8009300 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2100      	movs	r1, #0
 80091b2:	4618      	mov	r0, r3
 80091b4:	f002 fa26 	bl	800b604 <SDIO_GetResponse>
 80091b8:	4602      	mov	r2, r0
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2104      	movs	r1, #4
 80091c4:	4618      	mov	r0, r3
 80091c6:	f002 fa1d 	bl	800b604 <SDIO_GetResponse>
 80091ca:	4602      	mov	r2, r0
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2108      	movs	r1, #8
 80091d6:	4618      	mov	r0, r3
 80091d8:	f002 fa14 	bl	800b604 <SDIO_GetResponse>
 80091dc:	4602      	mov	r2, r0
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	210c      	movs	r1, #12
 80091e8:	4618      	mov	r0, r3
 80091ea:	f002 fa0b 	bl	800b604 <SDIO_GetResponse>
 80091ee:	4602      	mov	r2, r0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d00d      	beq.n	800921a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f107 020e 	add.w	r2, r7, #14
 8009206:	4611      	mov	r1, r2
 8009208:	4618      	mov	r0, r3
 800920a:	f002 fcae 	bl	800bb6a <SDMMC_CmdSetRelAdd>
 800920e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <SD_InitCard+0xae>
    {
      return errorstate;
 8009216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009218:	e072      	b.n	8009300 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921e:	2b03      	cmp	r3, #3
 8009220:	d036      	beq.n	8009290 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009222:	89fb      	ldrh	r3, [r7, #14]
 8009224:	461a      	mov	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009232:	041b      	lsls	r3, r3, #16
 8009234:	4619      	mov	r1, r3
 8009236:	4610      	mov	r0, r2
 8009238:	f002 fc78 	bl	800bb2c <SDMMC_CmdSendCSD>
 800923c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800923e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009246:	e05b      	b.n	8009300 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2100      	movs	r1, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f002 f9d8 	bl	800b604 <SDIO_GetResponse>
 8009254:	4602      	mov	r2, r0
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2104      	movs	r1, #4
 8009260:	4618      	mov	r0, r3
 8009262:	f002 f9cf 	bl	800b604 <SDIO_GetResponse>
 8009266:	4602      	mov	r2, r0
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2108      	movs	r1, #8
 8009272:	4618      	mov	r0, r3
 8009274:	f002 f9c6 	bl	800b604 <SDIO_GetResponse>
 8009278:	4602      	mov	r2, r0
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	210c      	movs	r1, #12
 8009284:	4618      	mov	r0, r3
 8009286:	f002 f9bd 	bl	800b604 <SDIO_GetResponse>
 800928a:	4602      	mov	r2, r0
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2104      	movs	r1, #4
 8009296:	4618      	mov	r0, r3
 8009298:	f002 f9b4 	bl	800b604 <SDIO_GetResponse>
 800929c:	4603      	mov	r3, r0
 800929e:	0d1a      	lsrs	r2, r3, #20
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80092a4:	f107 0310 	add.w	r3, r7, #16
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7ff fc22 	bl	8008af4 <HAL_SD_GetCardCSD>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80092ba:	e021      	b.n	8009300 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6819      	ldr	r1, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c4:	041b      	lsls	r3, r3, #16
 80092c6:	2200      	movs	r2, #0
 80092c8:	461c      	mov	r4, r3
 80092ca:	4615      	mov	r5, r2
 80092cc:	4622      	mov	r2, r4
 80092ce:	462b      	mov	r3, r5
 80092d0:	4608      	mov	r0, r1
 80092d2:	f002 fb25 	bl	800b920 <SDMMC_CmdSelDesel>
 80092d6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80092d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <SD_InitCard+0x176>
  {
    return errorstate;
 80092de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e0:	e00e      	b.n	8009300 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681d      	ldr	r5, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	466c      	mov	r4, sp
 80092ea:	f103 0210 	add.w	r2, r3, #16
 80092ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80092f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80092f4:	3304      	adds	r3, #4
 80092f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092f8:	4628      	mov	r0, r5
 80092fa:	f002 f86b 	bl	800b3d4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3740      	adds	r7, #64	; 0x40
 8009304:	46bd      	mov	sp, r7
 8009306:	bdb0      	pop	{r4, r5, r7, pc}

08009308 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	2300      	movs	r3, #0
 800931a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4618      	mov	r0, r3
 8009322:	f002 fb20 	bl	800b966 <SDMMC_CmdGoIdleState>
 8009326:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <SD_PowerON+0x2a>
  {
    return errorstate;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	e072      	b.n	8009418 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4618      	mov	r0, r3
 8009338:	f002 fb33 	bl	800b9a2 <SDMMC_CmdOperCond>
 800933c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00d      	beq.n	8009360 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4618      	mov	r0, r3
 8009350:	f002 fb09 	bl	800b966 <SDMMC_CmdGoIdleState>
 8009354:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d004      	beq.n	8009366 <SD_PowerON+0x5e>
    {
      return errorstate;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	e05b      	b.n	8009418 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800936a:	2b01      	cmp	r3, #1
 800936c:	d137      	bne.n	80093de <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2100      	movs	r1, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f002 fb33 	bl	800b9e0 <SDMMC_CmdAppCommand>
 800937a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d02d      	beq.n	80093de <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009382:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009386:	e047      	b.n	8009418 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2100      	movs	r1, #0
 800938e:	4618      	mov	r0, r3
 8009390:	f002 fb26 	bl	800b9e0 <SDMMC_CmdAppCommand>
 8009394:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <SD_PowerON+0x98>
    {
      return errorstate;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	e03b      	b.n	8009418 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	491e      	ldr	r1, [pc, #120]	; (8009420 <SD_PowerON+0x118>)
 80093a6:	4618      	mov	r0, r3
 80093a8:	f002 fb3c 	bl	800ba24 <SDMMC_CmdAppOperCommand>
 80093ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093b8:	e02e      	b.n	8009418 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2100      	movs	r1, #0
 80093c0:	4618      	mov	r0, r3
 80093c2:	f002 f91f 	bl	800b604 <SDIO_GetResponse>
 80093c6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	0fdb      	lsrs	r3, r3, #31
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d101      	bne.n	80093d4 <SD_PowerON+0xcc>
 80093d0:	2301      	movs	r3, #1
 80093d2:	e000      	b.n	80093d6 <SD_PowerON+0xce>
 80093d4:	2300      	movs	r3, #0
 80093d6:	613b      	str	r3, [r7, #16]

    count++;
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	3301      	adds	r3, #1
 80093dc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d802      	bhi.n	80093ee <SD_PowerON+0xe6>
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d0cc      	beq.n	8009388 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d902      	bls.n	80093fe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80093f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093fc:	e00c      	b.n	8009418 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	645a      	str	r2, [r3, #68]	; 0x44
 800940e:	e002      	b.n	8009416 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	c1100000 	.word	0xc1100000

08009424 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d102      	bne.n	800943a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009434:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009438:	e018      	b.n	800946c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009442:	041b      	lsls	r3, r3, #16
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	f002 fbb0 	bl	800bbac <SDMMC_CmdSendStatus>
 800944c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	e009      	b.n	800946c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2100      	movs	r1, #0
 800945e:	4618      	mov	r0, r3
 8009460:	f002 f8d0 	bl	800b604 <SDIO_GetResponse>
 8009464:	4602      	mov	r2, r0
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	2300      	movs	r3, #0
 8009482:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2100      	movs	r1, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f002 f8ba 	bl	800b604 <SDIO_GetResponse>
 8009490:	4603      	mov	r3, r0
 8009492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800949a:	d102      	bne.n	80094a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800949c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094a0:	e02f      	b.n	8009502 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80094a2:	f107 030c 	add.w	r3, r7, #12
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f879 	bl	80095a0 <SD_FindSCR>
 80094ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	e023      	b.n	8009502 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d01c      	beq.n	80094fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094cc:	041b      	lsls	r3, r3, #16
 80094ce:	4619      	mov	r1, r3
 80094d0:	4610      	mov	r0, r2
 80094d2:	f002 fa85 	bl	800b9e0 <SDMMC_CmdAppCommand>
 80094d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	e00f      	b.n	8009502 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2102      	movs	r1, #2
 80094e8:	4618      	mov	r0, r3
 80094ea:	f002 fabe 	bl	800ba6a <SDMMC_CmdBusWidth>
 80094ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	e003      	b.n	8009502 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80094fa:	2300      	movs	r3, #0
 80094fc:	e001      	b.n	8009502 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009502:	4618      	mov	r0, r3
 8009504:	3718      	adds	r7, #24
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b086      	sub	sp, #24
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	2300      	movs	r3, #0
 8009518:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2100      	movs	r1, #0
 8009520:	4618      	mov	r0, r3
 8009522:	f002 f86f 	bl	800b604 <SDIO_GetResponse>
 8009526:	4603      	mov	r3, r0
 8009528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800952c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009530:	d102      	bne.n	8009538 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009532:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009536:	e02f      	b.n	8009598 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009538:	f107 030c 	add.w	r3, r7, #12
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f82e 	bl	80095a0 <SD_FindSCR>
 8009544:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	e023      	b.n	8009598 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d01c      	beq.n	8009594 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009562:	041b      	lsls	r3, r3, #16
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f002 fa3a 	bl	800b9e0 <SDMMC_CmdAppCommand>
 800956c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	e00f      	b.n	8009598 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2100      	movs	r1, #0
 800957e:	4618      	mov	r0, r3
 8009580:	f002 fa73 	bl	800ba6a <SDMMC_CmdBusWidth>
 8009584:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	e003      	b.n	8009598 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009590:	2300      	movs	r3, #0
 8009592:	e001      	b.n	8009598 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009594:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009598:	4618      	mov	r0, r3
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80095a0:	b590      	push	{r4, r7, lr}
 80095a2:	b08f      	sub	sp, #60	; 0x3c
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80095aa:	f7f8 fc5d 	bl	8001e68 <HAL_GetTick>
 80095ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80095b0:	2300      	movs	r3, #0
 80095b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80095b4:	2300      	movs	r3, #0
 80095b6:	60bb      	str	r3, [r7, #8]
 80095b8:	2300      	movs	r3, #0
 80095ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2108      	movs	r1, #8
 80095c6:	4618      	mov	r0, r3
 80095c8:	f002 f8de 	bl	800b788 <SDMMC_CmdBlockLength>
 80095cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	e0b2      	b.n	800973e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e0:	041b      	lsls	r3, r3, #16
 80095e2:	4619      	mov	r1, r3
 80095e4:	4610      	mov	r0, r2
 80095e6:	f002 f9fb 	bl	800b9e0 <SDMMC_CmdAppCommand>
 80095ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80095f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f4:	e0a3      	b.n	800973e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095f6:	f04f 33ff 	mov.w	r3, #4294967295
 80095fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80095fc:	2308      	movs	r3, #8
 80095fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009600:	2330      	movs	r3, #48	; 0x30
 8009602:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009604:	2302      	movs	r3, #2
 8009606:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009608:	2300      	movs	r3, #0
 800960a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800960c:	2301      	movs	r3, #1
 800960e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f107 0210 	add.w	r2, r7, #16
 8009618:	4611      	mov	r1, r2
 800961a:	4618      	mov	r0, r3
 800961c:	f002 f816 	bl	800b64c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4618      	mov	r0, r3
 8009626:	f002 fa42 	bl	800baae <SDMMC_CmdSendSCR>
 800962a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	2b00      	cmp	r3, #0
 8009630:	d02a      	beq.n	8009688 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009634:	e083      	b.n	800973e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00f      	beq.n	8009664 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6819      	ldr	r1, [r3, #0]
 8009648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	f107 0208 	add.w	r2, r7, #8
 8009650:	18d4      	adds	r4, r2, r3
 8009652:	4608      	mov	r0, r1
 8009654:	f001 ff38 	bl	800b4c8 <SDIO_ReadFIFO>
 8009658:	4603      	mov	r3, r0
 800965a:	6023      	str	r3, [r4, #0]
      index++;
 800965c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965e:	3301      	adds	r3, #1
 8009660:	637b      	str	r3, [r7, #52]	; 0x34
 8009662:	e006      	b.n	8009672 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d012      	beq.n	8009698 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009672:	f7f8 fbf9 	bl	8001e68 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009680:	d102      	bne.n	8009688 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009682:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009686:	e05a      	b.n	800973e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0cf      	beq.n	8009636 <SD_FindSCR+0x96>
 8009696:	e000      	b.n	800969a <SD_FindSCR+0xfa>
      break;
 8009698:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a0:	f003 0308 	and.w	r3, r3, #8
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2208      	movs	r2, #8
 80096ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80096b0:	2308      	movs	r3, #8
 80096b2:	e044      	b.n	800973e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d005      	beq.n	80096ce <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2202      	movs	r2, #2
 80096c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80096ca:	2302      	movs	r3, #2
 80096cc:	e037      	b.n	800973e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d4:	f003 0320 	and.w	r3, r3, #32
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d005      	beq.n	80096e8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2220      	movs	r2, #32
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80096e4:	2320      	movs	r3, #32
 80096e6:	e02a      	b.n	800973e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80096f0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	061a      	lsls	r2, r3, #24
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	021b      	lsls	r3, r3, #8
 80096fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	0a1b      	lsrs	r3, r3, #8
 8009704:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009708:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	0e1b      	lsrs	r3, r3, #24
 800970e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009712:	601a      	str	r2, [r3, #0]
    scr++;
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	3304      	adds	r3, #4
 8009718:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	061a      	lsls	r2, r3, #24
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	021b      	lsls	r3, r3, #8
 8009722:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009726:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	0a1b      	lsrs	r3, r3, #8
 800972c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009730:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	0e1b      	lsrs	r3, r3, #24
 8009736:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	373c      	adds	r7, #60	; 0x3c
 8009742:	46bd      	mov	sp, r7
 8009744:	bd90      	pop	{r4, r7, pc}

08009746 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e025      	b.n	80097a6 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7f7 f99e 	bl	8000ab0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2202      	movs	r2, #2
 8009778:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3304      	adds	r3, #4
 8009784:	4619      	mov	r1, r3
 8009786:	4610      	mov	r0, r2
 8009788:	f001 fc3c 	bl	800b004 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6818      	ldr	r0, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	461a      	mov	r2, r3
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	f001 fd42 	bl	800b220 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e0c5      	b.n	800994e <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a64      	ldr	r2, [pc, #400]	; (8009958 <HAL_TIM_Base_Init+0x1a8>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d045      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d4:	d040      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a60      	ldr	r2, [pc, #384]	; (800995c <HAL_TIM_Base_Init+0x1ac>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d03b      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a5e      	ldr	r2, [pc, #376]	; (8009960 <HAL_TIM_Base_Init+0x1b0>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d036      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a5d      	ldr	r2, [pc, #372]	; (8009964 <HAL_TIM_Base_Init+0x1b4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d031      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a5b      	ldr	r2, [pc, #364]	; (8009968 <HAL_TIM_Base_Init+0x1b8>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d02c      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a5a      	ldr	r2, [pc, #360]	; (800996c <HAL_TIM_Base_Init+0x1bc>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d027      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a58      	ldr	r2, [pc, #352]	; (8009970 <HAL_TIM_Base_Init+0x1c0>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d022      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a57      	ldr	r2, [pc, #348]	; (8009974 <HAL_TIM_Base_Init+0x1c4>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d01d      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a55      	ldr	r2, [pc, #340]	; (8009978 <HAL_TIM_Base_Init+0x1c8>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d018      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a54      	ldr	r2, [pc, #336]	; (800997c <HAL_TIM_Base_Init+0x1cc>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d013      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a52      	ldr	r2, [pc, #328]	; (8009980 <HAL_TIM_Base_Init+0x1d0>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d00e      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a51      	ldr	r2, [pc, #324]	; (8009984 <HAL_TIM_Base_Init+0x1d4>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d009      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a4f      	ldr	r2, [pc, #316]	; (8009988 <HAL_TIM_Base_Init+0x1d8>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d004      	beq.n	8009858 <HAL_TIM_Base_Init+0xa8>
 800984e:	f240 1113 	movw	r1, #275	; 0x113
 8009852:	484e      	ldr	r0, [pc, #312]	; (800998c <HAL_TIM_Base_Init+0x1dc>)
 8009854:	f7f7 fd81 	bl	800135a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d014      	beq.n	800988a <HAL_TIM_Base_Init+0xda>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	2b10      	cmp	r3, #16
 8009866:	d010      	beq.n	800988a <HAL_TIM_Base_Init+0xda>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	2b20      	cmp	r3, #32
 800986e:	d00c      	beq.n	800988a <HAL_TIM_Base_Init+0xda>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	2b40      	cmp	r3, #64	; 0x40
 8009876:	d008      	beq.n	800988a <HAL_TIM_Base_Init+0xda>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	2b60      	cmp	r3, #96	; 0x60
 800987e:	d004      	beq.n	800988a <HAL_TIM_Base_Init+0xda>
 8009880:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009884:	4841      	ldr	r0, [pc, #260]	; (800998c <HAL_TIM_Base_Init+0x1dc>)
 8009886:	f7f7 fd68 	bl	800135a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00e      	beq.n	80098b0 <HAL_TIM_Base_Init+0x100>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800989a:	d009      	beq.n	80098b0 <HAL_TIM_Base_Init+0x100>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098a4:	d004      	beq.n	80098b0 <HAL_TIM_Base_Init+0x100>
 80098a6:	f240 1115 	movw	r1, #277	; 0x115
 80098aa:	4838      	ldr	r0, [pc, #224]	; (800998c <HAL_TIM_Base_Init+0x1dc>)
 80098ac:	f7f7 fd55 	bl	800135a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d008      	beq.n	80098ca <HAL_TIM_Base_Init+0x11a>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	2b80      	cmp	r3, #128	; 0x80
 80098be:	d004      	beq.n	80098ca <HAL_TIM_Base_Init+0x11a>
 80098c0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80098c4:	4831      	ldr	r0, [pc, #196]	; (800998c <HAL_TIM_Base_Init+0x1dc>)
 80098c6:	f7f7 fd48 	bl	800135a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7f8 f90a 	bl	8001af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2202      	movs	r2, #2
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f000 fdc0 	bl	800a47c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	40010000 	.word	0x40010000
 800995c:	40000400 	.word	0x40000400
 8009960:	40000800 	.word	0x40000800
 8009964:	40000c00 	.word	0x40000c00
 8009968:	40001000 	.word	0x40001000
 800996c:	40001400 	.word	0x40001400
 8009970:	40010400 	.word	0x40010400
 8009974:	40014000 	.word	0x40014000
 8009978:	40014400 	.word	0x40014400
 800997c:	40014800 	.word	0x40014800
 8009980:	40001800 	.word	0x40001800
 8009984:	40001c00 	.word	0x40001c00
 8009988:	40002000 	.word	0x40002000
 800998c:	080141a8 	.word	0x080141a8

08009990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a51      	ldr	r2, [pc, #324]	; (8009ae4 <HAL_TIM_Base_Start_IT+0x154>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d045      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099aa:	d040      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a4d      	ldr	r2, [pc, #308]	; (8009ae8 <HAL_TIM_Base_Start_IT+0x158>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d03b      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a4c      	ldr	r2, [pc, #304]	; (8009aec <HAL_TIM_Base_Start_IT+0x15c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d036      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a4a      	ldr	r2, [pc, #296]	; (8009af0 <HAL_TIM_Base_Start_IT+0x160>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d031      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a49      	ldr	r2, [pc, #292]	; (8009af4 <HAL_TIM_Base_Start_IT+0x164>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d02c      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a47      	ldr	r2, [pc, #284]	; (8009af8 <HAL_TIM_Base_Start_IT+0x168>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d027      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a46      	ldr	r2, [pc, #280]	; (8009afc <HAL_TIM_Base_Start_IT+0x16c>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d022      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a44      	ldr	r2, [pc, #272]	; (8009b00 <HAL_TIM_Base_Start_IT+0x170>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d01d      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a43      	ldr	r2, [pc, #268]	; (8009b04 <HAL_TIM_Base_Start_IT+0x174>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d018      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a41      	ldr	r2, [pc, #260]	; (8009b08 <HAL_TIM_Base_Start_IT+0x178>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d013      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a40      	ldr	r2, [pc, #256]	; (8009b0c <HAL_TIM_Base_Start_IT+0x17c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d00e      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a3e      	ldr	r2, [pc, #248]	; (8009b10 <HAL_TIM_Base_Start_IT+0x180>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d009      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a3d      	ldr	r2, [pc, #244]	; (8009b14 <HAL_TIM_Base_Start_IT+0x184>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d004      	beq.n	8009a2e <HAL_TIM_Base_Start_IT+0x9e>
 8009a24:	f240 11cf 	movw	r1, #463	; 0x1cf
 8009a28:	483b      	ldr	r0, [pc, #236]	; (8009b18 <HAL_TIM_Base_Start_IT+0x188>)
 8009a2a:	f7f7 fc96 	bl	800135a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d001      	beq.n	8009a3e <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e04e      	b.n	8009adc <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2202      	movs	r2, #2
 8009a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f042 0201 	orr.w	r2, r2, #1
 8009a54:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a22      	ldr	r2, [pc, #136]	; (8009ae4 <HAL_TIM_Base_Start_IT+0x154>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d022      	beq.n	8009aa6 <HAL_TIM_Base_Start_IT+0x116>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a68:	d01d      	beq.n	8009aa6 <HAL_TIM_Base_Start_IT+0x116>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ae8 <HAL_TIM_Base_Start_IT+0x158>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d018      	beq.n	8009aa6 <HAL_TIM_Base_Start_IT+0x116>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a1c      	ldr	r2, [pc, #112]	; (8009aec <HAL_TIM_Base_Start_IT+0x15c>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d013      	beq.n	8009aa6 <HAL_TIM_Base_Start_IT+0x116>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a1b      	ldr	r2, [pc, #108]	; (8009af0 <HAL_TIM_Base_Start_IT+0x160>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d00e      	beq.n	8009aa6 <HAL_TIM_Base_Start_IT+0x116>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a1b      	ldr	r2, [pc, #108]	; (8009afc <HAL_TIM_Base_Start_IT+0x16c>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d009      	beq.n	8009aa6 <HAL_TIM_Base_Start_IT+0x116>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a1a      	ldr	r2, [pc, #104]	; (8009b00 <HAL_TIM_Base_Start_IT+0x170>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d004      	beq.n	8009aa6 <HAL_TIM_Base_Start_IT+0x116>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a1a      	ldr	r2, [pc, #104]	; (8009b0c <HAL_TIM_Base_Start_IT+0x17c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d111      	bne.n	8009aca <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	f003 0307 	and.w	r3, r3, #7
 8009ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2b06      	cmp	r3, #6
 8009ab6:	d010      	beq.n	8009ada <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ac8:	e007      	b.n	8009ada <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f042 0201 	orr.w	r2, r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	40010000 	.word	0x40010000
 8009ae8:	40000400 	.word	0x40000400
 8009aec:	40000800 	.word	0x40000800
 8009af0:	40000c00 	.word	0x40000c00
 8009af4:	40001000 	.word	0x40001000
 8009af8:	40001400 	.word	0x40001400
 8009afc:	40010400 	.word	0x40010400
 8009b00:	40014000 	.word	0x40014000
 8009b04:	40014400 	.word	0x40014400
 8009b08:	40014800 	.word	0x40014800
 8009b0c:	40001800 	.word	0x40001800
 8009b10:	40001c00 	.word	0x40001c00
 8009b14:	40002000 	.word	0x40002000
 8009b18:	080141a8 	.word	0x080141a8

08009b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d122      	bne.n	8009b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d11b      	bne.n	8009b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f06f 0202 	mvn.w	r2, #2
 8009b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	f003 0303 	and.w	r3, r3, #3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fc6e 	bl	800a440 <HAL_TIM_IC_CaptureCallback>
 8009b64:	e005      	b.n	8009b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fc60 	bl	800a42c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fc71 	bl	800a454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	2b04      	cmp	r3, #4
 8009b84:	d122      	bne.n	8009bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d11b      	bne.n	8009bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f06f 0204 	mvn.w	r2, #4
 8009b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fc44 	bl	800a440 <HAL_TIM_IC_CaptureCallback>
 8009bb8:	e005      	b.n	8009bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fc36 	bl	800a42c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fc47 	bl	800a454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	f003 0308 	and.w	r3, r3, #8
 8009bd6:	2b08      	cmp	r3, #8
 8009bd8:	d122      	bne.n	8009c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	f003 0308 	and.w	r3, r3, #8
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	d11b      	bne.n	8009c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f06f 0208 	mvn.w	r2, #8
 8009bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2204      	movs	r2, #4
 8009bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	f003 0303 	and.w	r3, r3, #3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fc1a 	bl	800a440 <HAL_TIM_IC_CaptureCallback>
 8009c0c:	e005      	b.n	8009c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fc0c 	bl	800a42c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fc1d 	bl	800a454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	f003 0310 	and.w	r3, r3, #16
 8009c2a:	2b10      	cmp	r3, #16
 8009c2c:	d122      	bne.n	8009c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f003 0310 	and.w	r3, r3, #16
 8009c38:	2b10      	cmp	r3, #16
 8009c3a:	d11b      	bne.n	8009c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f06f 0210 	mvn.w	r2, #16
 8009c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2208      	movs	r2, #8
 8009c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fbf0 	bl	800a440 <HAL_TIM_IC_CaptureCallback>
 8009c60:	e005      	b.n	8009c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fbe2 	bl	800a42c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fbf3 	bl	800a454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d10e      	bne.n	8009ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d107      	bne.n	8009ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f06f 0201 	mvn.w	r2, #1
 8009c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7f7 fb46 	bl	800132c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009caa:	2b80      	cmp	r3, #128	; 0x80
 8009cac:	d10e      	bne.n	8009ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb8:	2b80      	cmp	r3, #128	; 0x80
 8009cba:	d107      	bne.n	8009ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fdfa 	bl	800a8c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd6:	2b40      	cmp	r3, #64	; 0x40
 8009cd8:	d10e      	bne.n	8009cf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce4:	2b40      	cmp	r3, #64	; 0x40
 8009ce6:	d107      	bne.n	8009cf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fbb8 	bl	800a468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	d10e      	bne.n	8009d24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f003 0320 	and.w	r3, r3, #32
 8009d10:	2b20      	cmp	r3, #32
 8009d12:	d107      	bne.n	8009d24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f06f 0220 	mvn.w	r2, #32
 8009d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fdc4 	bl	800a8ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d101      	bne.n	8009d48 <HAL_TIM_ConfigClockSource+0x1c>
 8009d44:	2302      	movs	r3, #2
 8009d46:	e35c      	b.n	800a402 <HAL_TIM_ConfigClockSource+0x6d6>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2202      	movs	r2, #2
 8009d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d60:	d029      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x8a>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b70      	cmp	r3, #112	; 0x70
 8009d68:	d025      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x8a>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d72:	d020      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x8a>
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b40      	cmp	r3, #64	; 0x40
 8009d7a:	d01c      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x8a>
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b50      	cmp	r3, #80	; 0x50
 8009d82:	d018      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x8a>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2b60      	cmp	r3, #96	; 0x60
 8009d8a:	d014      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x8a>
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d010      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x8a>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b10      	cmp	r3, #16
 8009d9a:	d00c      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x8a>
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b20      	cmp	r3, #32
 8009da2:	d008      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x8a>
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b30      	cmp	r3, #48	; 0x30
 8009daa:	d004      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0x8a>
 8009dac:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8009db0:	4893      	ldr	r0, [pc, #588]	; (800a000 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009db2:	f7f7 fad2 	bl	800135a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009dc4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dcc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dde:	f000 812b 	beq.w	800a038 <HAL_TIM_ConfigClockSource+0x30c>
 8009de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009de6:	f200 82ff 	bhi.w	800a3e8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dee:	d02e      	beq.n	8009e4e <HAL_TIM_ConfigClockSource+0x122>
 8009df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df4:	f200 82f8 	bhi.w	800a3e8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009df8:	2b70      	cmp	r3, #112	; 0x70
 8009dfa:	f000 8082 	beq.w	8009f02 <HAL_TIM_ConfigClockSource+0x1d6>
 8009dfe:	2b70      	cmp	r3, #112	; 0x70
 8009e00:	f200 82f2 	bhi.w	800a3e8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009e04:	2b60      	cmp	r3, #96	; 0x60
 8009e06:	f000 81f9 	beq.w	800a1fc <HAL_TIM_ConfigClockSource+0x4d0>
 8009e0a:	2b60      	cmp	r3, #96	; 0x60
 8009e0c:	f200 82ec 	bhi.w	800a3e8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009e10:	2b50      	cmp	r3, #80	; 0x50
 8009e12:	f000 8182 	beq.w	800a11a <HAL_TIM_ConfigClockSource+0x3ee>
 8009e16:	2b50      	cmp	r3, #80	; 0x50
 8009e18:	f200 82e6 	bhi.w	800a3e8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009e1c:	2b40      	cmp	r3, #64	; 0x40
 8009e1e:	f000 824d 	beq.w	800a2bc <HAL_TIM_ConfigClockSource+0x590>
 8009e22:	2b40      	cmp	r3, #64	; 0x40
 8009e24:	f200 82e0 	bhi.w	800a3e8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009e28:	2b30      	cmp	r3, #48	; 0x30
 8009e2a:	f000 82a7 	beq.w	800a37c <HAL_TIM_ConfigClockSource+0x650>
 8009e2e:	2b30      	cmp	r3, #48	; 0x30
 8009e30:	f200 82da 	bhi.w	800a3e8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	f000 82a1 	beq.w	800a37c <HAL_TIM_ConfigClockSource+0x650>
 8009e3a:	2b20      	cmp	r3, #32
 8009e3c:	f200 82d4 	bhi.w	800a3e8 <HAL_TIM_ConfigClockSource+0x6bc>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 829b 	beq.w	800a37c <HAL_TIM_ConfigClockSource+0x650>
 8009e46:	2b10      	cmp	r3, #16
 8009e48:	f000 8298 	beq.w	800a37c <HAL_TIM_ConfigClockSource+0x650>
 8009e4c:	e2cc      	b.n	800a3e8 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a6c      	ldr	r2, [pc, #432]	; (800a004 <HAL_TIM_ConfigClockSource+0x2d8>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	f000 82ca 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e62:	f000 82c4 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a67      	ldr	r2, [pc, #412]	; (800a008 <HAL_TIM_ConfigClockSource+0x2dc>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	f000 82be 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a65      	ldr	r2, [pc, #404]	; (800a00c <HAL_TIM_ConfigClockSource+0x2e0>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	f000 82b8 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a63      	ldr	r2, [pc, #396]	; (800a010 <HAL_TIM_ConfigClockSource+0x2e4>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	f000 82b2 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a61      	ldr	r2, [pc, #388]	; (800a014 <HAL_TIM_ConfigClockSource+0x2e8>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	f000 82ac 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a5f      	ldr	r2, [pc, #380]	; (800a018 <HAL_TIM_ConfigClockSource+0x2ec>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	f000 82a6 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a5d      	ldr	r2, [pc, #372]	; (800a01c <HAL_TIM_ConfigClockSource+0x2f0>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	f000 82a0 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a5b      	ldr	r2, [pc, #364]	; (800a020 <HAL_TIM_ConfigClockSource+0x2f4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	f000 829a 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a59      	ldr	r2, [pc, #356]	; (800a024 <HAL_TIM_ConfigClockSource+0x2f8>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	f000 8294 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a57      	ldr	r2, [pc, #348]	; (800a028 <HAL_TIM_ConfigClockSource+0x2fc>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	f000 828e 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a55      	ldr	r2, [pc, #340]	; (800a02c <HAL_TIM_ConfigClockSource+0x300>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	f000 8288 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a53      	ldr	r2, [pc, #332]	; (800a030 <HAL_TIM_ConfigClockSource+0x304>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	f000 8282 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a51      	ldr	r2, [pc, #324]	; (800a034 <HAL_TIM_ConfigClockSource+0x308>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	f000 827c 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
 8009ef6:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8009efa:	4841      	ldr	r0, [pc, #260]	; (800a000 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009efc:	f7f7 fa2d 	bl	800135a <assert_failed>
      break;
 8009f00:	e275      	b.n	800a3ee <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a3f      	ldr	r2, [pc, #252]	; (800a004 <HAL_TIM_ConfigClockSource+0x2d8>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d027      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x230>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f14:	d022      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x230>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a3b      	ldr	r2, [pc, #236]	; (800a008 <HAL_TIM_ConfigClockSource+0x2dc>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d01d      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x230>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a39      	ldr	r2, [pc, #228]	; (800a00c <HAL_TIM_ConfigClockSource+0x2e0>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d018      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x230>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a38      	ldr	r2, [pc, #224]	; (800a010 <HAL_TIM_ConfigClockSource+0x2e4>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d013      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x230>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a38      	ldr	r2, [pc, #224]	; (800a01c <HAL_TIM_ConfigClockSource+0x2f0>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d00e      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x230>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a37      	ldr	r2, [pc, #220]	; (800a020 <HAL_TIM_ConfigClockSource+0x2f4>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d009      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x230>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a37      	ldr	r2, [pc, #220]	; (800a02c <HAL_TIM_ConfigClockSource+0x300>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d004      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0x230>
 8009f52:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8009f56:	482a      	ldr	r0, [pc, #168]	; (800a000 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009f58:	f7f7 f9ff 	bl	800135a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d013      	beq.n	8009f8c <HAL_TIM_ConfigClockSource+0x260>
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f6c:	d00e      	beq.n	8009f8c <HAL_TIM_ConfigClockSource+0x260>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f76:	d009      	beq.n	8009f8c <HAL_TIM_ConfigClockSource+0x260>
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f80:	d004      	beq.n	8009f8c <HAL_TIM_ConfigClockSource+0x260>
 8009f82:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8009f86:	481e      	ldr	r0, [pc, #120]	; (800a000 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009f88:	f7f7 f9e7 	bl	800135a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f94:	d014      	beq.n	8009fc0 <HAL_TIM_ConfigClockSource+0x294>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d010      	beq.n	8009fc0 <HAL_TIM_ConfigClockSource+0x294>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00c      	beq.n	8009fc0 <HAL_TIM_ConfigClockSource+0x294>
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d008      	beq.n	8009fc0 <HAL_TIM_ConfigClockSource+0x294>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	2b0a      	cmp	r3, #10
 8009fb4:	d004      	beq.n	8009fc0 <HAL_TIM_ConfigClockSource+0x294>
 8009fb6:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8009fba:	4811      	ldr	r0, [pc, #68]	; (800a000 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009fbc:	f7f7 f9cd 	bl	800135a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	2b0f      	cmp	r3, #15
 8009fc6:	d904      	bls.n	8009fd2 <HAL_TIM_ConfigClockSource+0x2a6>
 8009fc8:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8009fcc:	480c      	ldr	r0, [pc, #48]	; (800a000 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009fce:	f7f7 f9c4 	bl	800135a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6818      	ldr	r0, [r3, #0]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	6899      	ldr	r1, [r3, #8]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f000 fb65 	bl	800a6b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	609a      	str	r2, [r3, #8]
      break;
 8009ffe:	e1f7      	b.n	800a3f0 <HAL_TIM_ConfigClockSource+0x6c4>
 800a000:	080141a8 	.word	0x080141a8
 800a004:	40010000 	.word	0x40010000
 800a008:	40000400 	.word	0x40000400
 800a00c:	40000800 	.word	0x40000800
 800a010:	40000c00 	.word	0x40000c00
 800a014:	40001000 	.word	0x40001000
 800a018:	40001400 	.word	0x40001400
 800a01c:	40010400 	.word	0x40010400
 800a020:	40014000 	.word	0x40014000
 800a024:	40014400 	.word	0x40014400
 800a028:	40014800 	.word	0x40014800
 800a02c:	40001800 	.word	0x40001800
 800a030:	40001c00 	.word	0x40001c00
 800a034:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a67      	ldr	r2, [pc, #412]	; (800a1dc <HAL_TIM_ConfigClockSource+0x4b0>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d01d      	beq.n	800a07e <HAL_TIM_ConfigClockSource+0x352>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a04a:	d018      	beq.n	800a07e <HAL_TIM_ConfigClockSource+0x352>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a63      	ldr	r2, [pc, #396]	; (800a1e0 <HAL_TIM_ConfigClockSource+0x4b4>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d013      	beq.n	800a07e <HAL_TIM_ConfigClockSource+0x352>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a62      	ldr	r2, [pc, #392]	; (800a1e4 <HAL_TIM_ConfigClockSource+0x4b8>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d00e      	beq.n	800a07e <HAL_TIM_ConfigClockSource+0x352>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a60      	ldr	r2, [pc, #384]	; (800a1e8 <HAL_TIM_ConfigClockSource+0x4bc>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d009      	beq.n	800a07e <HAL_TIM_ConfigClockSource+0x352>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a5f      	ldr	r2, [pc, #380]	; (800a1ec <HAL_TIM_ConfigClockSource+0x4c0>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d004      	beq.n	800a07e <HAL_TIM_ConfigClockSource+0x352>
 800a074:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800a078:	485d      	ldr	r0, [pc, #372]	; (800a1f0 <HAL_TIM_ConfigClockSource+0x4c4>)
 800a07a:	f7f7 f96e 	bl	800135a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d013      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0x382>
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a08e:	d00e      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0x382>
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a098:	d009      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0x382>
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0a2:	d004      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0x382>
 800a0a4:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800a0a8:	4851      	ldr	r0, [pc, #324]	; (800a1f0 <HAL_TIM_ConfigClockSource+0x4c4>)
 800a0aa:	f7f7 f956 	bl	800135a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0b6:	d014      	beq.n	800a0e2 <HAL_TIM_ConfigClockSource+0x3b6>
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d010      	beq.n	800a0e2 <HAL_TIM_ConfigClockSource+0x3b6>
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00c      	beq.n	800a0e2 <HAL_TIM_ConfigClockSource+0x3b6>
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d008      	beq.n	800a0e2 <HAL_TIM_ConfigClockSource+0x3b6>
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	2b0a      	cmp	r3, #10
 800a0d6:	d004      	beq.n	800a0e2 <HAL_TIM_ConfigClockSource+0x3b6>
 800a0d8:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800a0dc:	4844      	ldr	r0, [pc, #272]	; (800a1f0 <HAL_TIM_ConfigClockSource+0x4c4>)
 800a0de:	f7f7 f93c 	bl	800135a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	2b0f      	cmp	r3, #15
 800a0e8:	d904      	bls.n	800a0f4 <HAL_TIM_ConfigClockSource+0x3c8>
 800a0ea:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800a0ee:	4840      	ldr	r0, [pc, #256]	; (800a1f0 <HAL_TIM_ConfigClockSource+0x4c4>)
 800a0f0:	f7f7 f933 	bl	800135a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6818      	ldr	r0, [r3, #0]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	6899      	ldr	r1, [r3, #8]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	f000 fad4 	bl	800a6b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	689a      	ldr	r2, [r3, #8]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a116:	609a      	str	r2, [r3, #8]
      break;
 800a118:	e16a      	b.n	800a3f0 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a2f      	ldr	r2, [pc, #188]	; (800a1dc <HAL_TIM_ConfigClockSource+0x4b0>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d027      	beq.n	800a174 <HAL_TIM_ConfigClockSource+0x448>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a12c:	d022      	beq.n	800a174 <HAL_TIM_ConfigClockSource+0x448>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a2b      	ldr	r2, [pc, #172]	; (800a1e0 <HAL_TIM_ConfigClockSource+0x4b4>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d01d      	beq.n	800a174 <HAL_TIM_ConfigClockSource+0x448>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a29      	ldr	r2, [pc, #164]	; (800a1e4 <HAL_TIM_ConfigClockSource+0x4b8>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d018      	beq.n	800a174 <HAL_TIM_ConfigClockSource+0x448>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a28      	ldr	r2, [pc, #160]	; (800a1e8 <HAL_TIM_ConfigClockSource+0x4bc>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d013      	beq.n	800a174 <HAL_TIM_ConfigClockSource+0x448>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a26      	ldr	r2, [pc, #152]	; (800a1ec <HAL_TIM_ConfigClockSource+0x4c0>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d00e      	beq.n	800a174 <HAL_TIM_ConfigClockSource+0x448>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a26      	ldr	r2, [pc, #152]	; (800a1f4 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d009      	beq.n	800a174 <HAL_TIM_ConfigClockSource+0x448>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a24      	ldr	r2, [pc, #144]	; (800a1f8 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d004      	beq.n	800a174 <HAL_TIM_ConfigClockSource+0x448>
 800a16a:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800a16e:	4820      	ldr	r0, [pc, #128]	; (800a1f0 <HAL_TIM_ConfigClockSource+0x4c4>)
 800a170:	f7f7 f8f3 	bl	800135a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a17c:	d014      	beq.n	800a1a8 <HAL_TIM_ConfigClockSource+0x47c>
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d010      	beq.n	800a1a8 <HAL_TIM_ConfigClockSource+0x47c>
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00c      	beq.n	800a1a8 <HAL_TIM_ConfigClockSource+0x47c>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	2b02      	cmp	r3, #2
 800a194:	d008      	beq.n	800a1a8 <HAL_TIM_ConfigClockSource+0x47c>
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	2b0a      	cmp	r3, #10
 800a19c:	d004      	beq.n	800a1a8 <HAL_TIM_ConfigClockSource+0x47c>
 800a19e:	f241 41f9 	movw	r1, #5369	; 0x14f9
 800a1a2:	4813      	ldr	r0, [pc, #76]	; (800a1f0 <HAL_TIM_ConfigClockSource+0x4c4>)
 800a1a4:	f7f7 f8d9 	bl	800135a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	2b0f      	cmp	r3, #15
 800a1ae:	d904      	bls.n	800a1ba <HAL_TIM_ConfigClockSource+0x48e>
 800a1b0:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800a1b4:	480e      	ldr	r0, [pc, #56]	; (800a1f0 <HAL_TIM_ConfigClockSource+0x4c4>)
 800a1b6:	f7f7 f8d0 	bl	800135a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	6859      	ldr	r1, [r3, #4]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f000 f9f8 	bl	800a5bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2150      	movs	r1, #80	; 0x50
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 fa51 	bl	800a67a <TIM_ITRx_SetConfig>
      break;
 800a1d8:	e10a      	b.n	800a3f0 <HAL_TIM_ConfigClockSource+0x6c4>
 800a1da:	bf00      	nop
 800a1dc:	40010000 	.word	0x40010000
 800a1e0:	40000400 	.word	0x40000400
 800a1e4:	40000800 	.word	0x40000800
 800a1e8:	40000c00 	.word	0x40000c00
 800a1ec:	40010400 	.word	0x40010400
 800a1f0:	080141a8 	.word	0x080141a8
 800a1f4:	40014000 	.word	0x40014000
 800a1f8:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a82      	ldr	r2, [pc, #520]	; (800a40c <HAL_TIM_ConfigClockSource+0x6e0>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d027      	beq.n	800a256 <HAL_TIM_ConfigClockSource+0x52a>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a20e:	d022      	beq.n	800a256 <HAL_TIM_ConfigClockSource+0x52a>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a7e      	ldr	r2, [pc, #504]	; (800a410 <HAL_TIM_ConfigClockSource+0x6e4>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d01d      	beq.n	800a256 <HAL_TIM_ConfigClockSource+0x52a>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a7d      	ldr	r2, [pc, #500]	; (800a414 <HAL_TIM_ConfigClockSource+0x6e8>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d018      	beq.n	800a256 <HAL_TIM_ConfigClockSource+0x52a>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a7b      	ldr	r2, [pc, #492]	; (800a418 <HAL_TIM_ConfigClockSource+0x6ec>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d013      	beq.n	800a256 <HAL_TIM_ConfigClockSource+0x52a>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a7a      	ldr	r2, [pc, #488]	; (800a41c <HAL_TIM_ConfigClockSource+0x6f0>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d00e      	beq.n	800a256 <HAL_TIM_ConfigClockSource+0x52a>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a78      	ldr	r2, [pc, #480]	; (800a420 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d009      	beq.n	800a256 <HAL_TIM_ConfigClockSource+0x52a>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a77      	ldr	r2, [pc, #476]	; (800a424 <HAL_TIM_ConfigClockSource+0x6f8>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d004      	beq.n	800a256 <HAL_TIM_ConfigClockSource+0x52a>
 800a24c:	f241 5106 	movw	r1, #5382	; 0x1506
 800a250:	4875      	ldr	r0, [pc, #468]	; (800a428 <HAL_TIM_ConfigClockSource+0x6fc>)
 800a252:	f7f7 f882 	bl	800135a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a25e:	d014      	beq.n	800a28a <HAL_TIM_ConfigClockSource+0x55e>
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d010      	beq.n	800a28a <HAL_TIM_ConfigClockSource+0x55e>
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00c      	beq.n	800a28a <HAL_TIM_ConfigClockSource+0x55e>
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	2b02      	cmp	r3, #2
 800a276:	d008      	beq.n	800a28a <HAL_TIM_ConfigClockSource+0x55e>
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	2b0a      	cmp	r3, #10
 800a27e:	d004      	beq.n	800a28a <HAL_TIM_ConfigClockSource+0x55e>
 800a280:	f241 5109 	movw	r1, #5385	; 0x1509
 800a284:	4868      	ldr	r0, [pc, #416]	; (800a428 <HAL_TIM_ConfigClockSource+0x6fc>)
 800a286:	f7f7 f868 	bl	800135a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	2b0f      	cmp	r3, #15
 800a290:	d904      	bls.n	800a29c <HAL_TIM_ConfigClockSource+0x570>
 800a292:	f241 510a 	movw	r1, #5386	; 0x150a
 800a296:	4864      	ldr	r0, [pc, #400]	; (800a428 <HAL_TIM_ConfigClockSource+0x6fc>)
 800a298:	f7f7 f85f 	bl	800135a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6818      	ldr	r0, [r3, #0]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	6859      	ldr	r1, [r3, #4]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	f000 f9b6 	bl	800a61a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2160      	movs	r1, #96	; 0x60
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 f9e0 	bl	800a67a <TIM_ITRx_SetConfig>
      break;
 800a2ba:	e099      	b.n	800a3f0 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a52      	ldr	r2, [pc, #328]	; (800a40c <HAL_TIM_ConfigClockSource+0x6e0>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d027      	beq.n	800a316 <HAL_TIM_ConfigClockSource+0x5ea>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ce:	d022      	beq.n	800a316 <HAL_TIM_ConfigClockSource+0x5ea>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a4e      	ldr	r2, [pc, #312]	; (800a410 <HAL_TIM_ConfigClockSource+0x6e4>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d01d      	beq.n	800a316 <HAL_TIM_ConfigClockSource+0x5ea>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a4d      	ldr	r2, [pc, #308]	; (800a414 <HAL_TIM_ConfigClockSource+0x6e8>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d018      	beq.n	800a316 <HAL_TIM_ConfigClockSource+0x5ea>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a4b      	ldr	r2, [pc, #300]	; (800a418 <HAL_TIM_ConfigClockSource+0x6ec>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d013      	beq.n	800a316 <HAL_TIM_ConfigClockSource+0x5ea>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a4a      	ldr	r2, [pc, #296]	; (800a41c <HAL_TIM_ConfigClockSource+0x6f0>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d00e      	beq.n	800a316 <HAL_TIM_ConfigClockSource+0x5ea>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a48      	ldr	r2, [pc, #288]	; (800a420 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d009      	beq.n	800a316 <HAL_TIM_ConfigClockSource+0x5ea>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a47      	ldr	r2, [pc, #284]	; (800a424 <HAL_TIM_ConfigClockSource+0x6f8>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d004      	beq.n	800a316 <HAL_TIM_ConfigClockSource+0x5ea>
 800a30c:	f241 5116 	movw	r1, #5398	; 0x1516
 800a310:	4845      	ldr	r0, [pc, #276]	; (800a428 <HAL_TIM_ConfigClockSource+0x6fc>)
 800a312:	f7f7 f822 	bl	800135a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a31e:	d014      	beq.n	800a34a <HAL_TIM_ConfigClockSource+0x61e>
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d010      	beq.n	800a34a <HAL_TIM_ConfigClockSource+0x61e>
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00c      	beq.n	800a34a <HAL_TIM_ConfigClockSource+0x61e>
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	2b02      	cmp	r3, #2
 800a336:	d008      	beq.n	800a34a <HAL_TIM_ConfigClockSource+0x61e>
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	2b0a      	cmp	r3, #10
 800a33e:	d004      	beq.n	800a34a <HAL_TIM_ConfigClockSource+0x61e>
 800a340:	f241 5119 	movw	r1, #5401	; 0x1519
 800a344:	4838      	ldr	r0, [pc, #224]	; (800a428 <HAL_TIM_ConfigClockSource+0x6fc>)
 800a346:	f7f7 f808 	bl	800135a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	2b0f      	cmp	r3, #15
 800a350:	d904      	bls.n	800a35c <HAL_TIM_ConfigClockSource+0x630>
 800a352:	f241 511a 	movw	r1, #5402	; 0x151a
 800a356:	4834      	ldr	r0, [pc, #208]	; (800a428 <HAL_TIM_ConfigClockSource+0x6fc>)
 800a358:	f7f6 ffff 	bl	800135a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6818      	ldr	r0, [r3, #0]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	6859      	ldr	r1, [r3, #4]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	461a      	mov	r2, r3
 800a36a:	f000 f927 	bl	800a5bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2140      	movs	r1, #64	; 0x40
 800a374:	4618      	mov	r0, r3
 800a376:	f000 f980 	bl	800a67a <TIM_ITRx_SetConfig>
      break;
 800a37a:	e039      	b.n	800a3f0 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a22      	ldr	r2, [pc, #136]	; (800a40c <HAL_TIM_ConfigClockSource+0x6e0>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d027      	beq.n	800a3d6 <HAL_TIM_ConfigClockSource+0x6aa>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a38e:	d022      	beq.n	800a3d6 <HAL_TIM_ConfigClockSource+0x6aa>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a1e      	ldr	r2, [pc, #120]	; (800a410 <HAL_TIM_ConfigClockSource+0x6e4>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d01d      	beq.n	800a3d6 <HAL_TIM_ConfigClockSource+0x6aa>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a1d      	ldr	r2, [pc, #116]	; (800a414 <HAL_TIM_ConfigClockSource+0x6e8>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d018      	beq.n	800a3d6 <HAL_TIM_ConfigClockSource+0x6aa>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1b      	ldr	r2, [pc, #108]	; (800a418 <HAL_TIM_ConfigClockSource+0x6ec>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d013      	beq.n	800a3d6 <HAL_TIM_ConfigClockSource+0x6aa>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a1a      	ldr	r2, [pc, #104]	; (800a41c <HAL_TIM_ConfigClockSource+0x6f0>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d00e      	beq.n	800a3d6 <HAL_TIM_ConfigClockSource+0x6aa>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a18      	ldr	r2, [pc, #96]	; (800a420 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d009      	beq.n	800a3d6 <HAL_TIM_ConfigClockSource+0x6aa>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a17      	ldr	r2, [pc, #92]	; (800a424 <HAL_TIM_ConfigClockSource+0x6f8>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d004      	beq.n	800a3d6 <HAL_TIM_ConfigClockSource+0x6aa>
 800a3cc:	f241 5129 	movw	r1, #5417	; 0x1529
 800a3d0:	4815      	ldr	r0, [pc, #84]	; (800a428 <HAL_TIM_ConfigClockSource+0x6fc>)
 800a3d2:	f7f6 ffc2 	bl	800135a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	f000 f94a 	bl	800a67a <TIM_ITRx_SetConfig>
      break;
 800a3e6:	e003      	b.n	800a3f0 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ec:	e000      	b.n	800a3f0 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 800a3ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a400:	7bfb      	ldrb	r3, [r7, #15]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	40010000 	.word	0x40010000
 800a410:	40000400 	.word	0x40000400
 800a414:	40000800 	.word	0x40000800
 800a418:	40000c00 	.word	0x40000c00
 800a41c:	40010400 	.word	0x40010400
 800a420:	40014000 	.word	0x40014000
 800a424:	40001800 	.word	0x40001800
 800a428:	080141a8 	.word	0x080141a8

0800a42c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a40      	ldr	r2, [pc, #256]	; (800a590 <TIM_Base_SetConfig+0x114>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d013      	beq.n	800a4bc <TIM_Base_SetConfig+0x40>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a49a:	d00f      	beq.n	800a4bc <TIM_Base_SetConfig+0x40>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a3d      	ldr	r2, [pc, #244]	; (800a594 <TIM_Base_SetConfig+0x118>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d00b      	beq.n	800a4bc <TIM_Base_SetConfig+0x40>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a3c      	ldr	r2, [pc, #240]	; (800a598 <TIM_Base_SetConfig+0x11c>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d007      	beq.n	800a4bc <TIM_Base_SetConfig+0x40>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a3b      	ldr	r2, [pc, #236]	; (800a59c <TIM_Base_SetConfig+0x120>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d003      	beq.n	800a4bc <TIM_Base_SetConfig+0x40>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a3a      	ldr	r2, [pc, #232]	; (800a5a0 <TIM_Base_SetConfig+0x124>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d108      	bne.n	800a4ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a2f      	ldr	r2, [pc, #188]	; (800a590 <TIM_Base_SetConfig+0x114>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d02b      	beq.n	800a52e <TIM_Base_SetConfig+0xb2>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4dc:	d027      	beq.n	800a52e <TIM_Base_SetConfig+0xb2>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a2c      	ldr	r2, [pc, #176]	; (800a594 <TIM_Base_SetConfig+0x118>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d023      	beq.n	800a52e <TIM_Base_SetConfig+0xb2>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a2b      	ldr	r2, [pc, #172]	; (800a598 <TIM_Base_SetConfig+0x11c>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d01f      	beq.n	800a52e <TIM_Base_SetConfig+0xb2>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a2a      	ldr	r2, [pc, #168]	; (800a59c <TIM_Base_SetConfig+0x120>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d01b      	beq.n	800a52e <TIM_Base_SetConfig+0xb2>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a29      	ldr	r2, [pc, #164]	; (800a5a0 <TIM_Base_SetConfig+0x124>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d017      	beq.n	800a52e <TIM_Base_SetConfig+0xb2>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a28      	ldr	r2, [pc, #160]	; (800a5a4 <TIM_Base_SetConfig+0x128>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d013      	beq.n	800a52e <TIM_Base_SetConfig+0xb2>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a27      	ldr	r2, [pc, #156]	; (800a5a8 <TIM_Base_SetConfig+0x12c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d00f      	beq.n	800a52e <TIM_Base_SetConfig+0xb2>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a26      	ldr	r2, [pc, #152]	; (800a5ac <TIM_Base_SetConfig+0x130>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d00b      	beq.n	800a52e <TIM_Base_SetConfig+0xb2>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a25      	ldr	r2, [pc, #148]	; (800a5b0 <TIM_Base_SetConfig+0x134>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d007      	beq.n	800a52e <TIM_Base_SetConfig+0xb2>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a24      	ldr	r2, [pc, #144]	; (800a5b4 <TIM_Base_SetConfig+0x138>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d003      	beq.n	800a52e <TIM_Base_SetConfig+0xb2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a23      	ldr	r2, [pc, #140]	; (800a5b8 <TIM_Base_SetConfig+0x13c>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d108      	bne.n	800a540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	689a      	ldr	r2, [r3, #8]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a0a      	ldr	r2, [pc, #40]	; (800a590 <TIM_Base_SetConfig+0x114>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d003      	beq.n	800a574 <TIM_Base_SetConfig+0xf8>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a0c      	ldr	r2, [pc, #48]	; (800a5a0 <TIM_Base_SetConfig+0x124>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d103      	bne.n	800a57c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	691a      	ldr	r2, [r3, #16]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	615a      	str	r2, [r3, #20]
}
 800a582:	bf00      	nop
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	40010000 	.word	0x40010000
 800a594:	40000400 	.word	0x40000400
 800a598:	40000800 	.word	0x40000800
 800a59c:	40000c00 	.word	0x40000c00
 800a5a0:	40010400 	.word	0x40010400
 800a5a4:	40014000 	.word	0x40014000
 800a5a8:	40014400 	.word	0x40014400
 800a5ac:	40014800 	.word	0x40014800
 800a5b0:	40001800 	.word	0x40001800
 800a5b4:	40001c00 	.word	0x40001c00
 800a5b8:	40002000 	.word	0x40002000

0800a5bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b087      	sub	sp, #28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6a1b      	ldr	r3, [r3, #32]
 800a5cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	f023 0201 	bic.w	r2, r3, #1
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	011b      	lsls	r3, r3, #4
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f023 030a 	bic.w	r3, r3, #10
 800a5f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	621a      	str	r2, [r3, #32]
}
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b087      	sub	sp, #28
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	f023 0210 	bic.w	r2, r3, #16
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	031b      	lsls	r3, r3, #12
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a656:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	011b      	lsls	r3, r3, #4
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	4313      	orrs	r3, r2
 800a660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	697a      	ldr	r2, [r7, #20]
 800a666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	621a      	str	r2, [r3, #32]
}
 800a66e:	bf00      	nop
 800a670:	371c      	adds	r7, #28
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b085      	sub	sp, #20
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	f043 0307 	orr.w	r3, r3, #7
 800a69c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	609a      	str	r2, [r3, #8]
}
 800a6a4:	bf00      	nop
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	021a      	lsls	r2, r3, #8
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	609a      	str	r2, [r3, #8]
}
 800a6e4:	bf00      	nop
 800a6e6:	371c      	adds	r7, #28
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a61      	ldr	r2, [pc, #388]	; (800a884 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d027      	beq.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a70c:	d022      	beq.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a5d      	ldr	r2, [pc, #372]	; (800a888 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d01d      	beq.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a5b      	ldr	r2, [pc, #364]	; (800a88c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d018      	beq.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a5a      	ldr	r2, [pc, #360]	; (800a890 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d013      	beq.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a58      	ldr	r2, [pc, #352]	; (800a894 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d00e      	beq.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a57      	ldr	r2, [pc, #348]	; (800a898 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d009      	beq.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a55      	ldr	r2, [pc, #340]	; (800a89c <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d004      	beq.n	800a754 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a74a:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800a74e:	4854      	ldr	r0, [pc, #336]	; (800a8a0 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a750:	f7f6 fe03 	bl	800135a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d020      	beq.n	800a79e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b10      	cmp	r3, #16
 800a762:	d01c      	beq.n	800a79e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b20      	cmp	r3, #32
 800a76a:	d018      	beq.n	800a79e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b30      	cmp	r3, #48	; 0x30
 800a772:	d014      	beq.n	800a79e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b40      	cmp	r3, #64	; 0x40
 800a77a:	d010      	beq.n	800a79e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b50      	cmp	r3, #80	; 0x50
 800a782:	d00c      	beq.n	800a79e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b60      	cmp	r3, #96	; 0x60
 800a78a:	d008      	beq.n	800a79e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b70      	cmp	r3, #112	; 0x70
 800a792:	d004      	beq.n	800a79e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a794:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800a798:	4841      	ldr	r0, [pc, #260]	; (800a8a0 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a79a:	f7f6 fdde 	bl	800135a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	2b80      	cmp	r3, #128	; 0x80
 800a7a4:	d008      	beq.n	800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d004      	beq.n	800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7ae:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800a7b2:	483b      	ldr	r0, [pc, #236]	; (800a8a0 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a7b4:	f7f6 fdd1 	bl	800135a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d101      	bne.n	800a7c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	e05a      	b.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a1f      	ldr	r2, [pc, #124]	; (800a884 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d022      	beq.n	800a850 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a812:	d01d      	beq.n	800a850 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a1b      	ldr	r2, [pc, #108]	; (800a888 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d018      	beq.n	800a850 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a1a      	ldr	r2, [pc, #104]	; (800a88c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d013      	beq.n	800a850 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a18      	ldr	r2, [pc, #96]	; (800a890 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d00e      	beq.n	800a850 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a19      	ldr	r2, [pc, #100]	; (800a89c <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d009      	beq.n	800a850 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a18      	ldr	r2, [pc, #96]	; (800a8a4 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d004      	beq.n	800a850 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a17      	ldr	r2, [pc, #92]	; (800a8a8 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d10c      	bne.n	800a86a <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a856:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	4313      	orrs	r3, r2
 800a860:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	40010000 	.word	0x40010000
 800a888:	40000400 	.word	0x40000400
 800a88c:	40000800 	.word	0x40000800
 800a890:	40000c00 	.word	0x40000c00
 800a894:	40001000 	.word	0x40001000
 800a898:	40001400 	.word	0x40001400
 800a89c:	40010400 	.word	0x40010400
 800a8a0:	080141e0 	.word	0x080141e0
 800a8a4:	40014000 	.word	0x40014000
 800a8a8:	40001800 	.word	0x40001800

0800a8ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e0be      	b.n	800aa64 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d031      	beq.n	800a952 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a5e      	ldr	r2, [pc, #376]	; (800aa6c <HAL_UART_Init+0x198>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d013      	beq.n	800a920 <HAL_UART_Init+0x4c>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a5c      	ldr	r2, [pc, #368]	; (800aa70 <HAL_UART_Init+0x19c>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d00e      	beq.n	800a920 <HAL_UART_Init+0x4c>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a5b      	ldr	r2, [pc, #364]	; (800aa74 <HAL_UART_Init+0x1a0>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d009      	beq.n	800a920 <HAL_UART_Init+0x4c>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a59      	ldr	r2, [pc, #356]	; (800aa78 <HAL_UART_Init+0x1a4>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d004      	beq.n	800a920 <HAL_UART_Init+0x4c>
 800a916:	f240 1173 	movw	r1, #371	; 0x173
 800a91a:	4858      	ldr	r0, [pc, #352]	; (800aa7c <HAL_UART_Init+0x1a8>)
 800a91c:	f7f6 fd1d 	bl	800135a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d041      	beq.n	800a9ac <HAL_UART_Init+0xd8>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a930:	d03c      	beq.n	800a9ac <HAL_UART_Init+0xd8>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a93a:	d037      	beq.n	800a9ac <HAL_UART_Init+0xd8>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a944:	d032      	beq.n	800a9ac <HAL_UART_Init+0xd8>
 800a946:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800a94a:	484c      	ldr	r0, [pc, #304]	; (800aa7c <HAL_UART_Init+0x1a8>)
 800a94c:	f7f6 fd05 	bl	800135a <assert_failed>
 800a950:	e02c      	b.n	800a9ac <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a45      	ldr	r2, [pc, #276]	; (800aa6c <HAL_UART_Init+0x198>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d027      	beq.n	800a9ac <HAL_UART_Init+0xd8>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a43      	ldr	r2, [pc, #268]	; (800aa70 <HAL_UART_Init+0x19c>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d022      	beq.n	800a9ac <HAL_UART_Init+0xd8>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a42      	ldr	r2, [pc, #264]	; (800aa74 <HAL_UART_Init+0x1a0>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d01d      	beq.n	800a9ac <HAL_UART_Init+0xd8>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a42      	ldr	r2, [pc, #264]	; (800aa80 <HAL_UART_Init+0x1ac>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d018      	beq.n	800a9ac <HAL_UART_Init+0xd8>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a41      	ldr	r2, [pc, #260]	; (800aa84 <HAL_UART_Init+0x1b0>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d013      	beq.n	800a9ac <HAL_UART_Init+0xd8>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a3b      	ldr	r2, [pc, #236]	; (800aa78 <HAL_UART_Init+0x1a4>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d00e      	beq.n	800a9ac <HAL_UART_Init+0xd8>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a3d      	ldr	r2, [pc, #244]	; (800aa88 <HAL_UART_Init+0x1b4>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d009      	beq.n	800a9ac <HAL_UART_Init+0xd8>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a3b      	ldr	r2, [pc, #236]	; (800aa8c <HAL_UART_Init+0x1b8>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d004      	beq.n	800a9ac <HAL_UART_Init+0xd8>
 800a9a2:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800a9a6:	4835      	ldr	r0, [pc, #212]	; (800aa7c <HAL_UART_Init+0x1a8>)
 800a9a8:	f7f6 fcd7 	bl	800135a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d009      	beq.n	800a9c8 <HAL_UART_Init+0xf4>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9bc:	d004      	beq.n	800a9c8 <HAL_UART_Init+0xf4>
 800a9be:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800a9c2:	482e      	ldr	r0, [pc, #184]	; (800aa7c <HAL_UART_Init+0x1a8>)
 800a9c4:	f7f6 fcc9 	bl	800135a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	69db      	ldr	r3, [r3, #28]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d009      	beq.n	800a9e4 <HAL_UART_Init+0x110>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	69db      	ldr	r3, [r3, #28]
 800a9d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9d8:	d004      	beq.n	800a9e4 <HAL_UART_Init+0x110>
 800a9da:	f240 117b 	movw	r1, #379	; 0x17b
 800a9de:	4827      	ldr	r0, [pc, #156]	; (800aa7c <HAL_UART_Init+0x1a8>)
 800a9e0:	f7f6 fcbb 	bl	800135a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d106      	bne.n	800a9fe <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7f7 f8f3 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2224      	movs	r2, #36	; 0x24
 800aa02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68da      	ldr	r2, [r3, #12]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa14:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f83a 	bl	800aa90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	691a      	ldr	r2, [r3, #16]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	695a      	ldr	r2, [r3, #20]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa3a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68da      	ldr	r2, [r3, #12]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa4a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2220      	movs	r2, #32
 800aa56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2220      	movs	r2, #32
 800aa5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	40011000 	.word	0x40011000
 800aa70:	40004400 	.word	0x40004400
 800aa74:	40004800 	.word	0x40004800
 800aa78:	40011400 	.word	0x40011400
 800aa7c:	0801421c 	.word	0x0801421c
 800aa80:	40004c00 	.word	0x40004c00
 800aa84:	40005000 	.word	0x40005000
 800aa88:	40007800 	.word	0x40007800
 800aa8c:	40007c00 	.word	0x40007c00

0800aa90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa94:	b0c0      	sub	sp, #256	; 0x100
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800aa9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	4bcf      	ldr	r3, [pc, #828]	; (800ade0 <UART_SetConfig+0x350>)
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d904      	bls.n	800aab2 <UART_SetConfig+0x22>
 800aaa8:	f640 6161 	movw	r1, #3681	; 0xe61
 800aaac:	48cd      	ldr	r0, [pc, #820]	; (800ade4 <UART_SetConfig+0x354>)
 800aaae:	f7f6 fc54 	bl	800135a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800aab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00a      	beq.n	800aad2 <UART_SetConfig+0x42>
 800aabc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac6:	d004      	beq.n	800aad2 <UART_SetConfig+0x42>
 800aac8:	f640 6162 	movw	r1, #3682	; 0xe62
 800aacc:	48c5      	ldr	r0, [pc, #788]	; (800ade4 <UART_SetConfig+0x354>)
 800aace:	f7f6 fc44 	bl	800135a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800aad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d010      	beq.n	800aafe <UART_SetConfig+0x6e>
 800aadc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aae6:	d00a      	beq.n	800aafe <UART_SetConfig+0x6e>
 800aae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800aaf2:	d004      	beq.n	800aafe <UART_SetConfig+0x6e>
 800aaf4:	f640 6163 	movw	r1, #3683	; 0xe63
 800aaf8:	48ba      	ldr	r0, [pc, #744]	; (800ade4 <UART_SetConfig+0x354>)
 800aafa:	f7f6 fc2e 	bl	800135a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800aafe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab02:	695a      	ldr	r2, [r3, #20]
 800ab04:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800ab08:	4013      	ands	r3, r2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d104      	bne.n	800ab18 <UART_SetConfig+0x88>
 800ab0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d104      	bne.n	800ab22 <UART_SetConfig+0x92>
 800ab18:	f640 6164 	movw	r1, #3684	; 0xe64
 800ab1c:	48b1      	ldr	r0, [pc, #708]	; (800ade4 <UART_SetConfig+0x354>)
 800ab1e:	f7f6 fc1c 	bl	800135a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ab2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab32:	68d9      	ldr	r1, [r3, #12]
 800ab34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	ea40 0301 	orr.w	r3, r0, r1
 800ab3e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ab40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab44:	689a      	ldr	r2, [r3, #8]
 800ab46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab52:	695b      	ldr	r3, [r3, #20]
 800ab54:	431a      	orrs	r2, r3
 800ab56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab5a:	69db      	ldr	r3, [r3, #28]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ab62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ab6e:	f021 010c 	bic.w	r1, r1, #12
 800ab72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab7c:	430b      	orrs	r3, r1
 800ab7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ab8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab90:	6999      	ldr	r1, [r3, #24]
 800ab92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	ea40 0301 	orr.w	r3, r0, r1
 800ab9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	4b90      	ldr	r3, [pc, #576]	; (800ade8 <UART_SetConfig+0x358>)
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d005      	beq.n	800abb6 <UART_SetConfig+0x126>
 800abaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	4b8e      	ldr	r3, [pc, #568]	; (800adec <UART_SetConfig+0x35c>)
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d104      	bne.n	800abc0 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800abb6:	f7fb ffc9 	bl	8006b4c <HAL_RCC_GetPCLK2Freq>
 800abba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800abbe:	e003      	b.n	800abc8 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800abc0:	f7fb ffb0 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 800abc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abd2:	f040 810f 	bne.w	800adf4 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800abd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abda:	2200      	movs	r2, #0
 800abdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800abe0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800abe4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800abe8:	4622      	mov	r2, r4
 800abea:	462b      	mov	r3, r5
 800abec:	1891      	adds	r1, r2, r2
 800abee:	65b9      	str	r1, [r7, #88]	; 0x58
 800abf0:	415b      	adcs	r3, r3
 800abf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abf4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800abf8:	4621      	mov	r1, r4
 800abfa:	eb12 0801 	adds.w	r8, r2, r1
 800abfe:	4629      	mov	r1, r5
 800ac00:	eb43 0901 	adc.w	r9, r3, r1
 800ac04:	f04f 0200 	mov.w	r2, #0
 800ac08:	f04f 0300 	mov.w	r3, #0
 800ac0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ac10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ac14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ac18:	4690      	mov	r8, r2
 800ac1a:	4699      	mov	r9, r3
 800ac1c:	4623      	mov	r3, r4
 800ac1e:	eb18 0303 	adds.w	r3, r8, r3
 800ac22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac26:	462b      	mov	r3, r5
 800ac28:	eb49 0303 	adc.w	r3, r9, r3
 800ac2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ac3c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ac40:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ac44:	460b      	mov	r3, r1
 800ac46:	18db      	adds	r3, r3, r3
 800ac48:	653b      	str	r3, [r7, #80]	; 0x50
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	eb42 0303 	adc.w	r3, r2, r3
 800ac50:	657b      	str	r3, [r7, #84]	; 0x54
 800ac52:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ac56:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ac5a:	f7f5 fad1 	bl	8000200 <__aeabi_uldivmod>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	4b63      	ldr	r3, [pc, #396]	; (800adf0 <UART_SetConfig+0x360>)
 800ac64:	fba3 2302 	umull	r2, r3, r3, r2
 800ac68:	095b      	lsrs	r3, r3, #5
 800ac6a:	011c      	lsls	r4, r3, #4
 800ac6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac70:	2200      	movs	r2, #0
 800ac72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac76:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ac7a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ac7e:	4642      	mov	r2, r8
 800ac80:	464b      	mov	r3, r9
 800ac82:	1891      	adds	r1, r2, r2
 800ac84:	64b9      	str	r1, [r7, #72]	; 0x48
 800ac86:	415b      	adcs	r3, r3
 800ac88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ac8e:	4641      	mov	r1, r8
 800ac90:	eb12 0a01 	adds.w	sl, r2, r1
 800ac94:	4649      	mov	r1, r9
 800ac96:	eb43 0b01 	adc.w	fp, r3, r1
 800ac9a:	f04f 0200 	mov.w	r2, #0
 800ac9e:	f04f 0300 	mov.w	r3, #0
 800aca2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aca6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800acaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acae:	4692      	mov	sl, r2
 800acb0:	469b      	mov	fp, r3
 800acb2:	4643      	mov	r3, r8
 800acb4:	eb1a 0303 	adds.w	r3, sl, r3
 800acb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800acbc:	464b      	mov	r3, r9
 800acbe:	eb4b 0303 	adc.w	r3, fp, r3
 800acc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800acc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800acd2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800acd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800acda:	460b      	mov	r3, r1
 800acdc:	18db      	adds	r3, r3, r3
 800acde:	643b      	str	r3, [r7, #64]	; 0x40
 800ace0:	4613      	mov	r3, r2
 800ace2:	eb42 0303 	adc.w	r3, r2, r3
 800ace6:	647b      	str	r3, [r7, #68]	; 0x44
 800ace8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800acec:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800acf0:	f7f5 fa86 	bl	8000200 <__aeabi_uldivmod>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4611      	mov	r1, r2
 800acfa:	4b3d      	ldr	r3, [pc, #244]	; (800adf0 <UART_SetConfig+0x360>)
 800acfc:	fba3 2301 	umull	r2, r3, r3, r1
 800ad00:	095b      	lsrs	r3, r3, #5
 800ad02:	2264      	movs	r2, #100	; 0x64
 800ad04:	fb02 f303 	mul.w	r3, r2, r3
 800ad08:	1acb      	subs	r3, r1, r3
 800ad0a:	00db      	lsls	r3, r3, #3
 800ad0c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ad10:	4b37      	ldr	r3, [pc, #220]	; (800adf0 <UART_SetConfig+0x360>)
 800ad12:	fba3 2302 	umull	r2, r3, r3, r2
 800ad16:	095b      	lsrs	r3, r3, #5
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ad1e:	441c      	add	r4, r3
 800ad20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad24:	2200      	movs	r2, #0
 800ad26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad2a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ad2e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ad32:	4642      	mov	r2, r8
 800ad34:	464b      	mov	r3, r9
 800ad36:	1891      	adds	r1, r2, r2
 800ad38:	63b9      	str	r1, [r7, #56]	; 0x38
 800ad3a:	415b      	adcs	r3, r3
 800ad3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ad42:	4641      	mov	r1, r8
 800ad44:	1851      	adds	r1, r2, r1
 800ad46:	6339      	str	r1, [r7, #48]	; 0x30
 800ad48:	4649      	mov	r1, r9
 800ad4a:	414b      	adcs	r3, r1
 800ad4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad4e:	f04f 0200 	mov.w	r2, #0
 800ad52:	f04f 0300 	mov.w	r3, #0
 800ad56:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ad5a:	4659      	mov	r1, fp
 800ad5c:	00cb      	lsls	r3, r1, #3
 800ad5e:	4651      	mov	r1, sl
 800ad60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad64:	4651      	mov	r1, sl
 800ad66:	00ca      	lsls	r2, r1, #3
 800ad68:	4610      	mov	r0, r2
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	4642      	mov	r2, r8
 800ad70:	189b      	adds	r3, r3, r2
 800ad72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad76:	464b      	mov	r3, r9
 800ad78:	460a      	mov	r2, r1
 800ad7a:	eb42 0303 	adc.w	r3, r2, r3
 800ad7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ad8e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ad92:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ad96:	460b      	mov	r3, r1
 800ad98:	18db      	adds	r3, r3, r3
 800ad9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	eb42 0303 	adc.w	r3, r2, r3
 800ada2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ada4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ada8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800adac:	f7f5 fa28 	bl	8000200 <__aeabi_uldivmod>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4b0e      	ldr	r3, [pc, #56]	; (800adf0 <UART_SetConfig+0x360>)
 800adb6:	fba3 1302 	umull	r1, r3, r3, r2
 800adba:	095b      	lsrs	r3, r3, #5
 800adbc:	2164      	movs	r1, #100	; 0x64
 800adbe:	fb01 f303 	mul.w	r3, r1, r3
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	00db      	lsls	r3, r3, #3
 800adc6:	3332      	adds	r3, #50	; 0x32
 800adc8:	4a09      	ldr	r2, [pc, #36]	; (800adf0 <UART_SetConfig+0x360>)
 800adca:	fba2 2303 	umull	r2, r3, r2, r3
 800adce:	095b      	lsrs	r3, r3, #5
 800add0:	f003 0207 	and.w	r2, r3, #7
 800add4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4422      	add	r2, r4
 800addc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800adde:	e108      	b.n	800aff2 <UART_SetConfig+0x562>
 800ade0:	00a037a0 	.word	0x00a037a0
 800ade4:	0801421c 	.word	0x0801421c
 800ade8:	40011000 	.word	0x40011000
 800adec:	40011400 	.word	0x40011400
 800adf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800adf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adf8:	2200      	movs	r2, #0
 800adfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800adfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ae02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ae06:	4642      	mov	r2, r8
 800ae08:	464b      	mov	r3, r9
 800ae0a:	1891      	adds	r1, r2, r2
 800ae0c:	6239      	str	r1, [r7, #32]
 800ae0e:	415b      	adcs	r3, r3
 800ae10:	627b      	str	r3, [r7, #36]	; 0x24
 800ae12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ae16:	4641      	mov	r1, r8
 800ae18:	1854      	adds	r4, r2, r1
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	eb43 0501 	adc.w	r5, r3, r1
 800ae20:	f04f 0200 	mov.w	r2, #0
 800ae24:	f04f 0300 	mov.w	r3, #0
 800ae28:	00eb      	lsls	r3, r5, #3
 800ae2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae2e:	00e2      	lsls	r2, r4, #3
 800ae30:	4614      	mov	r4, r2
 800ae32:	461d      	mov	r5, r3
 800ae34:	4643      	mov	r3, r8
 800ae36:	18e3      	adds	r3, r4, r3
 800ae38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ae3c:	464b      	mov	r3, r9
 800ae3e:	eb45 0303 	adc.w	r3, r5, r3
 800ae42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ae52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae56:	f04f 0200 	mov.w	r2, #0
 800ae5a:	f04f 0300 	mov.w	r3, #0
 800ae5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ae62:	4629      	mov	r1, r5
 800ae64:	008b      	lsls	r3, r1, #2
 800ae66:	4621      	mov	r1, r4
 800ae68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	008a      	lsls	r2, r1, #2
 800ae70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ae74:	f7f5 f9c4 	bl	8000200 <__aeabi_uldivmod>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4b60      	ldr	r3, [pc, #384]	; (800b000 <UART_SetConfig+0x570>)
 800ae7e:	fba3 2302 	umull	r2, r3, r3, r2
 800ae82:	095b      	lsrs	r3, r3, #5
 800ae84:	011c      	lsls	r4, r3, #4
 800ae86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ae98:	4642      	mov	r2, r8
 800ae9a:	464b      	mov	r3, r9
 800ae9c:	1891      	adds	r1, r2, r2
 800ae9e:	61b9      	str	r1, [r7, #24]
 800aea0:	415b      	adcs	r3, r3
 800aea2:	61fb      	str	r3, [r7, #28]
 800aea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aea8:	4641      	mov	r1, r8
 800aeaa:	1851      	adds	r1, r2, r1
 800aeac:	6139      	str	r1, [r7, #16]
 800aeae:	4649      	mov	r1, r9
 800aeb0:	414b      	adcs	r3, r1
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	f04f 0200 	mov.w	r2, #0
 800aeb8:	f04f 0300 	mov.w	r3, #0
 800aebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aec0:	4659      	mov	r1, fp
 800aec2:	00cb      	lsls	r3, r1, #3
 800aec4:	4651      	mov	r1, sl
 800aec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aeca:	4651      	mov	r1, sl
 800aecc:	00ca      	lsls	r2, r1, #3
 800aece:	4610      	mov	r0, r2
 800aed0:	4619      	mov	r1, r3
 800aed2:	4603      	mov	r3, r0
 800aed4:	4642      	mov	r2, r8
 800aed6:	189b      	adds	r3, r3, r2
 800aed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aedc:	464b      	mov	r3, r9
 800aede:	460a      	mov	r2, r1
 800aee0:	eb42 0303 	adc.w	r3, r2, r3
 800aee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	67bb      	str	r3, [r7, #120]	; 0x78
 800aef2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aef4:	f04f 0200 	mov.w	r2, #0
 800aef8:	f04f 0300 	mov.w	r3, #0
 800aefc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800af00:	4649      	mov	r1, r9
 800af02:	008b      	lsls	r3, r1, #2
 800af04:	4641      	mov	r1, r8
 800af06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af0a:	4641      	mov	r1, r8
 800af0c:	008a      	lsls	r2, r1, #2
 800af0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800af12:	f7f5 f975 	bl	8000200 <__aeabi_uldivmod>
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	4b39      	ldr	r3, [pc, #228]	; (800b000 <UART_SetConfig+0x570>)
 800af1c:	fba3 1302 	umull	r1, r3, r3, r2
 800af20:	095b      	lsrs	r3, r3, #5
 800af22:	2164      	movs	r1, #100	; 0x64
 800af24:	fb01 f303 	mul.w	r3, r1, r3
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	011b      	lsls	r3, r3, #4
 800af2c:	3332      	adds	r3, #50	; 0x32
 800af2e:	4a34      	ldr	r2, [pc, #208]	; (800b000 <UART_SetConfig+0x570>)
 800af30:	fba2 2303 	umull	r2, r3, r2, r3
 800af34:	095b      	lsrs	r3, r3, #5
 800af36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af3a:	441c      	add	r4, r3
 800af3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af40:	2200      	movs	r2, #0
 800af42:	673b      	str	r3, [r7, #112]	; 0x70
 800af44:	677a      	str	r2, [r7, #116]	; 0x74
 800af46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800af4a:	4642      	mov	r2, r8
 800af4c:	464b      	mov	r3, r9
 800af4e:	1891      	adds	r1, r2, r2
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	415b      	adcs	r3, r3
 800af54:	60fb      	str	r3, [r7, #12]
 800af56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af5a:	4641      	mov	r1, r8
 800af5c:	1851      	adds	r1, r2, r1
 800af5e:	6039      	str	r1, [r7, #0]
 800af60:	4649      	mov	r1, r9
 800af62:	414b      	adcs	r3, r1
 800af64:	607b      	str	r3, [r7, #4]
 800af66:	f04f 0200 	mov.w	r2, #0
 800af6a:	f04f 0300 	mov.w	r3, #0
 800af6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800af72:	4659      	mov	r1, fp
 800af74:	00cb      	lsls	r3, r1, #3
 800af76:	4651      	mov	r1, sl
 800af78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af7c:	4651      	mov	r1, sl
 800af7e:	00ca      	lsls	r2, r1, #3
 800af80:	4610      	mov	r0, r2
 800af82:	4619      	mov	r1, r3
 800af84:	4603      	mov	r3, r0
 800af86:	4642      	mov	r2, r8
 800af88:	189b      	adds	r3, r3, r2
 800af8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800af8c:	464b      	mov	r3, r9
 800af8e:	460a      	mov	r2, r1
 800af90:	eb42 0303 	adc.w	r3, r2, r3
 800af94:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	663b      	str	r3, [r7, #96]	; 0x60
 800afa0:	667a      	str	r2, [r7, #100]	; 0x64
 800afa2:	f04f 0200 	mov.w	r2, #0
 800afa6:	f04f 0300 	mov.w	r3, #0
 800afaa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800afae:	4649      	mov	r1, r9
 800afb0:	008b      	lsls	r3, r1, #2
 800afb2:	4641      	mov	r1, r8
 800afb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800afb8:	4641      	mov	r1, r8
 800afba:	008a      	lsls	r2, r1, #2
 800afbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800afc0:	f7f5 f91e 	bl	8000200 <__aeabi_uldivmod>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4b0d      	ldr	r3, [pc, #52]	; (800b000 <UART_SetConfig+0x570>)
 800afca:	fba3 1302 	umull	r1, r3, r3, r2
 800afce:	095b      	lsrs	r3, r3, #5
 800afd0:	2164      	movs	r1, #100	; 0x64
 800afd2:	fb01 f303 	mul.w	r3, r1, r3
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	011b      	lsls	r3, r3, #4
 800afda:	3332      	adds	r3, #50	; 0x32
 800afdc:	4a08      	ldr	r2, [pc, #32]	; (800b000 <UART_SetConfig+0x570>)
 800afde:	fba2 2303 	umull	r2, r3, r2, r3
 800afe2:	095b      	lsrs	r3, r3, #5
 800afe4:	f003 020f 	and.w	r2, r3, #15
 800afe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4422      	add	r2, r4
 800aff0:	609a      	str	r2, [r3, #8]
}
 800aff2:	bf00      	nop
 800aff4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800aff8:	46bd      	mov	sp, r7
 800affa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800affe:	bf00      	nop
 800b000:	51eb851f 	.word	0x51eb851f

0800b004 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a81      	ldr	r2, [pc, #516]	; (800b218 <FMC_SDRAM_Init+0x214>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d004      	beq.n	800b020 <FMC_SDRAM_Init+0x1c>
 800b016:	f240 419f 	movw	r1, #1183	; 0x49f
 800b01a:	4880      	ldr	r0, [pc, #512]	; (800b21c <FMC_SDRAM_Init+0x218>)
 800b01c:	f7f6 f99d 	bl	800135a <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d008      	beq.n	800b03a <FMC_SDRAM_Init+0x36>
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d004      	beq.n	800b03a <FMC_SDRAM_Init+0x36>
 800b030:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
 800b034:	4879      	ldr	r0, [pc, #484]	; (800b21c <FMC_SDRAM_Init+0x218>)
 800b036:	f7f6 f990 	bl	800135a <assert_failed>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d010      	beq.n	800b064 <FMC_SDRAM_Init+0x60>
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d00c      	beq.n	800b064 <FMC_SDRAM_Init+0x60>
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d008      	beq.n	800b064 <FMC_SDRAM_Init+0x60>
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	2b03      	cmp	r3, #3
 800b058:	d004      	beq.n	800b064 <FMC_SDRAM_Init+0x60>
 800b05a:	f240 41a1 	movw	r1, #1185	; 0x4a1
 800b05e:	486f      	ldr	r0, [pc, #444]	; (800b21c <FMC_SDRAM_Init+0x218>)
 800b060:	f7f6 f97b 	bl	800135a <assert_failed>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00c      	beq.n	800b086 <FMC_SDRAM_Init+0x82>
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	2b04      	cmp	r3, #4
 800b072:	d008      	beq.n	800b086 <FMC_SDRAM_Init+0x82>
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	2b08      	cmp	r3, #8
 800b07a:	d004      	beq.n	800b086 <FMC_SDRAM_Init+0x82>
 800b07c:	f240 41a2 	movw	r1, #1186	; 0x4a2
 800b080:	4866      	ldr	r0, [pc, #408]	; (800b21c <FMC_SDRAM_Init+0x218>)
 800b082:	f7f6 f96a 	bl	800135a <assert_failed>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00c      	beq.n	800b0a8 <FMC_SDRAM_Init+0xa4>
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	2b10      	cmp	r3, #16
 800b094:	d008      	beq.n	800b0a8 <FMC_SDRAM_Init+0xa4>
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	2b20      	cmp	r3, #32
 800b09c:	d004      	beq.n	800b0a8 <FMC_SDRAM_Init+0xa4>
 800b09e:	f240 41a3 	movw	r1, #1187	; 0x4a3
 800b0a2:	485e      	ldr	r0, [pc, #376]	; (800b21c <FMC_SDRAM_Init+0x218>)
 800b0a4:	f7f6 f959 	bl	800135a <assert_failed>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d008      	beq.n	800b0c2 <FMC_SDRAM_Init+0xbe>
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	2b40      	cmp	r3, #64	; 0x40
 800b0b6:	d004      	beq.n	800b0c2 <FMC_SDRAM_Init+0xbe>
 800b0b8:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800b0bc:	4857      	ldr	r0, [pc, #348]	; (800b21c <FMC_SDRAM_Init+0x218>)
 800b0be:	f7f6 f94c 	bl	800135a <assert_failed>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	695b      	ldr	r3, [r3, #20]
 800b0c6:	2b80      	cmp	r3, #128	; 0x80
 800b0c8:	d00e      	beq.n	800b0e8 <FMC_SDRAM_Init+0xe4>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0d2:	d009      	beq.n	800b0e8 <FMC_SDRAM_Init+0xe4>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800b0dc:	d004      	beq.n	800b0e8 <FMC_SDRAM_Init+0xe4>
 800b0de:	f240 41a5 	movw	r1, #1189	; 0x4a5
 800b0e2:	484e      	ldr	r0, [pc, #312]	; (800b21c <FMC_SDRAM_Init+0x218>)
 800b0e4:	f7f6 f939 	bl	800135a <assert_failed>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d009      	beq.n	800b104 <FMC_SDRAM_Init+0x100>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0f8:	d004      	beq.n	800b104 <FMC_SDRAM_Init+0x100>
 800b0fa:	f240 41a6 	movw	r1, #1190	; 0x4a6
 800b0fe:	4847      	ldr	r0, [pc, #284]	; (800b21c <FMC_SDRAM_Init+0x218>)
 800b100:	f7f6 f92b 	bl	800135a <assert_failed>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	69db      	ldr	r3, [r3, #28]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00e      	beq.n	800b12a <FMC_SDRAM_Init+0x126>
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	69db      	ldr	r3, [r3, #28]
 800b110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b114:	d009      	beq.n	800b12a <FMC_SDRAM_Init+0x126>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	69db      	ldr	r3, [r3, #28]
 800b11a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b11e:	d004      	beq.n	800b12a <FMC_SDRAM_Init+0x126>
 800b120:	f240 41a7 	movw	r1, #1191	; 0x4a7
 800b124:	483d      	ldr	r0, [pc, #244]	; (800b21c <FMC_SDRAM_Init+0x218>)
 800b126:	f7f6 f918 	bl	800135a <assert_failed>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d009      	beq.n	800b146 <FMC_SDRAM_Init+0x142>
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b13a:	d004      	beq.n	800b146 <FMC_SDRAM_Init+0x142>
 800b13c:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
 800b140:	4836      	ldr	r0, [pc, #216]	; (800b21c <FMC_SDRAM_Init+0x218>)
 800b142:	f7f6 f90a 	bl	800135a <assert_failed>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00e      	beq.n	800b16c <FMC_SDRAM_Init+0x168>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b156:	d009      	beq.n	800b16c <FMC_SDRAM_Init+0x168>
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b160:	d004      	beq.n	800b16c <FMC_SDRAM_Init+0x168>
 800b162:	f240 41a9 	movw	r1, #1193	; 0x4a9
 800b166:	482d      	ldr	r0, [pc, #180]	; (800b21c <FMC_SDRAM_Init+0x218>)
 800b168:	f7f6 f8f7 	bl	800135a <assert_failed>

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d123      	bne.n	800b1bc <FMC_SDRAM_Init+0x1b8>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b17c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	6851      	ldr	r1, [r2, #4]
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	6892      	ldr	r2, [r2, #8]
 800b188:	4311      	orrs	r1, r2
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	68d2      	ldr	r2, [r2, #12]
 800b18e:	4311      	orrs	r1, r2
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	6912      	ldr	r2, [r2, #16]
 800b194:	4311      	orrs	r1, r2
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	6952      	ldr	r2, [r2, #20]
 800b19a:	4311      	orrs	r1, r2
 800b19c:	683a      	ldr	r2, [r7, #0]
 800b19e:	6992      	ldr	r2, [r2, #24]
 800b1a0:	4311      	orrs	r1, r2
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	69d2      	ldr	r2, [r2, #28]
 800b1a6:	4311      	orrs	r1, r2
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	6a12      	ldr	r2, [r2, #32]
 800b1ac:	4311      	orrs	r1, r2
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	431a      	orrs	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	601a      	str	r2, [r3, #0]
 800b1ba:	e028      	b.n	800b20e <FMC_SDRAM_Init+0x20a>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	69d9      	ldr	r1, [r3, #28]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	6a1b      	ldr	r3, [r3, #32]
 800b1cc:	4319      	orrs	r1, r3
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d2:	430b      	orrs	r3, r1
 800b1d4:	431a      	orrs	r2, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b1e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	6851      	ldr	r1, [r2, #4]
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	6892      	ldr	r2, [r2, #8]
 800b1ee:	4311      	orrs	r1, r2
 800b1f0:	683a      	ldr	r2, [r7, #0]
 800b1f2:	68d2      	ldr	r2, [r2, #12]
 800b1f4:	4311      	orrs	r1, r2
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	6912      	ldr	r2, [r2, #16]
 800b1fa:	4311      	orrs	r1, r2
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	6952      	ldr	r2, [r2, #20]
 800b200:	4311      	orrs	r1, r2
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	6992      	ldr	r2, [r2, #24]
 800b206:	430a      	orrs	r2, r1
 800b208:	431a      	orrs	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	a0000140 	.word	0xa0000140
 800b21c:	08014258 	.word	0x08014258

0800b220 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	4a67      	ldr	r2, [pc, #412]	; (800b3cc <FMC_SDRAM_Timing_Init+0x1ac>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d004      	beq.n	800b23e <FMC_SDRAM_Timing_Init+0x1e>
 800b234:	f240 41de 	movw	r1, #1246	; 0x4de
 800b238:	4865      	ldr	r0, [pc, #404]	; (800b3d0 <FMC_SDRAM_Timing_Init+0x1b0>)
 800b23a:	f7f6 f88e 	bl	800135a <assert_failed>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <FMC_SDRAM_Timing_Init+0x2e>
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b10      	cmp	r3, #16
 800b24c:	d904      	bls.n	800b258 <FMC_SDRAM_Timing_Init+0x38>
 800b24e:	f240 41df 	movw	r1, #1247	; 0x4df
 800b252:	485f      	ldr	r0, [pc, #380]	; (800b3d0 <FMC_SDRAM_Timing_Init+0x1b0>)
 800b254:	f7f6 f881 	bl	800135a <assert_failed>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d003      	beq.n	800b268 <FMC_SDRAM_Timing_Init+0x48>
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	2b10      	cmp	r3, #16
 800b266:	d904      	bls.n	800b272 <FMC_SDRAM_Timing_Init+0x52>
 800b268:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 800b26c:	4858      	ldr	r0, [pc, #352]	; (800b3d0 <FMC_SDRAM_Timing_Init+0x1b0>)
 800b26e:	f7f6 f874 	bl	800135a <assert_failed>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d003      	beq.n	800b282 <FMC_SDRAM_Timing_Init+0x62>
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	2b10      	cmp	r3, #16
 800b280:	d904      	bls.n	800b28c <FMC_SDRAM_Timing_Init+0x6c>
 800b282:	f240 41e1 	movw	r1, #1249	; 0x4e1
 800b286:	4852      	ldr	r0, [pc, #328]	; (800b3d0 <FMC_SDRAM_Timing_Init+0x1b0>)
 800b288:	f7f6 f867 	bl	800135a <assert_failed>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d003      	beq.n	800b29c <FMC_SDRAM_Timing_Init+0x7c>
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	2b10      	cmp	r3, #16
 800b29a:	d904      	bls.n	800b2a6 <FMC_SDRAM_Timing_Init+0x86>
 800b29c:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800b2a0:	484b      	ldr	r0, [pc, #300]	; (800b3d0 <FMC_SDRAM_Timing_Init+0x1b0>)
 800b2a2:	f7f6 f85a 	bl	800135a <assert_failed>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <FMC_SDRAM_Timing_Init+0x96>
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	2b10      	cmp	r3, #16
 800b2b4:	d904      	bls.n	800b2c0 <FMC_SDRAM_Timing_Init+0xa0>
 800b2b6:	f240 41e3 	movw	r1, #1251	; 0x4e3
 800b2ba:	4845      	ldr	r0, [pc, #276]	; (800b3d0 <FMC_SDRAM_Timing_Init+0x1b0>)
 800b2bc:	f7f6 f84d 	bl	800135a <assert_failed>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	695b      	ldr	r3, [r3, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <FMC_SDRAM_Timing_Init+0xb0>
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	695b      	ldr	r3, [r3, #20]
 800b2cc:	2b10      	cmp	r3, #16
 800b2ce:	d904      	bls.n	800b2da <FMC_SDRAM_Timing_Init+0xba>
 800b2d0:	f240 41e4 	movw	r1, #1252	; 0x4e4
 800b2d4:	483e      	ldr	r0, [pc, #248]	; (800b3d0 <FMC_SDRAM_Timing_Init+0x1b0>)
 800b2d6:	f7f6 f840 	bl	800135a <assert_failed>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	699b      	ldr	r3, [r3, #24]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <FMC_SDRAM_Timing_Init+0xca>
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	699b      	ldr	r3, [r3, #24]
 800b2e6:	2b10      	cmp	r3, #16
 800b2e8:	d904      	bls.n	800b2f4 <FMC_SDRAM_Timing_Init+0xd4>
 800b2ea:	f240 41e5 	movw	r1, #1253	; 0x4e5
 800b2ee:	4838      	ldr	r0, [pc, #224]	; (800b3d0 <FMC_SDRAM_Timing_Init+0x1b0>)
 800b2f0:	f7f6 f833 	bl	800135a <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d007      	beq.n	800b30a <FMC_SDRAM_Timing_Init+0xea>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d004      	beq.n	800b30a <FMC_SDRAM_Timing_Init+0xea>
 800b300:	f240 41e6 	movw	r1, #1254	; 0x4e6
 800b304:	4832      	ldr	r0, [pc, #200]	; (800b3d0 <FMC_SDRAM_Timing_Init+0x1b0>)
 800b306:	f7f6 f828 	bl	800135a <assert_failed>

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d128      	bne.n	800b362 <FMC_SDRAM_Timing_Init+0x142>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	1e59      	subs	r1, r3, #1
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	3b01      	subs	r3, #1
 800b324:	011b      	lsls	r3, r3, #4
 800b326:	4319      	orrs	r1, r3
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	021b      	lsls	r3, r3, #8
 800b330:	4319      	orrs	r1, r3
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	3b01      	subs	r3, #1
 800b338:	031b      	lsls	r3, r3, #12
 800b33a:	4319      	orrs	r1, r3
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	3b01      	subs	r3, #1
 800b342:	041b      	lsls	r3, r3, #16
 800b344:	4319      	orrs	r1, r3
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	695b      	ldr	r3, [r3, #20]
 800b34a:	3b01      	subs	r3, #1
 800b34c:	051b      	lsls	r3, r3, #20
 800b34e:	4319      	orrs	r1, r3
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	699b      	ldr	r3, [r3, #24]
 800b354:	3b01      	subs	r3, #1
 800b356:	061b      	lsls	r3, r3, #24
 800b358:	430b      	orrs	r3, r1
 800b35a:	431a      	orrs	r2, r3
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	609a      	str	r2, [r3, #8]
 800b360:	e02f      	b.n	800b3c2 <FMC_SDRAM_Timing_Init+0x1a2>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b36a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	68d2      	ldr	r2, [r2, #12]
 800b372:	3a01      	subs	r2, #1
 800b374:	0311      	lsls	r1, r2, #12
 800b376:	68ba      	ldr	r2, [r7, #8]
 800b378:	6952      	ldr	r2, [r2, #20]
 800b37a:	3a01      	subs	r2, #1
 800b37c:	0512      	lsls	r2, r2, #20
 800b37e:	430a      	orrs	r2, r1
 800b380:	431a      	orrs	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	1e59      	subs	r1, r3, #1
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	3b01      	subs	r3, #1
 800b39a:	011b      	lsls	r3, r3, #4
 800b39c:	4319      	orrs	r1, r3
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	021b      	lsls	r3, r3, #8
 800b3a6:	4319      	orrs	r1, r3
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	041b      	lsls	r3, r3, #16
 800b3b0:	4319      	orrs	r1, r3
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	699b      	ldr	r3, [r3, #24]
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	061b      	lsls	r3, r3, #24
 800b3ba:	430b      	orrs	r3, r1
 800b3bc:	431a      	orrs	r2, r3
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	a0000140 	.word	0xa0000140
 800b3d0:	08014258 	.word	0x08014258

0800b3d4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b3d4:	b084      	sub	sp, #16
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	f107 001c 	add.w	r0, r7, #28
 800b3e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(SDIOx));
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a34      	ldr	r2, [pc, #208]	; (800b4c0 <SDIO_Init+0xec>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d003      	beq.n	800b3fa <SDIO_Init+0x26>
 800b3f2:	21d4      	movs	r1, #212	; 0xd4
 800b3f4:	4833      	ldr	r0, [pc, #204]	; (800b4c4 <SDIO_Init+0xf0>)
 800b3f6:	f7f5 ffb0 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d007      	beq.n	800b410 <SDIO_Init+0x3c>
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b406:	d003      	beq.n	800b410 <SDIO_Init+0x3c>
 800b408:	21d5      	movs	r1, #213	; 0xd5
 800b40a:	482e      	ldr	r0, [pc, #184]	; (800b4c4 <SDIO_Init+0xf0>)
 800b40c:	f7f5 ffa5 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
 800b410:	6a3b      	ldr	r3, [r7, #32]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d007      	beq.n	800b426 <SDIO_Init+0x52>
 800b416:	6a3b      	ldr	r3, [r7, #32]
 800b418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b41c:	d003      	beq.n	800b426 <SDIO_Init+0x52>
 800b41e:	21d6      	movs	r1, #214	; 0xd6
 800b420:	4828      	ldr	r0, [pc, #160]	; (800b4c4 <SDIO_Init+0xf0>)
 800b422:	f7f5 ff9a 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d007      	beq.n	800b43c <SDIO_Init+0x68>
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b432:	d003      	beq.n	800b43c <SDIO_Init+0x68>
 800b434:	21d7      	movs	r1, #215	; 0xd7
 800b436:	4823      	ldr	r0, [pc, #140]	; (800b4c4 <SDIO_Init+0xf0>)
 800b438:	f7f5 ff8f 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
 800b43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00b      	beq.n	800b45a <SDIO_Init+0x86>
 800b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b448:	d007      	beq.n	800b45a <SDIO_Init+0x86>
 800b44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b450:	d003      	beq.n	800b45a <SDIO_Init+0x86>
 800b452:	21d8      	movs	r1, #216	; 0xd8
 800b454:	481b      	ldr	r0, [pc, #108]	; (800b4c4 <SDIO_Init+0xf0>)
 800b456:	f7f5 ff80 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 800b45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d007      	beq.n	800b470 <SDIO_Init+0x9c>
 800b460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b466:	d003      	beq.n	800b470 <SDIO_Init+0x9c>
 800b468:	21d9      	movs	r1, #217	; 0xd9
 800b46a:	4816      	ldr	r0, [pc, #88]	; (800b4c4 <SDIO_Init+0xf0>)
 800b46c:	f7f5 ff75 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
 800b470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b472:	2bff      	cmp	r3, #255	; 0xff
 800b474:	d903      	bls.n	800b47e <SDIO_Init+0xaa>
 800b476:	21da      	movs	r1, #218	; 0xda
 800b478:	4812      	ldr	r0, [pc, #72]	; (800b4c4 <SDIO_Init+0xf0>)
 800b47a:	f7f5 ff6e 	bl	800135a <assert_failed>
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b47e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b480:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b482:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b486:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b488:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b48a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b48e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b492:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	4313      	orrs	r3, r2
 800b498:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b4a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	431a      	orrs	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3710      	adds	r7, #16
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4ba:	b004      	add	sp, #16
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	40012c00 	.word	0x40012c00
 800b4c4:	08014290 	.word	0x08014290

0800b4c8 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b4e2:	b480      	push	{r7}
 800b4e4:	b083      	sub	sp, #12
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2203      	movs	r2, #3
 800b4ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b4fe:	b480      	push	{r7}
 800b500:	b083      	sub	sp, #12
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0303 	and.w	r3, r3, #3
}
 800b50e:	4618      	mov	r0, r3
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr
	...

0800b51c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b526:	2300      	movs	r3, #0
 800b528:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SDIO_CMD_INDEX(Command->CmdIndex));
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	2b3f      	cmp	r3, #63	; 0x3f
 800b530:	d904      	bls.n	800b53c <SDIO_SendCommand+0x20>
 800b532:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800b536:	482b      	ldr	r0, [pc, #172]	; (800b5e4 <SDIO_SendCommand+0xc8>)
 800b538:	f7f5 ff0f 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_RESPONSE(Command->Response));
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00c      	beq.n	800b55e <SDIO_SendCommand+0x42>
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	2b40      	cmp	r3, #64	; 0x40
 800b54a:	d008      	beq.n	800b55e <SDIO_SendCommand+0x42>
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	2bc0      	cmp	r3, #192	; 0xc0
 800b552:	d004      	beq.n	800b55e <SDIO_SendCommand+0x42>
 800b554:	f240 1161 	movw	r1, #353	; 0x161
 800b558:	4822      	ldr	r0, [pc, #136]	; (800b5e4 <SDIO_SendCommand+0xc8>)
 800b55a:	f7f5 fefe 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00e      	beq.n	800b584 <SDIO_SendCommand+0x68>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b56e:	d009      	beq.n	800b584 <SDIO_SendCommand+0x68>
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b578:	d004      	beq.n	800b584 <SDIO_SendCommand+0x68>
 800b57a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b57e:	4819      	ldr	r0, [pc, #100]	; (800b5e4 <SDIO_SendCommand+0xc8>)
 800b580:	f7f5 feeb 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_CPSM(Command->CPSM));
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d009      	beq.n	800b5a0 <SDIO_SendCommand+0x84>
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b594:	d004      	beq.n	800b5a0 <SDIO_SendCommand+0x84>
 800b596:	f240 1163 	movw	r1, #355	; 0x163
 800b59a:	4812      	ldr	r0, [pc, #72]	; (800b5e4 <SDIO_SendCommand+0xc8>)
 800b59c:	f7f5 fedd 	bl	800135a <assert_failed>

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b5b0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b5b6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b5bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b5cc:	f023 030f 	bic.w	r3, r3, #15
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	431a      	orrs	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	08014290 	.word	0x08014290

0800b5e8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	b2db      	uxtb	r3, r3
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	370c      	adds	r7, #12
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
	...

0800b604 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00d      	beq.n	800b630 <SDIO_GetResponse+0x2c>
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	2b04      	cmp	r3, #4
 800b618:	d00a      	beq.n	800b630 <SDIO_GetResponse+0x2c>
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b08      	cmp	r3, #8
 800b61e:	d007      	beq.n	800b630 <SDIO_GetResponse+0x2c>
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2b0c      	cmp	r3, #12
 800b624:	d004      	beq.n	800b630 <SDIO_GetResponse+0x2c>
 800b626:	f240 118f 	movw	r1, #399	; 0x18f
 800b62a:	4807      	ldr	r0, [pc, #28]	; (800b648 <SDIO_GetResponse+0x44>)
 800b62c:	f7f5 fe95 	bl	800135a <assert_failed>
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	3314      	adds	r3, #20
 800b634:	461a      	mov	r2, r3
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	4413      	add	r3, r2
 800b63a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
}  
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	08014290 	.word	0x08014290

0800b64c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_SDIO_DATA_LENGTH(Data->DataLength));
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b662:	d304      	bcc.n	800b66e <SDIO_ConfigData+0x22>
 800b664:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800b668:	4846      	ldr	r0, [pc, #280]	; (800b784 <SDIO_ConfigData+0x138>)
 800b66a:	f7f5 fe76 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_BLOCK_SIZE(Data->DataBlockSize));
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d03c      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	2b10      	cmp	r3, #16
 800b67c:	d038      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	2b20      	cmp	r3, #32
 800b684:	d034      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	2b30      	cmp	r3, #48	; 0x30
 800b68c:	d030      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	2b40      	cmp	r3, #64	; 0x40
 800b694:	d02c      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	2b50      	cmp	r3, #80	; 0x50
 800b69c:	d028      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	2b60      	cmp	r3, #96	; 0x60
 800b6a4:	d024      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	2b70      	cmp	r3, #112	; 0x70
 800b6ac:	d020      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	2b80      	cmp	r3, #128	; 0x80
 800b6b4:	d01c      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	2b90      	cmp	r3, #144	; 0x90
 800b6bc:	d018      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	2ba0      	cmp	r3, #160	; 0xa0
 800b6c4:	d014      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	2bb0      	cmp	r3, #176	; 0xb0
 800b6cc:	d010      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	2bc0      	cmp	r3, #192	; 0xc0
 800b6d4:	d00c      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	2bd0      	cmp	r3, #208	; 0xd0
 800b6dc:	d008      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	2be0      	cmp	r3, #224	; 0xe0
 800b6e4:	d004      	beq.n	800b6f0 <SDIO_ConfigData+0xa4>
 800b6e6:	f240 11a5 	movw	r1, #421	; 0x1a5
 800b6ea:	4826      	ldr	r0, [pc, #152]	; (800b784 <SDIO_ConfigData+0x138>)
 800b6ec:	f7f5 fe35 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d008      	beq.n	800b70a <SDIO_ConfigData+0xbe>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d004      	beq.n	800b70a <SDIO_ConfigData+0xbe>
 800b700:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800b704:	481f      	ldr	r0, [pc, #124]	; (800b784 <SDIO_ConfigData+0x138>)
 800b706:	f7f5 fe28 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d008      	beq.n	800b724 <SDIO_ConfigData+0xd8>
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	2b04      	cmp	r3, #4
 800b718:	d004      	beq.n	800b724 <SDIO_ConfigData+0xd8>
 800b71a:	f240 11a7 	movw	r1, #423	; 0x1a7
 800b71e:	4819      	ldr	r0, [pc, #100]	; (800b784 <SDIO_ConfigData+0x138>)
 800b720:	f7f5 fe1b 	bl	800135a <assert_failed>
  assert_param(IS_SDIO_DPSM(Data->DPSM));
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	695b      	ldr	r3, [r3, #20]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d008      	beq.n	800b73e <SDIO_ConfigData+0xf2>
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	695b      	ldr	r3, [r3, #20]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d004      	beq.n	800b73e <SDIO_ConfigData+0xf2>
 800b734:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800b738:	4812      	ldr	r0, [pc, #72]	; (800b784 <SDIO_ConfigData+0x138>)
 800b73a:	f7f5 fe0e 	bl	800135a <assert_failed>

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	685a      	ldr	r2, [r3, #4]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b756:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b75c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b762:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	4313      	orrs	r3, r2
 800b768:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	431a      	orrs	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b77a:	2300      	movs	r3, #0

}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	08014290 	.word	0x08014290

0800b788 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b088      	sub	sp, #32
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b796:	2310      	movs	r3, #16
 800b798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b79a:	2340      	movs	r3, #64	; 0x40
 800b79c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7a8:	f107 0308 	add.w	r3, r7, #8
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff feb4 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b7b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7b8:	2110      	movs	r1, #16
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fa18 	bl	800bbf0 <SDMMC_GetCmdResp1>
 800b7c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7c2:	69fb      	ldr	r3, [r7, #28]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3720      	adds	r7, #32
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b088      	sub	sp, #32
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b7da:	2311      	movs	r3, #17
 800b7dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b7de:	2340      	movs	r3, #64	; 0x40
 800b7e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7ec:	f107 0308 	add.w	r3, r7, #8
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff fe92 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b7f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7fc:	2111      	movs	r1, #17
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f9f6 	bl	800bbf0 <SDMMC_GetCmdResp1>
 800b804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b806:	69fb      	ldr	r3, [r7, #28]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3720      	adds	r7, #32
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b088      	sub	sp, #32
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b81e:	2312      	movs	r3, #18
 800b820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b822:	2340      	movs	r3, #64	; 0x40
 800b824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b826:	2300      	movs	r3, #0
 800b828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b82a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b82e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b830:	f107 0308 	add.w	r3, r7, #8
 800b834:	4619      	mov	r1, r3
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f7ff fe70 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b840:	2112      	movs	r1, #18
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f9d4 	bl	800bbf0 <SDMMC_GetCmdResp1>
 800b848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b84a:	69fb      	ldr	r3, [r7, #28]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3720      	adds	r7, #32
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b088      	sub	sp, #32
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b862:	2318      	movs	r3, #24
 800b864:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b866:	2340      	movs	r3, #64	; 0x40
 800b868:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b86a:	2300      	movs	r3, #0
 800b86c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b86e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b872:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b874:	f107 0308 	add.w	r3, r7, #8
 800b878:	4619      	mov	r1, r3
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7ff fe4e 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b880:	f241 3288 	movw	r2, #5000	; 0x1388
 800b884:	2118      	movs	r1, #24
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 f9b2 	bl	800bbf0 <SDMMC_GetCmdResp1>
 800b88c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b88e:	69fb      	ldr	r3, [r7, #28]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3720      	adds	r7, #32
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b088      	sub	sp, #32
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b8a6:	2319      	movs	r3, #25
 800b8a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8aa:	2340      	movs	r3, #64	; 0x40
 800b8ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8b8:	f107 0308 	add.w	r3, r7, #8
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f7ff fe2c 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b8c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8c8:	2119      	movs	r1, #25
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f990 	bl	800bbf0 <SDMMC_GetCmdResp1>
 800b8d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8d2:	69fb      	ldr	r3, [r7, #28]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3720      	adds	r7, #32
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b8e8:	230c      	movs	r3, #12
 800b8ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8ec:	2340      	movs	r3, #64	; 0x40
 800b8ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8fa:	f107 0308 	add.w	r3, r7, #8
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f7ff fe0b 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b906:	4a05      	ldr	r2, [pc, #20]	; (800b91c <SDMMC_CmdStopTransfer+0x40>)
 800b908:	210c      	movs	r1, #12
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f970 	bl	800bbf0 <SDMMC_GetCmdResp1>
 800b910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b912:	69fb      	ldr	r3, [r7, #28]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3720      	adds	r7, #32
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	05f5e100 	.word	0x05f5e100

0800b920 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b08a      	sub	sp, #40	; 0x28
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b930:	2307      	movs	r3, #7
 800b932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b934:	2340      	movs	r3, #64	; 0x40
 800b936:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b938:	2300      	movs	r3, #0
 800b93a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b93c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b940:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b942:	f107 0310 	add.w	r3, r7, #16
 800b946:	4619      	mov	r1, r3
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f7ff fde7 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b94e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b952:	2107      	movs	r1, #7
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f000 f94b 	bl	800bbf0 <SDMMC_GetCmdResp1>
 800b95a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3728      	adds	r7, #40	; 0x28
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b088      	sub	sp, #32
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b96e:	2300      	movs	r3, #0
 800b970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b972:	2300      	movs	r3, #0
 800b974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b976:	2300      	movs	r3, #0
 800b978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b97a:	2300      	movs	r3, #0
 800b97c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b97e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b982:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b984:	f107 0308 	add.w	r3, r7, #8
 800b988:	4619      	mov	r1, r3
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7ff fdc6 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fb65 	bl	800c060 <SDMMC_GetCmdError>
 800b996:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b998:	69fb      	ldr	r3, [r7, #28]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3720      	adds	r7, #32
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b088      	sub	sp, #32
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b9aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b9ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b9b0:	2308      	movs	r3, #8
 800b9b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9b4:	2340      	movs	r3, #64	; 0x40
 800b9b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b9c2:	f107 0308 	add.w	r3, r7, #8
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f7ff fda7 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 faf8 	bl	800bfc4 <SDMMC_GetCmdResp7>
 800b9d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9d6:	69fb      	ldr	r3, [r7, #28]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3720      	adds	r7, #32
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b088      	sub	sp, #32
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b9ee:	2337      	movs	r3, #55	; 0x37
 800b9f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9f2:	2340      	movs	r3, #64	; 0x40
 800b9f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba00:	f107 0308 	add.w	r3, r7, #8
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7ff fd88 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ba0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba10:	2137      	movs	r1, #55	; 0x37
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 f8ec 	bl	800bbf0 <SDMMC_GetCmdResp1>
 800ba18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba1a:	69fb      	ldr	r3, [r7, #28]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3720      	adds	r7, #32
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b088      	sub	sp, #32
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ba3a:	2329      	movs	r3, #41	; 0x29
 800ba3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba3e:	2340      	movs	r3, #64	; 0x40
 800ba40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba42:	2300      	movs	r3, #0
 800ba44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba4c:	f107 0308 	add.w	r3, r7, #8
 800ba50:	4619      	mov	r1, r3
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7ff fd62 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f9ff 	bl	800be5c <SDMMC_GetCmdResp3>
 800ba5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba60:	69fb      	ldr	r3, [r7, #28]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3720      	adds	r7, #32
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b088      	sub	sp, #32
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ba78:	2306      	movs	r3, #6
 800ba7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba7c:	2340      	movs	r3, #64	; 0x40
 800ba7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba80:	2300      	movs	r3, #0
 800ba82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba8a:	f107 0308 	add.w	r3, r7, #8
 800ba8e:	4619      	mov	r1, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff fd43 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ba96:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba9a:	2106      	movs	r1, #6
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f8a7 	bl	800bbf0 <SDMMC_GetCmdResp1>
 800baa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baa4:	69fb      	ldr	r3, [r7, #28]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3720      	adds	r7, #32
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b088      	sub	sp, #32
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bab6:	2300      	movs	r3, #0
 800bab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800baba:	2333      	movs	r3, #51	; 0x33
 800babc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800babe:	2340      	movs	r3, #64	; 0x40
 800bac0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bac2:	2300      	movs	r3, #0
 800bac4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bacc:	f107 0308 	add.w	r3, r7, #8
 800bad0:	4619      	mov	r1, r3
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7ff fd22 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800bad8:	f241 3288 	movw	r2, #5000	; 0x1388
 800badc:	2133      	movs	r1, #51	; 0x33
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f886 	bl	800bbf0 <SDMMC_GetCmdResp1>
 800bae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bae6:	69fb      	ldr	r3, [r7, #28]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3720      	adds	r7, #32
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800baf8:	2300      	movs	r3, #0
 800bafa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bafc:	2302      	movs	r3, #2
 800bafe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bb00:	23c0      	movs	r3, #192	; 0xc0
 800bb02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb04:	2300      	movs	r3, #0
 800bb06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb0e:	f107 0308 	add.w	r3, r7, #8
 800bb12:	4619      	mov	r1, r3
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7ff fd01 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f956 	bl	800bdcc <SDMMC_GetCmdResp2>
 800bb20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb22:	69fb      	ldr	r3, [r7, #28]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3720      	adds	r7, #32
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b088      	sub	sp, #32
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bb3a:	2309      	movs	r3, #9
 800bb3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bb3e:	23c0      	movs	r3, #192	; 0xc0
 800bb40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb42:	2300      	movs	r3, #0
 800bb44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb4c:	f107 0308 	add.w	r3, r7, #8
 800bb50:	4619      	mov	r1, r3
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7ff fce2 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f937 	bl	800bdcc <SDMMC_GetCmdResp2>
 800bb5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb60:	69fb      	ldr	r3, [r7, #28]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3720      	adds	r7, #32
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b088      	sub	sp, #32
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bb74:	2300      	movs	r3, #0
 800bb76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb7c:	2340      	movs	r3, #64	; 0x40
 800bb7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb80:	2300      	movs	r3, #0
 800bb82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb8a:	f107 0308 	add.w	r3, r7, #8
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7ff fcc3 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bb96:	683a      	ldr	r2, [r7, #0]
 800bb98:	2103      	movs	r1, #3
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f99c 	bl	800bed8 <SDMMC_GetCmdResp6>
 800bba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bba2:	69fb      	ldr	r3, [r7, #28]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3720      	adds	r7, #32
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bbba:	230d      	movs	r3, #13
 800bbbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bbbe:	2340      	movs	r3, #64	; 0x40
 800bbc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bbc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bbcc:	f107 0308 	add.w	r3, r7, #8
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff fca2 	bl	800b51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800bbd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbdc:	210d      	movs	r1, #13
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f806 	bl	800bbf0 <SDMMC_GetCmdResp1>
 800bbe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbe6:	69fb      	ldr	r3, [r7, #28]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3720      	adds	r7, #32
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bbfe:	4b70      	ldr	r3, [pc, #448]	; (800bdc0 <SDMMC_GetCmdResp1+0x1d0>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a70      	ldr	r2, [pc, #448]	; (800bdc4 <SDMMC_GetCmdResp1+0x1d4>)
 800bc04:	fba2 2303 	umull	r2, r3, r2, r3
 800bc08:	0a5a      	lsrs	r2, r3, #9
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	fb02 f303 	mul.w	r3, r2, r3
 800bc10:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bc12:	69fb      	ldr	r3, [r7, #28]
 800bc14:	1e5a      	subs	r2, r3, #1
 800bc16:	61fa      	str	r2, [r7, #28]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d102      	bne.n	800bc22 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc20:	e0c9      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc26:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d0ef      	beq.n	800bc12 <SDMMC_GetCmdResp1+0x22>
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1ea      	bne.n	800bc12 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc40:	f003 0304 	and.w	r3, r3, #4
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d004      	beq.n	800bc52 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2204      	movs	r2, #4
 800bc4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc4e:	2304      	movs	r3, #4
 800bc50:	e0b1      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc56:	f003 0301 	and.w	r3, r3, #1
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d004      	beq.n	800bc68 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2201      	movs	r2, #1
 800bc62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e0a6      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	22c5      	movs	r2, #197	; 0xc5
 800bc6c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f7ff fcba 	bl	800b5e8 <SDIO_GetCommandResponse>
 800bc74:	4603      	mov	r3, r0
 800bc76:	461a      	mov	r2, r3
 800bc78:	7afb      	ldrb	r3, [r7, #11]
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d001      	beq.n	800bc82 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e099      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bc82:	2100      	movs	r1, #0
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f7ff fcbd 	bl	800b604 <SDIO_GetResponse>
 800bc8a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bc8c:	697a      	ldr	r2, [r7, #20]
 800bc8e:	4b4e      	ldr	r3, [pc, #312]	; (800bdc8 <SDMMC_GetCmdResp1+0x1d8>)
 800bc90:	4013      	ands	r3, r2
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d101      	bne.n	800bc9a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bc96:	2300      	movs	r3, #0
 800bc98:	e08d      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	da02      	bge.n	800bca6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bca0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bca4:	e087      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bcb0:	2340      	movs	r3, #64	; 0x40
 800bcb2:	e080      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d001      	beq.n	800bcc2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bcbe:	2380      	movs	r3, #128	; 0x80
 800bcc0:	e079      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcd0:	e071      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bcdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bce0:	e069      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bcec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcf0:	e061      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bcfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd00:	e059      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d002      	beq.n	800bd12 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd10:	e051      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d002      	beq.n	800bd22 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd20:	e049      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bd2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bd30:	e041      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d002      	beq.n	800bd42 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bd3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd40:	e039      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d002      	beq.n	800bd52 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bd4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bd50:	e031      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d002      	beq.n	800bd62 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bd5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bd60:	e029      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d002      	beq.n	800bd72 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bd6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bd70:	e021      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bd7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bd80:	e019      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d002      	beq.n	800bd92 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bd8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bd90:	e011      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bd9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bda0:	e009      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f003 0308 	and.w	r3, r3, #8
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d002      	beq.n	800bdb2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bdac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bdb0:	e001      	b.n	800bdb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bdb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3720      	adds	r7, #32
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	20000000 	.word	0x20000000
 800bdc4:	10624dd3 	.word	0x10624dd3
 800bdc8:	fdffe008 	.word	0xfdffe008

0800bdcc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdd4:	4b1f      	ldr	r3, [pc, #124]	; (800be54 <SDMMC_GetCmdResp2+0x88>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a1f      	ldr	r2, [pc, #124]	; (800be58 <SDMMC_GetCmdResp2+0x8c>)
 800bdda:	fba2 2303 	umull	r2, r3, r2, r3
 800bdde:	0a5b      	lsrs	r3, r3, #9
 800bde0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bde4:	fb02 f303 	mul.w	r3, r2, r3
 800bde8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	1e5a      	subs	r2, r3, #1
 800bdee:	60fa      	str	r2, [r7, #12]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d102      	bne.n	800bdfa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdf8:	e026      	b.n	800be48 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800be06:	2b00      	cmp	r3, #0
 800be08:	d0ef      	beq.n	800bdea <SDMMC_GetCmdResp2+0x1e>
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1ea      	bne.n	800bdea <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be18:	f003 0304 	and.w	r3, r3, #4
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d004      	beq.n	800be2a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2204      	movs	r2, #4
 800be24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be26:	2304      	movs	r3, #4
 800be28:	e00e      	b.n	800be48 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be2e:	f003 0301 	and.w	r3, r3, #1
 800be32:	2b00      	cmp	r3, #0
 800be34:	d004      	beq.n	800be40 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be3c:	2301      	movs	r3, #1
 800be3e:	e003      	b.n	800be48 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	22c5      	movs	r2, #197	; 0xc5
 800be44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800be46:	2300      	movs	r3, #0
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3714      	adds	r7, #20
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	20000000 	.word	0x20000000
 800be58:	10624dd3 	.word	0x10624dd3

0800be5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be64:	4b1a      	ldr	r3, [pc, #104]	; (800bed0 <SDMMC_GetCmdResp3+0x74>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a1a      	ldr	r2, [pc, #104]	; (800bed4 <SDMMC_GetCmdResp3+0x78>)
 800be6a:	fba2 2303 	umull	r2, r3, r2, r3
 800be6e:	0a5b      	lsrs	r3, r3, #9
 800be70:	f241 3288 	movw	r2, #5000	; 0x1388
 800be74:	fb02 f303 	mul.w	r3, r2, r3
 800be78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	1e5a      	subs	r2, r3, #1
 800be7e:	60fa      	str	r2, [r7, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d102      	bne.n	800be8a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be88:	e01b      	b.n	800bec2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800be96:	2b00      	cmp	r3, #0
 800be98:	d0ef      	beq.n	800be7a <SDMMC_GetCmdResp3+0x1e>
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d1ea      	bne.n	800be7a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea8:	f003 0304 	and.w	r3, r3, #4
 800beac:	2b00      	cmp	r3, #0
 800beae:	d004      	beq.n	800beba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2204      	movs	r2, #4
 800beb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800beb6:	2304      	movs	r3, #4
 800beb8:	e003      	b.n	800bec2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	22c5      	movs	r2, #197	; 0xc5
 800bebe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3714      	adds	r7, #20
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	20000000 	.word	0x20000000
 800bed4:	10624dd3 	.word	0x10624dd3

0800bed8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	460b      	mov	r3, r1
 800bee2:	607a      	str	r2, [r7, #4]
 800bee4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bee6:	4b35      	ldr	r3, [pc, #212]	; (800bfbc <SDMMC_GetCmdResp6+0xe4>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a35      	ldr	r2, [pc, #212]	; (800bfc0 <SDMMC_GetCmdResp6+0xe8>)
 800beec:	fba2 2303 	umull	r2, r3, r2, r3
 800bef0:	0a5b      	lsrs	r3, r3, #9
 800bef2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bef6:	fb02 f303 	mul.w	r3, r2, r3
 800befa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	1e5a      	subs	r2, r3, #1
 800bf00:	61fa      	str	r2, [r7, #28]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d102      	bne.n	800bf0c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf0a:	e052      	b.n	800bfb2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf10:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d0ef      	beq.n	800befc <SDMMC_GetCmdResp6+0x24>
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1ea      	bne.n	800befc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf2a:	f003 0304 	and.w	r3, r3, #4
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d004      	beq.n	800bf3c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2204      	movs	r2, #4
 800bf36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf38:	2304      	movs	r3, #4
 800bf3a:	e03a      	b.n	800bfb2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf40:	f003 0301 	and.w	r3, r3, #1
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d004      	beq.n	800bf52 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e02f      	b.n	800bfb2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f7ff fb48 	bl	800b5e8 <SDIO_GetCommandResponse>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	7afb      	ldrb	r3, [r7, #11]
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d001      	beq.n	800bf66 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf62:	2301      	movs	r3, #1
 800bf64:	e025      	b.n	800bfb2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	22c5      	movs	r2, #197	; 0xc5
 800bf6a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f7ff fb48 	bl	800b604 <SDIO_GetResponse>
 800bf74:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d106      	bne.n	800bf8e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	0c1b      	lsrs	r3, r3, #16
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e011      	b.n	800bfb2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d002      	beq.n	800bf9e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bf98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf9c:	e009      	b.n	800bfb2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d002      	beq.n	800bfae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bfa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfac:	e001      	b.n	800bfb2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bfae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3720      	adds	r7, #32
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	20000000 	.word	0x20000000
 800bfc0:	10624dd3 	.word	0x10624dd3

0800bfc4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bfcc:	4b22      	ldr	r3, [pc, #136]	; (800c058 <SDMMC_GetCmdResp7+0x94>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4a22      	ldr	r2, [pc, #136]	; (800c05c <SDMMC_GetCmdResp7+0x98>)
 800bfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfd6:	0a5b      	lsrs	r3, r3, #9
 800bfd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfdc:	fb02 f303 	mul.w	r3, r2, r3
 800bfe0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	1e5a      	subs	r2, r3, #1
 800bfe6:	60fa      	str	r2, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d102      	bne.n	800bff2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bff0:	e02c      	b.n	800c04c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bff6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d0ef      	beq.n	800bfe2 <SDMMC_GetCmdResp7+0x1e>
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1ea      	bne.n	800bfe2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c010:	f003 0304 	and.w	r3, r3, #4
 800c014:	2b00      	cmp	r3, #0
 800c016:	d004      	beq.n	800c022 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2204      	movs	r2, #4
 800c01c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c01e:	2304      	movs	r3, #4
 800c020:	e014      	b.n	800c04c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d004      	beq.n	800c038 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2201      	movs	r2, #1
 800c032:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c034:	2301      	movs	r3, #1
 800c036:	e009      	b.n	800c04c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c040:	2b00      	cmp	r3, #0
 800c042:	d002      	beq.n	800c04a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2240      	movs	r2, #64	; 0x40
 800c048:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c04a:	2300      	movs	r3, #0
  
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3714      	adds	r7, #20
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	20000000 	.word	0x20000000
 800c05c:	10624dd3 	.word	0x10624dd3

0800c060 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c068:	4b11      	ldr	r3, [pc, #68]	; (800c0b0 <SDMMC_GetCmdError+0x50>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4a11      	ldr	r2, [pc, #68]	; (800c0b4 <SDMMC_GetCmdError+0x54>)
 800c06e:	fba2 2303 	umull	r2, r3, r2, r3
 800c072:	0a5b      	lsrs	r3, r3, #9
 800c074:	f241 3288 	movw	r2, #5000	; 0x1388
 800c078:	fb02 f303 	mul.w	r3, r2, r3
 800c07c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	1e5a      	subs	r2, r3, #1
 800c082:	60fa      	str	r2, [r7, #12]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d102      	bne.n	800c08e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c088:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c08c:	e009      	b.n	800c0a2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c096:	2b00      	cmp	r3, #0
 800c098:	d0f1      	beq.n	800c07e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	22c5      	movs	r2, #197	; 0xc5
 800c09e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	20000000 	.word	0x20000000
 800c0b4:	10624dd3 	.word	0x10624dd3

0800c0b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0b8:	b084      	sub	sp, #16
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	f107 001c 	add.w	r0, r7, #28
 800c0c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d122      	bne.n	800c116 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c0e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d105      	bne.n	800c10a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f9c0 	bl	800c490 <USB_CoreReset>
 800c110:	4603      	mov	r3, r0
 800c112:	73fb      	strb	r3, [r7, #15]
 800c114:	e01a      	b.n	800c14c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f9b4 	bl	800c490 <USB_CoreReset>
 800c128:	4603      	mov	r3, r0
 800c12a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c12c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d106      	bne.n	800c140 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c136:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	639a      	str	r2, [r3, #56]	; 0x38
 800c13e:	e005      	b.n	800c14c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c144:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d10b      	bne.n	800c16a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	f043 0206 	orr.w	r2, r3, #6
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	f043 0220 	orr.w	r2, r3, #32
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c176:	b004      	add	sp, #16
 800c178:	4770      	bx	lr

0800c17a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c17a:	b480      	push	{r7}
 800c17c:	b083      	sub	sp, #12
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f043 0201 	orr.w	r2, r3, #1
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c18e:	2300      	movs	r3, #0
}
 800c190:	4618      	mov	r0, r3
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	f023 0201 	bic.w	r2, r3, #1
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	370c      	adds	r7, #12
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b084      	sub	sp, #16
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c1da:	78fb      	ldrb	r3, [r7, #3]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d115      	bne.n	800c20c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c1ec:	2001      	movs	r0, #1
 800c1ee:	f7f5 fe47 	bl	8001e80 <HAL_Delay>
      ms++;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f93a 	bl	800c472 <USB_GetMode>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b01      	cmp	r3, #1
 800c202:	d01e      	beq.n	800c242 <USB_SetCurrentMode+0x84>
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2b31      	cmp	r3, #49	; 0x31
 800c208:	d9f0      	bls.n	800c1ec <USB_SetCurrentMode+0x2e>
 800c20a:	e01a      	b.n	800c242 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c20c:	78fb      	ldrb	r3, [r7, #3]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d115      	bne.n	800c23e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c21e:	2001      	movs	r0, #1
 800c220:	f7f5 fe2e 	bl	8001e80 <HAL_Delay>
      ms++;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3301      	adds	r3, #1
 800c228:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 f921 	bl	800c472 <USB_GetMode>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d005      	beq.n	800c242 <USB_SetCurrentMode+0x84>
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2b31      	cmp	r3, #49	; 0x31
 800c23a:	d9f0      	bls.n	800c21e <USB_SetCurrentMode+0x60>
 800c23c:	e001      	b.n	800c242 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e005      	b.n	800c24e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2b32      	cmp	r3, #50	; 0x32
 800c246:	d101      	bne.n	800c24c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c248:	2301      	movs	r3, #1
 800c24a:	e000      	b.n	800c24e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
	...

0800c258 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c262:	2300      	movs	r3, #0
 800c264:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3301      	adds	r3, #1
 800c26a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	4a13      	ldr	r2, [pc, #76]	; (800c2bc <USB_FlushTxFifo+0x64>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d901      	bls.n	800c278 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c274:	2303      	movs	r3, #3
 800c276:	e01b      	b.n	800c2b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	daf2      	bge.n	800c266 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c280:	2300      	movs	r3, #0
 800c282:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	019b      	lsls	r3, r3, #6
 800c288:	f043 0220 	orr.w	r2, r3, #32
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	3301      	adds	r3, #1
 800c294:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	4a08      	ldr	r2, [pc, #32]	; (800c2bc <USB_FlushTxFifo+0x64>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d901      	bls.n	800c2a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c29e:	2303      	movs	r3, #3
 800c2a0:	e006      	b.n	800c2b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	f003 0320 	and.w	r3, r3, #32
 800c2aa:	2b20      	cmp	r3, #32
 800c2ac:	d0f0      	beq.n	800c290 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr
 800c2bc:	00030d40 	.word	0x00030d40

0800c2c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	4a11      	ldr	r2, [pc, #68]	; (800c31c <USB_FlushRxFifo+0x5c>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d901      	bls.n	800c2de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e018      	b.n	800c310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	daf2      	bge.n	800c2cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2210      	movs	r2, #16
 800c2ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	4a08      	ldr	r2, [pc, #32]	; (800c31c <USB_FlushRxFifo+0x5c>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d901      	bls.n	800c302 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c2fe:	2303      	movs	r3, #3
 800c300:	e006      	b.n	800c310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	691b      	ldr	r3, [r3, #16]
 800c306:	f003 0310 	and.w	r3, r3, #16
 800c30a:	2b10      	cmp	r3, #16
 800c30c:	d0f0      	beq.n	800c2f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	00030d40 	.word	0x00030d40

0800c320 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c320:	b480      	push	{r7}
 800c322:	b089      	sub	sp, #36	; 0x24
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	4611      	mov	r1, r2
 800c32c:	461a      	mov	r2, r3
 800c32e:	460b      	mov	r3, r1
 800c330:	71fb      	strb	r3, [r7, #7]
 800c332:	4613      	mov	r3, r2
 800c334:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c33e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c342:	2b00      	cmp	r3, #0
 800c344:	d123      	bne.n	800c38e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c346:	88bb      	ldrh	r3, [r7, #4]
 800c348:	3303      	adds	r3, #3
 800c34a:	089b      	lsrs	r3, r3, #2
 800c34c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c34e:	2300      	movs	r3, #0
 800c350:	61bb      	str	r3, [r7, #24]
 800c352:	e018      	b.n	800c386 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c354:	79fb      	ldrb	r3, [r7, #7]
 800c356:	031a      	lsls	r2, r3, #12
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c360:	461a      	mov	r2, r3
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	3301      	adds	r3, #1
 800c36c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	3301      	adds	r3, #1
 800c372:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	3301      	adds	r3, #1
 800c378:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	3301      	adds	r3, #1
 800c37e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	3301      	adds	r3, #1
 800c384:	61bb      	str	r3, [r7, #24]
 800c386:	69ba      	ldr	r2, [r7, #24]
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d3e2      	bcc.n	800c354 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3724      	adds	r7, #36	; 0x24
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b08b      	sub	sp, #44	; 0x2c
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c3b2:	88fb      	ldrh	r3, [r7, #6]
 800c3b4:	089b      	lsrs	r3, r3, #2
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c3ba:	88fb      	ldrh	r3, [r7, #6]
 800c3bc:	f003 0303 	and.w	r3, r3, #3
 800c3c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	623b      	str	r3, [r7, #32]
 800c3c6:	e014      	b.n	800c3f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	601a      	str	r2, [r3, #0]
    pDest++;
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3dc:	3301      	adds	r3, #1
 800c3de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c3ec:	6a3b      	ldr	r3, [r7, #32]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	623b      	str	r3, [r7, #32]
 800c3f2:	6a3a      	ldr	r2, [r7, #32]
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d3e6      	bcc.n	800c3c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c3fa:	8bfb      	ldrh	r3, [r7, #30]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d01e      	beq.n	800c43e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c400:	2300      	movs	r3, #0
 800c402:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c40a:	461a      	mov	r2, r3
 800c40c:	f107 0310 	add.w	r3, r7, #16
 800c410:	6812      	ldr	r2, [r2, #0]
 800c412:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c414:	693a      	ldr	r2, [r7, #16]
 800c416:	6a3b      	ldr	r3, [r7, #32]
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	fa22 f303 	lsr.w	r3, r2, r3
 800c420:	b2da      	uxtb	r2, r3
 800c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c424:	701a      	strb	r2, [r3, #0]
      i++;
 800c426:	6a3b      	ldr	r3, [r7, #32]
 800c428:	3301      	adds	r3, #1
 800c42a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42e:	3301      	adds	r3, #1
 800c430:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c432:	8bfb      	ldrh	r3, [r7, #30]
 800c434:	3b01      	subs	r3, #1
 800c436:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c438:	8bfb      	ldrh	r3, [r7, #30]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1ea      	bne.n	800c414 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c440:	4618      	mov	r0, r3
 800c442:	372c      	adds	r7, #44	; 0x2c
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	699b      	ldr	r3, [r3, #24]
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	4013      	ands	r3, r2
 800c462:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c464:	68fb      	ldr	r3, [r7, #12]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3714      	adds	r7, #20
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr

0800c472 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c472:	b480      	push	{r7}
 800c474:	b083      	sub	sp, #12
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	f003 0301 	and.w	r3, r3, #1
}
 800c482:	4618      	mov	r0, r3
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
	...

0800c490 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c498:	2300      	movs	r3, #0
 800c49a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	4a13      	ldr	r2, [pc, #76]	; (800c4f4 <USB_CoreReset+0x64>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d901      	bls.n	800c4ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c4aa:	2303      	movs	r3, #3
 800c4ac:	e01b      	b.n	800c4e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	691b      	ldr	r3, [r3, #16]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	daf2      	bge.n	800c49c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	691b      	ldr	r3, [r3, #16]
 800c4be:	f043 0201 	orr.w	r2, r3, #1
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	4a09      	ldr	r2, [pc, #36]	; (800c4f4 <USB_CoreReset+0x64>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d901      	bls.n	800c4d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	e006      	b.n	800c4e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	691b      	ldr	r3, [r3, #16]
 800c4dc:	f003 0301 	and.w	r3, r3, #1
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d0f0      	beq.n	800c4c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3714      	adds	r7, #20
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	00030d40 	.word	0x00030d40

0800c4f8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c4f8:	b084      	sub	sp, #16
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b086      	sub	sp, #24
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c506:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c50a:	2300      	movs	r3, #0
 800c50c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c518:	461a      	mov	r2, r3
 800c51a:	2300      	movs	r3, #0
 800c51c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c522:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c52e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c532:	2b00      	cmp	r3, #0
 800c534:	d018      	beq.n	800c568 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d10a      	bne.n	800c552 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c54a:	f043 0304 	orr.w	r3, r3, #4
 800c54e:	6013      	str	r3, [r2, #0]
 800c550:	e014      	b.n	800c57c <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c560:	f023 0304 	bic.w	r3, r3, #4
 800c564:	6013      	str	r3, [r2, #0]
 800c566:	e009      	b.n	800c57c <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c576:	f023 0304 	bic.w	r3, r3, #4
 800c57a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c57c:	2110      	movs	r1, #16
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7ff fe6a 	bl	800c258 <USB_FlushTxFifo>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d001      	beq.n	800c58e <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7ff fe96 	bl	800c2c0 <USB_FlushRxFifo>
 800c594:	4603      	mov	r3, r0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d001      	beq.n	800c59e <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c59e:	2300      	movs	r3, #0
 800c5a0:	613b      	str	r3, [r7, #16]
 800c5a2:	e015      	b.n	800c5d0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	015a      	lsls	r2, r3, #5
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	015a      	lsls	r2, r3, #5
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	4413      	add	r3, r2
 800c5c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	613b      	str	r3, [r7, #16]
 800c5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d2:	693a      	ldr	r2, [r7, #16]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d3e5      	bcc.n	800c5a4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00b      	beq.n	800c60a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4a13      	ldr	r2, [pc, #76]	; (800c64c <USB_HostInit+0x154>)
 800c5fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a13      	ldr	r2, [pc, #76]	; (800c650 <USB_HostInit+0x158>)
 800c604:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c608:	e009      	b.n	800c61e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2280      	movs	r2, #128	; 0x80
 800c60e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4a10      	ldr	r2, [pc, #64]	; (800c654 <USB_HostInit+0x15c>)
 800c614:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4a0f      	ldr	r2, [pc, #60]	; (800c658 <USB_HostInit+0x160>)
 800c61a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	2b00      	cmp	r3, #0
 800c622:	d105      	bne.n	800c630 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	699b      	ldr	r3, [r3, #24]
 800c628:	f043 0210 	orr.w	r2, r3, #16
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	699a      	ldr	r2, [r3, #24]
 800c634:	4b09      	ldr	r3, [pc, #36]	; (800c65c <USB_HostInit+0x164>)
 800c636:	4313      	orrs	r3, r2
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3718      	adds	r7, #24
 800c642:	46bd      	mov	sp, r7
 800c644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c648:	b004      	add	sp, #16
 800c64a:	4770      	bx	lr
 800c64c:	01000200 	.word	0x01000200
 800c650:	00e00300 	.word	0x00e00300
 800c654:	00600080 	.word	0x00600080
 800c658:	004000e0 	.word	0x004000e0
 800c65c:	a3200008 	.word	0xa3200008

0800c660 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	460b      	mov	r3, r1
 800c66a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c67e:	f023 0303 	bic.w	r3, r3, #3
 800c682:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	78fb      	ldrb	r3, [r7, #3]
 800c68e:	f003 0303 	and.w	r3, r3, #3
 800c692:	68f9      	ldr	r1, [r7, #12]
 800c694:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c698:	4313      	orrs	r3, r2
 800c69a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c69c:	78fb      	ldrb	r3, [r7, #3]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d107      	bne.n	800c6b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c6ae:	6053      	str	r3, [r2, #4]
 800c6b0:	e009      	b.n	800c6c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c6b2:	78fb      	ldrb	r3, [r7, #3]
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d106      	bne.n	800c6c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6be:	461a      	mov	r2, r3
 800c6c0:	f241 7370 	movw	r3, #6000	; 0x1770
 800c6c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c6c6:	2300      	movs	r3, #0
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3714      	adds	r7, #20
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c6f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c6fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c702:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c704:	2064      	movs	r0, #100	; 0x64
 800c706:	f7f5 fbbb 	bl	8001e80 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c716:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c718:	200a      	movs	r0, #10
 800c71a:	f7f5 fbb1 	bl	8001e80 <HAL_Delay>

  return HAL_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3710      	adds	r7, #16
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	460b      	mov	r3, r1
 800c732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c738:	2300      	movs	r3, #0
 800c73a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c74c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c754:	2b00      	cmp	r3, #0
 800c756:	d109      	bne.n	800c76c <USB_DriveVbus+0x44>
 800c758:	78fb      	ldrb	r3, [r7, #3]
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d106      	bne.n	800c76c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c766:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c76a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c776:	d109      	bne.n	800c78c <USB_DriveVbus+0x64>
 800c778:	78fb      	ldrb	r3, [r7, #3]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d106      	bne.n	800c78c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c78a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3714      	adds	r7, #20
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr

0800c79a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c79a:	b480      	push	{r7}
 800c79c:	b085      	sub	sp, #20
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	0c5b      	lsrs	r3, r3, #17
 800c7b8:	f003 0303 	and.w	r3, r3, #3
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3714      	adds	r7, #20
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	b29b      	uxth	r3, r3
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3714      	adds	r7, #20
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
	...

0800c7ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b088      	sub	sp, #32
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	4608      	mov	r0, r1
 800c7f6:	4611      	mov	r1, r2
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	70fb      	strb	r3, [r7, #3]
 800c7fe:	460b      	mov	r3, r1
 800c800:	70bb      	strb	r3, [r7, #2]
 800c802:	4613      	mov	r3, r2
 800c804:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c806:	2300      	movs	r3, #0
 800c808:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c80e:	78fb      	ldrb	r3, [r7, #3]
 800c810:	015a      	lsls	r2, r3, #5
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	4413      	add	r3, r2
 800c816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c81a:	461a      	mov	r2, r3
 800c81c:	f04f 33ff 	mov.w	r3, #4294967295
 800c820:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c822:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c826:	2b03      	cmp	r3, #3
 800c828:	d87e      	bhi.n	800c928 <USB_HC_Init+0x13c>
 800c82a:	a201      	add	r2, pc, #4	; (adr r2, 800c830 <USB_HC_Init+0x44>)
 800c82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c830:	0800c841 	.word	0x0800c841
 800c834:	0800c8eb 	.word	0x0800c8eb
 800c838:	0800c841 	.word	0x0800c841
 800c83c:	0800c8ad 	.word	0x0800c8ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c840:	78fb      	ldrb	r3, [r7, #3]
 800c842:	015a      	lsls	r2, r3, #5
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	4413      	add	r3, r2
 800c848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c84c:	461a      	mov	r2, r3
 800c84e:	f240 439d 	movw	r3, #1181	; 0x49d
 800c852:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c854:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	da10      	bge.n	800c87e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c85c:	78fb      	ldrb	r3, [r7, #3]
 800c85e:	015a      	lsls	r2, r3, #5
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	4413      	add	r3, r2
 800c864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	78fa      	ldrb	r2, [r7, #3]
 800c86c:	0151      	lsls	r1, r2, #5
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	440a      	add	r2, r1
 800c872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c87a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c87c:	e057      	b.n	800c92e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c886:	2b00      	cmp	r3, #0
 800c888:	d051      	beq.n	800c92e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c88a:	78fb      	ldrb	r3, [r7, #3]
 800c88c:	015a      	lsls	r2, r3, #5
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	4413      	add	r3, r2
 800c892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	78fa      	ldrb	r2, [r7, #3]
 800c89a:	0151      	lsls	r1, r2, #5
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	440a      	add	r2, r1
 800c8a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c8a8:	60d3      	str	r3, [r2, #12]
      break;
 800c8aa:	e040      	b.n	800c92e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c8ac:	78fb      	ldrb	r3, [r7, #3]
 800c8ae:	015a      	lsls	r2, r3, #5
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	f240 639d 	movw	r3, #1693	; 0x69d
 800c8be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c8c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	da34      	bge.n	800c932 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c8c8:	78fb      	ldrb	r3, [r7, #3]
 800c8ca:	015a      	lsls	r2, r3, #5
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	78fa      	ldrb	r2, [r7, #3]
 800c8d8:	0151      	lsls	r1, r2, #5
 800c8da:	693a      	ldr	r2, [r7, #16]
 800c8dc:	440a      	add	r2, r1
 800c8de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c8e8:	e023      	b.n	800c932 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c8ea:	78fb      	ldrb	r3, [r7, #3]
 800c8ec:	015a      	lsls	r2, r3, #5
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	f240 2325 	movw	r3, #549	; 0x225
 800c8fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c8fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c902:	2b00      	cmp	r3, #0
 800c904:	da17      	bge.n	800c936 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c906:	78fb      	ldrb	r3, [r7, #3]
 800c908:	015a      	lsls	r2, r3, #5
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	4413      	add	r3, r2
 800c90e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	78fa      	ldrb	r2, [r7, #3]
 800c916:	0151      	lsls	r1, r2, #5
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	440a      	add	r2, r1
 800c91c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c920:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c924:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c926:	e006      	b.n	800c936 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c928:	2301      	movs	r3, #1
 800c92a:	77fb      	strb	r3, [r7, #31]
      break;
 800c92c:	e004      	b.n	800c938 <USB_HC_Init+0x14c>
      break;
 800c92e:	bf00      	nop
 800c930:	e002      	b.n	800c938 <USB_HC_Init+0x14c>
      break;
 800c932:	bf00      	nop
 800c934:	e000      	b.n	800c938 <USB_HC_Init+0x14c>
      break;
 800c936:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c938:	78fb      	ldrb	r3, [r7, #3]
 800c93a:	015a      	lsls	r2, r3, #5
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	4413      	add	r3, r2
 800c940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	78fa      	ldrb	r2, [r7, #3]
 800c948:	0151      	lsls	r1, r2, #5
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	440a      	add	r2, r1
 800c94e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c952:	f043 0302 	orr.w	r3, r3, #2
 800c956:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c95e:	699a      	ldr	r2, [r3, #24]
 800c960:	78fb      	ldrb	r3, [r7, #3]
 800c962:	f003 030f 	and.w	r3, r3, #15
 800c966:	2101      	movs	r1, #1
 800c968:	fa01 f303 	lsl.w	r3, r1, r3
 800c96c:	6939      	ldr	r1, [r7, #16]
 800c96e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c972:	4313      	orrs	r3, r2
 800c974:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	699b      	ldr	r3, [r3, #24]
 800c97a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c982:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c986:	2b00      	cmp	r3, #0
 800c988:	da03      	bge.n	800c992 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c98a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c98e:	61bb      	str	r3, [r7, #24]
 800c990:	e001      	b.n	800c996 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c992:	2300      	movs	r3, #0
 800c994:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7ff feff 	bl	800c79a <USB_GetHostSpeed>
 800c99c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c99e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d106      	bne.n	800c9b4 <USB_HC_Init+0x1c8>
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d003      	beq.n	800c9b4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c9ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c9b0:	617b      	str	r3, [r7, #20]
 800c9b2:	e001      	b.n	800c9b8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9b8:	787b      	ldrb	r3, [r7, #1]
 800c9ba:	059b      	lsls	r3, r3, #22
 800c9bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c9c0:	78bb      	ldrb	r3, [r7, #2]
 800c9c2:	02db      	lsls	r3, r3, #11
 800c9c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c9ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c9ce:	049b      	lsls	r3, r3, #18
 800c9d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c9d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c9d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c9d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c9dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9e2:	78fb      	ldrb	r3, [r7, #3]
 800c9e4:	0159      	lsls	r1, r3, #5
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	440b      	add	r3, r1
 800c9ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9f4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c9f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c9fa:	2b03      	cmp	r3, #3
 800c9fc:	d003      	beq.n	800ca06 <USB_HC_Init+0x21a>
 800c9fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d10f      	bne.n	800ca26 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ca06:	78fb      	ldrb	r3, [r7, #3]
 800ca08:	015a      	lsls	r2, r3, #5
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	78fa      	ldrb	r2, [r7, #3]
 800ca16:	0151      	lsls	r1, r2, #5
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	440a      	add	r2, r1
 800ca1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca24:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ca26:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3720      	adds	r7, #32
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b08c      	sub	sp, #48	; 0x30
 800ca34:	af02      	add	r7, sp, #8
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	785b      	ldrb	r3, [r3, #1]
 800ca46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ca48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca4c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d02d      	beq.n	800cab6 <USB_HC_StartXfer+0x86>
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	791b      	ldrb	r3, [r3, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d129      	bne.n	800cab6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800ca62:	79fb      	ldrb	r3, [r7, #7]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d117      	bne.n	800ca98 <USB_HC_StartXfer+0x68>
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	79db      	ldrb	r3, [r3, #7]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d003      	beq.n	800ca78 <USB_HC_StartXfer+0x48>
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	79db      	ldrb	r3, [r3, #7]
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	d10f      	bne.n	800ca98 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	015a      	lsls	r2, r3, #5
 800ca7c:	6a3b      	ldr	r3, [r7, #32]
 800ca7e:	4413      	add	r3, r2
 800ca80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	69fa      	ldr	r2, [r7, #28]
 800ca88:	0151      	lsls	r1, r2, #5
 800ca8a:	6a3a      	ldr	r2, [r7, #32]
 800ca8c:	440a      	add	r2, r1
 800ca8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca96:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800ca98:	79fb      	ldrb	r3, [r7, #7]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10b      	bne.n	800cab6 <USB_HC_StartXfer+0x86>
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	795b      	ldrb	r3, [r3, #5]
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d107      	bne.n	800cab6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	785b      	ldrb	r3, [r3, #1]
 800caaa:	4619      	mov	r1, r3
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f000 fa0f 	bl	800ced0 <USB_DoPing>
      return HAL_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	e0f8      	b.n	800cca8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	695b      	ldr	r3, [r3, #20]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d018      	beq.n	800caf0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	695b      	ldr	r3, [r3, #20]
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	8912      	ldrh	r2, [r2, #8]
 800cac6:	4413      	add	r3, r2
 800cac8:	3b01      	subs	r3, #1
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	8912      	ldrh	r2, [r2, #8]
 800cace:	fbb3 f3f2 	udiv	r3, r3, r2
 800cad2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800cad4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cad6:	8b7b      	ldrh	r3, [r7, #26]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d90b      	bls.n	800caf4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800cadc:	8b7b      	ldrh	r3, [r7, #26]
 800cade:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cae0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cae2:	68ba      	ldr	r2, [r7, #8]
 800cae4:	8912      	ldrh	r2, [r2, #8]
 800cae6:	fb03 f202 	mul.w	r2, r3, r2
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	611a      	str	r2, [r3, #16]
 800caee:	e001      	b.n	800caf4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800caf0:	2301      	movs	r3, #1
 800caf2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	78db      	ldrb	r3, [r3, #3]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d007      	beq.n	800cb0c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cafc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	8912      	ldrh	r2, [r2, #8]
 800cb02:	fb03 f202 	mul.w	r2, r3, r2
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	611a      	str	r2, [r3, #16]
 800cb0a:	e003      	b.n	800cb14 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	695a      	ldr	r2, [r3, #20]
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	691b      	ldr	r3, [r3, #16]
 800cb18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cb1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb1e:	04d9      	lsls	r1, r3, #19
 800cb20:	4b63      	ldr	r3, [pc, #396]	; (800ccb0 <USB_HC_StartXfer+0x280>)
 800cb22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cb24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	7a9b      	ldrb	r3, [r3, #10]
 800cb2a:	075b      	lsls	r3, r3, #29
 800cb2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cb30:	69f9      	ldr	r1, [r7, #28]
 800cb32:	0148      	lsls	r0, r1, #5
 800cb34:	6a39      	ldr	r1, [r7, #32]
 800cb36:	4401      	add	r1, r0
 800cb38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cb3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cb3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800cb40:	79fb      	ldrb	r3, [r7, #7]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d009      	beq.n	800cb5a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	68d9      	ldr	r1, [r3, #12]
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	015a      	lsls	r2, r3, #5
 800cb4e:	6a3b      	ldr	r3, [r7, #32]
 800cb50:	4413      	add	r3, r2
 800cb52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb56:	460a      	mov	r2, r1
 800cb58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800cb5a:	6a3b      	ldr	r3, [r7, #32]
 800cb5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	f003 0301 	and.w	r3, r3, #1
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	bf0c      	ite	eq
 800cb6a:	2301      	moveq	r3, #1
 800cb6c:	2300      	movne	r3, #0
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	015a      	lsls	r2, r3, #5
 800cb76:	6a3b      	ldr	r3, [r7, #32]
 800cb78:	4413      	add	r3, r2
 800cb7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	69fa      	ldr	r2, [r7, #28]
 800cb82:	0151      	lsls	r1, r2, #5
 800cb84:	6a3a      	ldr	r2, [r7, #32]
 800cb86:	440a      	add	r2, r1
 800cb88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cb90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	015a      	lsls	r2, r3, #5
 800cb96:	6a3b      	ldr	r3, [r7, #32]
 800cb98:	4413      	add	r3, r2
 800cb9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	7e7b      	ldrb	r3, [r7, #25]
 800cba2:	075b      	lsls	r3, r3, #29
 800cba4:	69f9      	ldr	r1, [r7, #28]
 800cba6:	0148      	lsls	r0, r1, #5
 800cba8:	6a39      	ldr	r1, [r7, #32]
 800cbaa:	4401      	add	r1, r0
 800cbac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	015a      	lsls	r2, r3, #5
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	4413      	add	r3, r2
 800cbbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cbca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	78db      	ldrb	r3, [r3, #3]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d004      	beq.n	800cbde <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbda:	613b      	str	r3, [r7, #16]
 800cbdc:	e003      	b.n	800cbe6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cbe4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cbec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	015a      	lsls	r2, r3, #5
 800cbf2:	6a3b      	ldr	r3, [r7, #32]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800cc00:	79fb      	ldrb	r3, [r7, #7]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d001      	beq.n	800cc0a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800cc06:	2300      	movs	r3, #0
 800cc08:	e04e      	b.n	800cca8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	78db      	ldrb	r3, [r3, #3]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d149      	bne.n	800cca6 <USB_HC_StartXfer+0x276>
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	695b      	ldr	r3, [r3, #20]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d045      	beq.n	800cca6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	79db      	ldrb	r3, [r3, #7]
 800cc1e:	2b03      	cmp	r3, #3
 800cc20:	d830      	bhi.n	800cc84 <USB_HC_StartXfer+0x254>
 800cc22:	a201      	add	r2, pc, #4	; (adr r2, 800cc28 <USB_HC_StartXfer+0x1f8>)
 800cc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc28:	0800cc39 	.word	0x0800cc39
 800cc2c:	0800cc5d 	.word	0x0800cc5d
 800cc30:	0800cc39 	.word	0x0800cc39
 800cc34:	0800cc5d 	.word	0x0800cc5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	695b      	ldr	r3, [r3, #20]
 800cc3c:	3303      	adds	r3, #3
 800cc3e:	089b      	lsrs	r3, r3, #2
 800cc40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cc42:	8afa      	ldrh	r2, [r7, #22]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d91c      	bls.n	800cc88 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	699b      	ldr	r3, [r3, #24]
 800cc52:	f043 0220 	orr.w	r2, r3, #32
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	619a      	str	r2, [r3, #24]
        }
        break;
 800cc5a:	e015      	b.n	800cc88 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	3303      	adds	r3, #3
 800cc62:	089b      	lsrs	r3, r3, #2
 800cc64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800cc66:	8afa      	ldrh	r2, [r7, #22]
 800cc68:	6a3b      	ldr	r3, [r7, #32]
 800cc6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc6e:	691b      	ldr	r3, [r3, #16]
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d90a      	bls.n	800cc8c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	699b      	ldr	r3, [r3, #24]
 800cc7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	619a      	str	r2, [r3, #24]
        }
        break;
 800cc82:	e003      	b.n	800cc8c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800cc84:	bf00      	nop
 800cc86:	e002      	b.n	800cc8e <USB_HC_StartXfer+0x25e>
        break;
 800cc88:	bf00      	nop
 800cc8a:	e000      	b.n	800cc8e <USB_HC_StartXfer+0x25e>
        break;
 800cc8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	68d9      	ldr	r1, [r3, #12]
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	785a      	ldrb	r2, [r3, #1]
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	695b      	ldr	r3, [r3, #20]
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	9000      	str	r0, [sp, #0]
 800cca0:	68f8      	ldr	r0, [r7, #12]
 800cca2:	f7ff fb3d 	bl	800c320 <USB_WritePacket>
  }

  return HAL_OK;
 800cca6:	2300      	movs	r3, #0
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3728      	adds	r7, #40	; 0x28
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	1ff80000 	.word	0x1ff80000

0800ccb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccc6:	695b      	ldr	r3, [r3, #20]
 800ccc8:	b29b      	uxth	r3, r3
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3714      	adds	r7, #20
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b089      	sub	sp, #36	; 0x24
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	460b      	mov	r3, r1
 800cce0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800cce6:	78fb      	ldrb	r3, [r7, #3]
 800cce8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ccea:	2300      	movs	r3, #0
 800ccec:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	015a      	lsls	r2, r3, #5
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	0c9b      	lsrs	r3, r3, #18
 800ccfe:	f003 0303 	and.w	r3, r3, #3
 800cd02:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	0fdb      	lsrs	r3, r3, #31
 800cd14:	f003 0301 	and.w	r3, r3, #1
 800cd18:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	f003 0320 	and.w	r3, r3, #32
 800cd22:	2b20      	cmp	r3, #32
 800cd24:	d104      	bne.n	800cd30 <USB_HC_Halt+0x5a>
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d101      	bne.n	800cd30 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	e0c8      	b.n	800cec2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d002      	beq.n	800cd3c <USB_HC_Halt+0x66>
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	2b02      	cmp	r3, #2
 800cd3a:	d163      	bne.n	800ce04 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cd3c:	69bb      	ldr	r3, [r7, #24]
 800cd3e:	015a      	lsls	r2, r3, #5
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	4413      	add	r3, r2
 800cd44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	69ba      	ldr	r2, [r7, #24]
 800cd4c:	0151      	lsls	r1, r2, #5
 800cd4e:	69fa      	ldr	r2, [r7, #28]
 800cd50:	440a      	add	r2, r1
 800cd52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	f003 0320 	and.w	r3, r3, #32
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f040 80ab 	bne.w	800cec0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d133      	bne.n	800cdde <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	015a      	lsls	r2, r3, #5
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	69ba      	ldr	r2, [r7, #24]
 800cd86:	0151      	lsls	r1, r2, #5
 800cd88:	69fa      	ldr	r2, [r7, #28]
 800cd8a:	440a      	add	r2, r1
 800cd8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd94:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cd96:	69bb      	ldr	r3, [r7, #24]
 800cd98:	015a      	lsls	r2, r3, #5
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	69ba      	ldr	r2, [r7, #24]
 800cda6:	0151      	lsls	r1, r2, #5
 800cda8:	69fa      	ldr	r2, [r7, #28]
 800cdaa:	440a      	add	r2, r1
 800cdac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cdb4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdc2:	d81d      	bhi.n	800ce00 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	015a      	lsls	r2, r3, #5
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	4413      	add	r3, r2
 800cdcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cdda:	d0ec      	beq.n	800cdb6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cddc:	e070      	b.n	800cec0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	015a      	lsls	r2, r3, #5
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	4413      	add	r3, r2
 800cde6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	69ba      	ldr	r2, [r7, #24]
 800cdee:	0151      	lsls	r1, r2, #5
 800cdf0:	69fa      	ldr	r2, [r7, #28]
 800cdf2:	440a      	add	r2, r1
 800cdf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cdfc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cdfe:	e05f      	b.n	800cec0 <USB_HC_Halt+0x1ea>
            break;
 800ce00:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ce02:	e05d      	b.n	800cec0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	015a      	lsls	r2, r3, #5
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	69ba      	ldr	r2, [r7, #24]
 800ce14:	0151      	lsls	r1, r2, #5
 800ce16:	69fa      	ldr	r2, [r7, #28]
 800ce18:	440a      	add	r2, r1
 800ce1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce22:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d133      	bne.n	800ce9c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	015a      	lsls	r2, r3, #5
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	69ba      	ldr	r2, [r7, #24]
 800ce44:	0151      	lsls	r1, r2, #5
 800ce46:	69fa      	ldr	r2, [r7, #28]
 800ce48:	440a      	add	r2, r1
 800ce4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	015a      	lsls	r2, r3, #5
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	69ba      	ldr	r2, [r7, #24]
 800ce64:	0151      	lsls	r1, r2, #5
 800ce66:	69fa      	ldr	r2, [r7, #28]
 800ce68:	440a      	add	r2, r1
 800ce6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce72:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	3301      	adds	r3, #1
 800ce78:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce80:	d81d      	bhi.n	800cebe <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	015a      	lsls	r2, r3, #5
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	4413      	add	r3, r2
 800ce8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce98:	d0ec      	beq.n	800ce74 <USB_HC_Halt+0x19e>
 800ce9a:	e011      	b.n	800cec0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	015a      	lsls	r2, r3, #5
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	4413      	add	r3, r2
 800cea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	69ba      	ldr	r2, [r7, #24]
 800ceac:	0151      	lsls	r1, r2, #5
 800ceae:	69fa      	ldr	r2, [r7, #28]
 800ceb0:	440a      	add	r2, r1
 800ceb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ceb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ceba:	6013      	str	r3, [r2, #0]
 800cebc:	e000      	b.n	800cec0 <USB_HC_Halt+0x1ea>
          break;
 800cebe:	bf00      	nop
    }
  }

  return HAL_OK;
 800cec0:	2300      	movs	r3, #0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3724      	adds	r7, #36	; 0x24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr
	...

0800ced0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b087      	sub	sp, #28
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	460b      	mov	r3, r1
 800ceda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800cee0:	78fb      	ldrb	r3, [r7, #3]
 800cee2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800cee4:	2301      	movs	r3, #1
 800cee6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	04da      	lsls	r2, r3, #19
 800ceec:	4b15      	ldr	r3, [pc, #84]	; (800cf44 <USB_DoPing+0x74>)
 800ceee:	4013      	ands	r3, r2
 800cef0:	693a      	ldr	r2, [r7, #16]
 800cef2:	0151      	lsls	r1, r2, #5
 800cef4:	697a      	ldr	r2, [r7, #20]
 800cef6:	440a      	add	r2, r1
 800cef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cefc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf00:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	015a      	lsls	r2, r3, #5
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	4413      	add	r3, r2
 800cf0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf18:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf20:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	015a      	lsls	r2, r3, #5
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	4413      	add	r3, r2
 800cf2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf2e:	461a      	mov	r2, r3
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	371c      	adds	r7, #28
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	1ff80000 	.word	0x1ff80000

0800cf48 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b088      	sub	sp, #32
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f7ff f91d 	bl	800c19c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cf62:	2110      	movs	r1, #16
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7ff f977 	bl	800c258 <USB_FlushTxFifo>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d001      	beq.n	800cf74 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7ff f9a3 	bl	800c2c0 <USB_FlushRxFifo>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d001      	beq.n	800cf84 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800cf80:	2301      	movs	r3, #1
 800cf82:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cf84:	2300      	movs	r3, #0
 800cf86:	61bb      	str	r3, [r7, #24]
 800cf88:	e01f      	b.n	800cfca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	015a      	lsls	r2, r3, #5
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	4413      	add	r3, r2
 800cf92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cfa0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfa8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cfb0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	015a      	lsls	r2, r3, #5
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	4413      	add	r3, r2
 800cfba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	61bb      	str	r3, [r7, #24]
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	2b0f      	cmp	r3, #15
 800cfce:	d9dc      	bls.n	800cf8a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	61bb      	str	r3, [r7, #24]
 800cfd4:	e034      	b.n	800d040 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	015a      	lsls	r2, r3, #5
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	4413      	add	r3, r2
 800cfde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cfec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cff4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cffc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	015a      	lsls	r2, r3, #5
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	4413      	add	r3, r2
 800d006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d00a:	461a      	mov	r2, r3
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	3301      	adds	r3, #1
 800d014:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d01c:	d80c      	bhi.n	800d038 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	015a      	lsls	r2, r3, #5
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	4413      	add	r3, r2
 800d026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d034:	d0ec      	beq.n	800d010 <USB_StopHost+0xc8>
 800d036:	e000      	b.n	800d03a <USB_StopHost+0xf2>
        break;
 800d038:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	3301      	adds	r3, #1
 800d03e:	61bb      	str	r3, [r7, #24]
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	2b0f      	cmp	r3, #15
 800d044:	d9c7      	bls.n	800cfd6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d04c:	461a      	mov	r2, r3
 800d04e:	f04f 33ff 	mov.w	r3, #4294967295
 800d052:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f04f 32ff 	mov.w	r2, #4294967295
 800d05a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f7ff f88c 	bl	800c17a <USB_EnableGlobalInt>

  return ret;
 800d062:	7ffb      	ldrb	r3, [r7, #31]
}
 800d064:	4618      	mov	r0, r3
 800d066:	3720      	adds	r7, #32
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d076:	f000 f87b 	bl	800d170 <BSP_SD_IsDetected>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d001      	beq.n	800d084 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	e012      	b.n	800d0aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d084:	480b      	ldr	r0, [pc, #44]	; (800d0b4 <BSP_SD_Init+0x48>)
 800d086:	f7fb fa57 	bl	8008538 <HAL_SD_Init>
 800d08a:	4603      	mov	r3, r0
 800d08c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d08e:	79fb      	ldrb	r3, [r7, #7]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d109      	bne.n	800d0a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d094:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d098:	4806      	ldr	r0, [pc, #24]	; (800d0b4 <BSP_SD_Init+0x48>)
 800d09a:	f7fb fefb 	bl	8008e94 <HAL_SD_ConfigWideBusOperation>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d0a8:	79fb      	ldrb	r3, [r7, #7]
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	20000650 	.word	0x20000650

0800d0b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	68f9      	ldr	r1, [r7, #12]
 800d0ce:	4806      	ldr	r0, [pc, #24]	; (800d0e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d0d0:	f7fb fb44 	bl	800875c <HAL_SD_ReadBlocks_DMA>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d001      	beq.n	800d0de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d0de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3718      	adds	r7, #24
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	20000650 	.word	0x20000650

0800d0ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b086      	sub	sp, #24
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	68ba      	ldr	r2, [r7, #8]
 800d100:	68f9      	ldr	r1, [r7, #12]
 800d102:	4806      	ldr	r0, [pc, #24]	; (800d11c <BSP_SD_WriteBlocks_DMA+0x30>)
 800d104:	f7fb fc0a 	bl	800891c <HAL_SD_WriteBlocks_DMA>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d001      	beq.n	800d112 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d112:	7dfb      	ldrb	r3, [r7, #23]
}
 800d114:	4618      	mov	r0, r3
 800d116:	3718      	adds	r7, #24
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	20000650 	.word	0x20000650

0800d120 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d124:	4805      	ldr	r0, [pc, #20]	; (800d13c <BSP_SD_GetCardState+0x1c>)
 800d126:	f7fb ff61 	bl	8008fec <HAL_SD_GetCardState>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b04      	cmp	r3, #4
 800d12e:	bf14      	ite	ne
 800d130:	2301      	movne	r3, #1
 800d132:	2300      	moveq	r3, #0
 800d134:	b2db      	uxtb	r3, r3
}
 800d136:	4618      	mov	r0, r3
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	20000650 	.word	0x20000650

0800d140 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d148:	6879      	ldr	r1, [r7, #4]
 800d14a:	4803      	ldr	r0, [pc, #12]	; (800d158 <BSP_SD_GetCardInfo+0x18>)
 800d14c:	f7fb fe76 	bl	8008e3c <HAL_SD_GetCardInfo>
}
 800d150:	bf00      	nop
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	20000650 	.word	0x20000650

0800d15c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d164:	f000 f9d2 	bl	800d50c <BSP_SD_ReadCpltCallback>
}
 800d168:	bf00      	nop
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d176:	2301      	movs	r3, #1
 800d178:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d17a:	f000 f82b 	bl	800d1d4 <BSP_PlatformIsDetected>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d101      	bne.n	800d188 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d184:	2300      	movs	r3, #0
 800d186:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d188:	79fb      	ldrb	r3, [r7, #7]
 800d18a:	b2db      	uxtb	r3, r3
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d198:	4908      	ldr	r1, [pc, #32]	; (800d1bc <MX_FATFS_Init+0x28>)
 800d19a:	4809      	ldr	r0, [pc, #36]	; (800d1c0 <MX_FATFS_Init+0x2c>)
 800d19c:	f000 fb20 	bl	800d7e0 <FATFS_LinkDriver>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	4b07      	ldr	r3, [pc, #28]	; (800d1c4 <MX_FATFS_Init+0x30>)
 800d1a6:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800d1a8:	4907      	ldr	r1, [pc, #28]	; (800d1c8 <MX_FATFS_Init+0x34>)
 800d1aa:	4808      	ldr	r0, [pc, #32]	; (800d1cc <MX_FATFS_Init+0x38>)
 800d1ac:	f000 fb18 	bl	800d7e0 <FATFS_LinkDriver>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	4b06      	ldr	r3, [pc, #24]	; (800d1d0 <MX_FATFS_Init+0x3c>)
 800d1b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d1b8:	bf00      	nop
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	200007fc 	.word	0x200007fc
 800d1c0:	08014338 	.word	0x08014338
 800d1c4:	200007f8 	.word	0x200007f8
 800d1c8:	20000804 	.word	0x20000804
 800d1cc:	0801434c 	.word	0x0801434c
 800d1d0:	20000800 	.word	0x20000800

0800d1d4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d1de:	2104      	movs	r1, #4
 800d1e0:	4806      	ldr	r0, [pc, #24]	; (800d1fc <BSP_PlatformIsDetected+0x28>)
 800d1e2:	f7f6 fd77 	bl	8003cd4 <HAL_GPIO_ReadPin>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d001      	beq.n	800d1f0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d1f0:	79fb      	ldrb	r3, [r7, #7]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3708      	adds	r7, #8
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	40021800 	.word	0x40021800

0800d200 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d208:	f000 fb36 	bl	800d878 <osKernelSysTick>
 800d20c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d20e:	e006      	b.n	800d21e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d210:	f7ff ff86 	bl	800d120 <BSP_SD_GetCardState>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d101      	bne.n	800d21e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	e009      	b.n	800d232 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d21e:	f000 fb2b 	bl	800d878 <osKernelSysTick>
 800d222:	4602      	mov	r2, r0
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	1ad3      	subs	r3, r2, r3
 800d228:	687a      	ldr	r2, [r7, #4]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d8f0      	bhi.n	800d210 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d22e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	4603      	mov	r3, r0
 800d244:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d246:	4b0b      	ldr	r3, [pc, #44]	; (800d274 <SD_CheckStatus+0x38>)
 800d248:	2201      	movs	r2, #1
 800d24a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d24c:	f7ff ff68 	bl	800d120 <BSP_SD_GetCardState>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d107      	bne.n	800d266 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d256:	4b07      	ldr	r3, [pc, #28]	; (800d274 <SD_CheckStatus+0x38>)
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	f023 0301 	bic.w	r3, r3, #1
 800d260:	b2da      	uxtb	r2, r3
 800d262:	4b04      	ldr	r3, [pc, #16]	; (800d274 <SD_CheckStatus+0x38>)
 800d264:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d266:	4b03      	ldr	r3, [pc, #12]	; (800d274 <SD_CheckStatus+0x38>)
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	b2db      	uxtb	r3, r3
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	20000009 	.word	0x20000009

0800d278 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d278:	b590      	push	{r4, r7, lr}
 800d27a:	b087      	sub	sp, #28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	4603      	mov	r3, r0
 800d280:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d282:	4b20      	ldr	r3, [pc, #128]	; (800d304 <SD_initialize+0x8c>)
 800d284:	2201      	movs	r2, #1
 800d286:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d288:	f000 faea 	bl	800d860 <osKernelRunning>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d030      	beq.n	800d2f4 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d292:	f7ff feeb 	bl	800d06c <BSP_SD_Init>
 800d296:	4603      	mov	r3, r0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d107      	bne.n	800d2ac <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d29c:	79fb      	ldrb	r3, [r7, #7]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7ff ffcc 	bl	800d23c <SD_CheckStatus>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	4b16      	ldr	r3, [pc, #88]	; (800d304 <SD_initialize+0x8c>)
 800d2aa:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d2ac:	4b15      	ldr	r3, [pc, #84]	; (800d304 <SD_initialize+0x8c>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d01e      	beq.n	800d2f4 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d2b6:	4b14      	ldr	r3, [pc, #80]	; (800d308 <SD_initialize+0x90>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d10e      	bne.n	800d2dc <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d2be:	4b13      	ldr	r3, [pc, #76]	; (800d30c <SD_initialize+0x94>)
 800d2c0:	f107 0408 	add.w	r4, r7, #8
 800d2c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d2ca:	f107 0308 	add.w	r3, r7, #8
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f000 fb41 	bl	800d958 <osMessageCreate>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	4a0b      	ldr	r2, [pc, #44]	; (800d308 <SD_initialize+0x90>)
 800d2da:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d2dc:	4b0a      	ldr	r3, [pc, #40]	; (800d308 <SD_initialize+0x90>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d107      	bne.n	800d2f4 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d2e4:	4b07      	ldr	r3, [pc, #28]	; (800d304 <SD_initialize+0x8c>)
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	f043 0301 	orr.w	r3, r3, #1
 800d2ee:	b2da      	uxtb	r2, r3
 800d2f0:	4b04      	ldr	r3, [pc, #16]	; (800d304 <SD_initialize+0x8c>)
 800d2f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d2f4:	4b03      	ldr	r3, [pc, #12]	; (800d304 <SD_initialize+0x8c>)
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	b2db      	uxtb	r3, r3
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	371c      	adds	r7, #28
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd90      	pop	{r4, r7, pc}
 800d302:	bf00      	nop
 800d304:	20000009 	.word	0x20000009
 800d308:	20000808 	.word	0x20000808
 800d30c:	080142cc 	.word	0x080142cc

0800d310 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	4603      	mov	r3, r0
 800d318:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d31a:	79fb      	ldrb	r3, [r7, #7]
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7ff ff8d 	bl	800d23c <SD_CheckStatus>
 800d322:	4603      	mov	r3, r0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b08a      	sub	sp, #40	; 0x28
 800d330:	af00      	add	r7, sp, #0
 800d332:	60b9      	str	r1, [r7, #8]
 800d334:	607a      	str	r2, [r7, #4]
 800d336:	603b      	str	r3, [r7, #0]
 800d338:	4603      	mov	r3, r0
 800d33a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d342:	f247 5030 	movw	r0, #30000	; 0x7530
 800d346:	f7ff ff5b 	bl	800d200 <SD_CheckStatusWithTimeout>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	da02      	bge.n	800d356 <SD_read+0x2a>
  {
    return res;
 800d350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d354:	e032      	b.n	800d3bc <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d356:	683a      	ldr	r2, [r7, #0]
 800d358:	6879      	ldr	r1, [r7, #4]
 800d35a:	68b8      	ldr	r0, [r7, #8]
 800d35c:	f7ff feac 	bl	800d0b8 <BSP_SD_ReadBlocks_DMA>
 800d360:	4603      	mov	r3, r0
 800d362:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d124      	bne.n	800d3b8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d36e:	4b15      	ldr	r3, [pc, #84]	; (800d3c4 <SD_read+0x98>)
 800d370:	6819      	ldr	r1, [r3, #0]
 800d372:	f107 0314 	add.w	r3, r7, #20
 800d376:	f247 5230 	movw	r2, #30000	; 0x7530
 800d37a:	4618      	mov	r0, r3
 800d37c:	f000 fb54 	bl	800da28 <osMessageGet>

    if (event.status == osEventMessage)
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	2b10      	cmp	r3, #16
 800d384:	d118      	bne.n	800d3b8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d115      	bne.n	800d3b8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d38c:	f000 fa74 	bl	800d878 <osKernelSysTick>
 800d390:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d392:	e008      	b.n	800d3a6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d394:	f7ff fec4 	bl	800d120 <BSP_SD_GetCardState>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d103      	bne.n	800d3a6 <SD_read+0x7a>
              {
                res = RES_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d3a4:	e008      	b.n	800d3b8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d3a6:	f000 fa67 	bl	800d878 <osKernelSysTick>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	6a3b      	ldr	r3, [r7, #32]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	f247 522f 	movw	r2, #29999	; 0x752f
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d9ed      	bls.n	800d394 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3728      	adds	r7, #40	; 0x28
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	20000808 	.word	0x20000808

0800d3c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b08a      	sub	sp, #40	; 0x28
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60b9      	str	r1, [r7, #8]
 800d3d0:	607a      	str	r2, [r7, #4]
 800d3d2:	603b      	str	r3, [r7, #0]
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d3de:	f247 5030 	movw	r0, #30000	; 0x7530
 800d3e2:	f7ff ff0d 	bl	800d200 <SD_CheckStatusWithTimeout>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	da02      	bge.n	800d3f2 <SD_write+0x2a>
  {
    return res;
 800d3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3f0:	e02e      	b.n	800d450 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d3f2:	683a      	ldr	r2, [r7, #0]
 800d3f4:	6879      	ldr	r1, [r7, #4]
 800d3f6:	68b8      	ldr	r0, [r7, #8]
 800d3f8:	f7ff fe78 	bl	800d0ec <BSP_SD_WriteBlocks_DMA>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d124      	bne.n	800d44c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d402:	4b15      	ldr	r3, [pc, #84]	; (800d458 <SD_write+0x90>)
 800d404:	6819      	ldr	r1, [r3, #0]
 800d406:	f107 0314 	add.w	r3, r7, #20
 800d40a:	f247 5230 	movw	r2, #30000	; 0x7530
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 fb0a 	bl	800da28 <osMessageGet>

    if (event.status == osEventMessage)
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	2b10      	cmp	r3, #16
 800d418:	d118      	bne.n	800d44c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	d115      	bne.n	800d44c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d420:	f000 fa2a 	bl	800d878 <osKernelSysTick>
 800d424:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d426:	e008      	b.n	800d43a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d428:	f7ff fe7a 	bl	800d120 <BSP_SD_GetCardState>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d103      	bne.n	800d43a <SD_write+0x72>
          {
            res = RES_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d438:	e008      	b.n	800d44c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d43a:	f000 fa1d 	bl	800d878 <osKernelSysTick>
 800d43e:	4602      	mov	r2, r0
 800d440:	6a3b      	ldr	r3, [r7, #32]
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	f247 522f 	movw	r2, #29999	; 0x752f
 800d448:	4293      	cmp	r3, r2
 800d44a:	d9ed      	bls.n	800d428 <SD_write+0x60>
    }

  }
#endif

  return res;
 800d44c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d450:	4618      	mov	r0, r3
 800d452:	3728      	adds	r7, #40	; 0x28
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	20000808 	.word	0x20000808

0800d45c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b08c      	sub	sp, #48	; 0x30
 800d460:	af00      	add	r7, sp, #0
 800d462:	4603      	mov	r3, r0
 800d464:	603a      	str	r2, [r7, #0]
 800d466:	71fb      	strb	r3, [r7, #7]
 800d468:	460b      	mov	r3, r1
 800d46a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d46c:	2301      	movs	r3, #1
 800d46e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d472:	4b25      	ldr	r3, [pc, #148]	; (800d508 <SD_ioctl+0xac>)
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	b2db      	uxtb	r3, r3
 800d478:	f003 0301 	and.w	r3, r3, #1
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d001      	beq.n	800d484 <SD_ioctl+0x28>
 800d480:	2303      	movs	r3, #3
 800d482:	e03c      	b.n	800d4fe <SD_ioctl+0xa2>

  switch (cmd)
 800d484:	79bb      	ldrb	r3, [r7, #6]
 800d486:	2b03      	cmp	r3, #3
 800d488:	d834      	bhi.n	800d4f4 <SD_ioctl+0x98>
 800d48a:	a201      	add	r2, pc, #4	; (adr r2, 800d490 <SD_ioctl+0x34>)
 800d48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d490:	0800d4a1 	.word	0x0800d4a1
 800d494:	0800d4a9 	.word	0x0800d4a9
 800d498:	0800d4c1 	.word	0x0800d4c1
 800d49c:	0800d4db 	.word	0x0800d4db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4a6:	e028      	b.n	800d4fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4a8:	f107 030c 	add.w	r3, r7, #12
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7ff fe47 	bl	800d140 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4be:	e01c      	b.n	800d4fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4c0:	f107 030c 	add.w	r3, r7, #12
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7ff fe3b 	bl	800d140 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4cc:	b29a      	uxth	r2, r3
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4d8:	e00f      	b.n	800d4fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d4da:	f107 030c 	add.w	r3, r7, #12
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7ff fe2e 	bl	800d140 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e6:	0a5a      	lsrs	r2, r3, #9
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d4f2:	e002      	b.n	800d4fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d4f4:	2304      	movs	r3, #4
 800d4f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d4fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3730      	adds	r7, #48	; 0x30
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20000009 	.word	0x20000009

0800d50c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d510:	4b04      	ldr	r3, [pc, #16]	; (800d524 <BSP_SD_ReadCpltCallback+0x18>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2200      	movs	r2, #0
 800d516:	2101      	movs	r1, #1
 800d518:	4618      	mov	r0, r3
 800d51a:	f000 fa45 	bl	800d9a8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d51e:	bf00      	nop
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	20000808 	.word	0x20000808

0800d528 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	4603      	mov	r3, r0
 800d530:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800d532:	2300      	movs	r3, #0
}
 800d534:	4618      	mov	r0, r3
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	4603      	mov	r3, r0
 800d548:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800d54a:	2301      	movs	r3, #1
 800d54c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800d54e:	79fb      	ldrb	r3, [r7, #7]
 800d550:	4619      	mov	r1, r3
 800d552:	4808      	ldr	r0, [pc, #32]	; (800d574 <USBH_status+0x34>)
 800d554:	f003 f9d9 	bl	801090a <USBH_MSC_UnitIsReady>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d002      	beq.n	800d564 <USBH_status+0x24>
  {
    res = RES_OK;
 800d55e:	2300      	movs	r3, #0
 800d560:	73fb      	strb	r3, [r7, #15]
 800d562:	e001      	b.n	800d568 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800d564:	2301      	movs	r3, #1
 800d566:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800d568:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	20008970 	.word	0x20008970

0800d578 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b094      	sub	sp, #80	; 0x50
 800d57c:	af02      	add	r7, sp, #8
 800d57e:	60b9      	str	r1, [r7, #8]
 800d580:	607a      	str	r2, [r7, #4]
 800d582:	603b      	str	r3, [r7, #0]
 800d584:	4603      	mov	r3, r0
 800d586:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800d58e:	7bf9      	ldrb	r1, [r7, #15]
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	4813      	ldr	r0, [pc, #76]	; (800d5e8 <USBH_read+0x70>)
 800d59a:	f003 fa00 	bl	801099e <USBH_MSC_Read>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d103      	bne.n	800d5ac <USBH_read+0x34>
  {
    res = RES_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d5aa:	e017      	b.n	800d5dc <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800d5ac:	f107 0210 	add.w	r2, r7, #16
 800d5b0:	7bfb      	ldrb	r3, [r7, #15]
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	480c      	ldr	r0, [pc, #48]	; (800d5e8 <USBH_read+0x70>)
 800d5b6:	f003 f9ce 	bl	8010956 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800d5ba:	7f7b      	ldrb	r3, [r7, #29]
 800d5bc:	2b3a      	cmp	r3, #58	; 0x3a
 800d5be:	d005      	beq.n	800d5cc <USBH_read+0x54>
 800d5c0:	2b3a      	cmp	r3, #58	; 0x3a
 800d5c2:	dc07      	bgt.n	800d5d4 <USBH_read+0x5c>
 800d5c4:	2b04      	cmp	r3, #4
 800d5c6:	d001      	beq.n	800d5cc <USBH_read+0x54>
 800d5c8:	2b28      	cmp	r3, #40	; 0x28
 800d5ca:	d103      	bne.n	800d5d4 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800d5cc:	2303      	movs	r3, #3
 800d5ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d5d2:	e003      	b.n	800d5dc <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d5da:	bf00      	nop
    }
  }

  return res;
 800d5dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3748      	adds	r7, #72	; 0x48
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	20008970 	.word	0x20008970

0800d5ec <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b094      	sub	sp, #80	; 0x50
 800d5f0:	af02      	add	r7, sp, #8
 800d5f2:	60b9      	str	r1, [r7, #8]
 800d5f4:	607a      	str	r2, [r7, #4]
 800d5f6:	603b      	str	r3, [r7, #0]
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800d602:	7bf9      	ldrb	r1, [r7, #15]
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	4817      	ldr	r0, [pc, #92]	; (800d66c <USBH_write+0x80>)
 800d60e:	f003 fa2f 	bl	8010a70 <USBH_MSC_Write>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d103      	bne.n	800d620 <USBH_write+0x34>
  {
    res = RES_OK;
 800d618:	2300      	movs	r3, #0
 800d61a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d61e:	e01f      	b.n	800d660 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800d620:	f107 0210 	add.w	r2, r7, #16
 800d624:	7bfb      	ldrb	r3, [r7, #15]
 800d626:	4619      	mov	r1, r3
 800d628:	4810      	ldr	r0, [pc, #64]	; (800d66c <USBH_write+0x80>)
 800d62a:	f003 f994 	bl	8010956 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800d62e:	7f7b      	ldrb	r3, [r7, #29]
 800d630:	2b3a      	cmp	r3, #58	; 0x3a
 800d632:	d00d      	beq.n	800d650 <USBH_write+0x64>
 800d634:	2b3a      	cmp	r3, #58	; 0x3a
 800d636:	dc0f      	bgt.n	800d658 <USBH_write+0x6c>
 800d638:	2b28      	cmp	r3, #40	; 0x28
 800d63a:	d009      	beq.n	800d650 <USBH_write+0x64>
 800d63c:	2b28      	cmp	r3, #40	; 0x28
 800d63e:	dc0b      	bgt.n	800d658 <USBH_write+0x6c>
 800d640:	2b04      	cmp	r3, #4
 800d642:	d005      	beq.n	800d650 <USBH_write+0x64>
 800d644:	2b27      	cmp	r3, #39	; 0x27
 800d646:	d107      	bne.n	800d658 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800d648:	2302      	movs	r3, #2
 800d64a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d64e:	e007      	b.n	800d660 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800d650:	2303      	movs	r3, #3
 800d652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d656:	e003      	b.n	800d660 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800d658:	2301      	movs	r3, #1
 800d65a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d65e:	bf00      	nop
    }
  }

  return res;
 800d660:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d664:	4618      	mov	r0, r3
 800d666:	3748      	adds	r7, #72	; 0x48
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	20008970 	.word	0x20008970

0800d670 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b090      	sub	sp, #64	; 0x40
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	603a      	str	r2, [r7, #0]
 800d67a:	71fb      	strb	r3, [r7, #7]
 800d67c:	460b      	mov	r3, r1
 800d67e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800d686:	79bb      	ldrb	r3, [r7, #6]
 800d688:	2b03      	cmp	r3, #3
 800d68a:	d852      	bhi.n	800d732 <USBH_ioctl+0xc2>
 800d68c:	a201      	add	r2, pc, #4	; (adr r2, 800d694 <USBH_ioctl+0x24>)
 800d68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d692:	bf00      	nop
 800d694:	0800d6a5 	.word	0x0800d6a5
 800d698:	0800d6ad 	.word	0x0800d6ad
 800d69c:	0800d6d7 	.word	0x0800d6d7
 800d6a0:	0800d703 	.word	0x0800d703
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d6aa:	e045      	b.n	800d738 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800d6ac:	f107 0208 	add.w	r2, r7, #8
 800d6b0:	79fb      	ldrb	r3, [r7, #7]
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	4823      	ldr	r0, [pc, #140]	; (800d744 <USBH_ioctl+0xd4>)
 800d6b6:	f003 f94e 	bl	8010956 <USBH_MSC_GetLUNInfo>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d106      	bne.n	800d6ce <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800d6cc:	e034      	b.n	800d738 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d6d4:	e030      	b.n	800d738 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800d6d6:	f107 0208 	add.w	r2, r7, #8
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	4819      	ldr	r0, [pc, #100]	; (800d744 <USBH_ioctl+0xd4>)
 800d6e0:	f003 f939 	bl	8010956 <USBH_MSC_GetLUNInfo>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d107      	bne.n	800d6fa <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800d6ea:	8a3b      	ldrh	r3, [r7, #16]
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800d6f8:	e01e      	b.n	800d738 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d700:	e01a      	b.n	800d738 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800d702:	f107 0208 	add.w	r2, r7, #8
 800d706:	79fb      	ldrb	r3, [r7, #7]
 800d708:	4619      	mov	r1, r3
 800d70a:	480e      	ldr	r0, [pc, #56]	; (800d744 <USBH_ioctl+0xd4>)
 800d70c:	f003 f923 	bl	8010956 <USBH_MSC_GetLUNInfo>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d109      	bne.n	800d72a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800d716:	8a3b      	ldrh	r3, [r7, #16]
 800d718:	0a5b      	lsrs	r3, r3, #9
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	461a      	mov	r2, r3
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800d722:	2300      	movs	r3, #0
 800d724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800d728:	e006      	b.n	800d738 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d730:	e002      	b.n	800d738 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800d732:	2304      	movs	r3, #4
 800d734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800d738:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3740      	adds	r7, #64	; 0x40
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	20008970 	.word	0x20008970

0800d748 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d748:	b480      	push	{r7}
 800d74a:	b087      	sub	sp, #28
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	4613      	mov	r3, r2
 800d754:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d756:	2301      	movs	r3, #1
 800d758:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d75e:	4b1f      	ldr	r3, [pc, #124]	; (800d7dc <FATFS_LinkDriverEx+0x94>)
 800d760:	7b9b      	ldrb	r3, [r3, #14]
 800d762:	b2db      	uxtb	r3, r3
 800d764:	2b01      	cmp	r3, #1
 800d766:	d831      	bhi.n	800d7cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d768:	4b1c      	ldr	r3, [pc, #112]	; (800d7dc <FATFS_LinkDriverEx+0x94>)
 800d76a:	7b9b      	ldrb	r3, [r3, #14]
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	461a      	mov	r2, r3
 800d770:	4b1a      	ldr	r3, [pc, #104]	; (800d7dc <FATFS_LinkDriverEx+0x94>)
 800d772:	2100      	movs	r1, #0
 800d774:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d776:	4b19      	ldr	r3, [pc, #100]	; (800d7dc <FATFS_LinkDriverEx+0x94>)
 800d778:	7b9b      	ldrb	r3, [r3, #14]
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	4a17      	ldr	r2, [pc, #92]	; (800d7dc <FATFS_LinkDriverEx+0x94>)
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	4413      	add	r3, r2
 800d782:	68fa      	ldr	r2, [r7, #12]
 800d784:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d786:	4b15      	ldr	r3, [pc, #84]	; (800d7dc <FATFS_LinkDriverEx+0x94>)
 800d788:	7b9b      	ldrb	r3, [r3, #14]
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	461a      	mov	r2, r3
 800d78e:	4b13      	ldr	r3, [pc, #76]	; (800d7dc <FATFS_LinkDriverEx+0x94>)
 800d790:	4413      	add	r3, r2
 800d792:	79fa      	ldrb	r2, [r7, #7]
 800d794:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800d796:	4b11      	ldr	r3, [pc, #68]	; (800d7dc <FATFS_LinkDriverEx+0x94>)
 800d798:	7b9b      	ldrb	r3, [r3, #14]
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	1c5a      	adds	r2, r3, #1
 800d79e:	b2d1      	uxtb	r1, r2
 800d7a0:	4a0e      	ldr	r2, [pc, #56]	; (800d7dc <FATFS_LinkDriverEx+0x94>)
 800d7a2:	7391      	strb	r1, [r2, #14]
 800d7a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d7a6:	7dbb      	ldrb	r3, [r7, #22]
 800d7a8:	3330      	adds	r3, #48	; 0x30
 800d7aa:	b2da      	uxtb	r2, r3
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	223a      	movs	r2, #58	; 0x3a
 800d7b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	3302      	adds	r3, #2
 800d7bc:	222f      	movs	r2, #47	; 0x2f
 800d7be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	3303      	adds	r3, #3
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d7cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	371c      	adds	r7, #28
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr
 800d7da:	bf00      	nop
 800d7dc:	2000080c 	.word	0x2000080c

0800d7e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	6839      	ldr	r1, [r7, #0]
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff ffaa 	bl	800d748 <FATFS_LinkDriverEx>
 800d7f4:	4603      	mov	r3, r0
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d7fe:	b480      	push	{r7}
 800d800:	b085      	sub	sp, #20
 800d802:	af00      	add	r7, sp, #0
 800d804:	4603      	mov	r3, r0
 800d806:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d808:	2300      	movs	r3, #0
 800d80a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d80c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d810:	2b84      	cmp	r3, #132	; 0x84
 800d812:	d005      	beq.n	800d820 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d814:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	4413      	add	r3, r2
 800d81c:	3303      	adds	r3, #3
 800d81e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d820:	68fb      	ldr	r3, [r7, #12]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3714      	adds	r7, #20
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d82e:	b480      	push	{r7}
 800d830:	b083      	sub	sp, #12
 800d832:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d834:	f3ef 8305 	mrs	r3, IPSR
 800d838:	607b      	str	r3, [r7, #4]
  return(result);
 800d83a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	bf14      	ite	ne
 800d840:	2301      	movne	r3, #1
 800d842:	2300      	moveq	r3, #0
 800d844:	b2db      	uxtb	r3, r3
}
 800d846:	4618      	mov	r0, r3
 800d848:	370c      	adds	r7, #12
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d852:	b580      	push	{r7, lr}
 800d854:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d856:	f001 f93d 	bl	800ead4 <vTaskStartScheduler>
  
  return osOK;
 800d85a:	2300      	movs	r3, #0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800d864:	f001 fd92 	bl	800f38c <xTaskGetSchedulerState>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d101      	bne.n	800d872 <osKernelRunning+0x12>
    return 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	e000      	b.n	800d874 <osKernelRunning+0x14>
  else
    return 1;
 800d872:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800d874:	4618      	mov	r0, r3
 800d876:	bd80      	pop	{r7, pc}

0800d878 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d87c:	f7ff ffd7 	bl	800d82e <inHandlerMode>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d003      	beq.n	800d88e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d886:	f001 fa49 	bl	800ed1c <xTaskGetTickCountFromISR>
 800d88a:	4603      	mov	r3, r0
 800d88c:	e002      	b.n	800d894 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d88e:	f001 fa35 	bl	800ecfc <xTaskGetTickCount>
 800d892:	4603      	mov	r3, r0
  }
}
 800d894:	4618      	mov	r0, r3
 800d896:	bd80      	pop	{r7, pc}

0800d898 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d89a:	b089      	sub	sp, #36	; 0x24
 800d89c:	af04      	add	r7, sp, #16
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d020      	beq.n	800d8ec <osThreadCreate+0x54>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	699b      	ldr	r3, [r3, #24]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d01c      	beq.n	800d8ec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	685c      	ldr	r4, [r3, #4]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681d      	ldr	r5, [r3, #0]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	691e      	ldr	r6, [r3, #16]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7ff ff9a 	bl	800d7fe <makeFreeRtosPriority>
 800d8ca:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	695b      	ldr	r3, [r3, #20]
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8d4:	9202      	str	r2, [sp, #8]
 800d8d6:	9301      	str	r3, [sp, #4]
 800d8d8:	9100      	str	r1, [sp, #0]
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	4632      	mov	r2, r6
 800d8de:	4629      	mov	r1, r5
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f000 ff0d 	bl	800e700 <xTaskCreateStatic>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	60fb      	str	r3, [r7, #12]
 800d8ea:	e01c      	b.n	800d926 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685c      	ldr	r4, [r3, #4]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8f8:	b29e      	uxth	r6, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d900:	4618      	mov	r0, r3
 800d902:	f7ff ff7c 	bl	800d7fe <makeFreeRtosPriority>
 800d906:	4602      	mov	r2, r0
 800d908:	f107 030c 	add.w	r3, r7, #12
 800d90c:	9301      	str	r3, [sp, #4]
 800d90e:	9200      	str	r2, [sp, #0]
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	4632      	mov	r2, r6
 800d914:	4629      	mov	r1, r5
 800d916:	4620      	mov	r0, r4
 800d918:	f000 ff4f 	bl	800e7ba <xTaskCreate>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d001      	beq.n	800d926 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d922:	2300      	movs	r3, #0
 800d924:	e000      	b.n	800d928 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d926:	68fb      	ldr	r3, [r7, #12]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3714      	adds	r7, #20
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d930 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d001      	beq.n	800d946 <osDelay+0x16>
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	e000      	b.n	800d948 <osDelay+0x18>
 800d946:	2301      	movs	r3, #1
 800d948:	4618      	mov	r0, r3
 800d94a:	f001 f88f 	bl	800ea6c <vTaskDelay>
  
  return osOK;
 800d94e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d950:	4618      	mov	r0, r3
 800d952:	3710      	adds	r7, #16
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d958:	b590      	push	{r4, r7, lr}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af02      	add	r7, sp, #8
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d011      	beq.n	800d98e <osMessageCreate+0x36>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00d      	beq.n	800d98e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6818      	ldr	r0, [r3, #0]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6859      	ldr	r1, [r3, #4]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	689a      	ldr	r2, [r3, #8]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	2400      	movs	r4, #0
 800d984:	9400      	str	r4, [sp, #0]
 800d986:	f000 f9df 	bl	800dd48 <xQueueGenericCreateStatic>
 800d98a:	4603      	mov	r3, r0
 800d98c:	e008      	b.n	800d9a0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6818      	ldr	r0, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	2200      	movs	r2, #0
 800d998:	4619      	mov	r1, r3
 800d99a:	f000 fa4d 	bl	800de38 <xQueueGenericCreate>
 800d99e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd90      	pop	{r4, r7, pc}

0800d9a8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b086      	sub	sp, #24
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d101      	bne.n	800d9c6 <osMessagePut+0x1e>
    ticks = 1;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d9c6:	f7ff ff32 	bl	800d82e <inHandlerMode>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d018      	beq.n	800da02 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d9d0:	f107 0210 	add.w	r2, r7, #16
 800d9d4:	f107 0108 	add.w	r1, r7, #8
 800d9d8:	2300      	movs	r3, #0
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f000 fb84 	bl	800e0e8 <xQueueGenericSendFromISR>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d001      	beq.n	800d9ea <osMessagePut+0x42>
      return osErrorOS;
 800d9e6:	23ff      	movs	r3, #255	; 0xff
 800d9e8:	e018      	b.n	800da1c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d014      	beq.n	800da1a <osMessagePut+0x72>
 800d9f0:	4b0c      	ldr	r3, [pc, #48]	; (800da24 <osMessagePut+0x7c>)
 800d9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9f6:	601a      	str	r2, [r3, #0]
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	e00b      	b.n	800da1a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800da02:	f107 0108 	add.w	r1, r7, #8
 800da06:	2300      	movs	r3, #0
 800da08:	697a      	ldr	r2, [r7, #20]
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f000 fa6e 	bl	800deec <xQueueGenericSend>
 800da10:	4603      	mov	r3, r0
 800da12:	2b01      	cmp	r3, #1
 800da14:	d001      	beq.n	800da1a <osMessagePut+0x72>
      return osErrorOS;
 800da16:	23ff      	movs	r3, #255	; 0xff
 800da18:	e000      	b.n	800da1c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3718      	adds	r7, #24
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	e000ed04 	.word	0xe000ed04

0800da28 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800da28:	b590      	push	{r4, r7, lr}
 800da2a:	b08b      	sub	sp, #44	; 0x2c
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800da38:	2300      	movs	r3, #0
 800da3a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10a      	bne.n	800da58 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800da42:	2380      	movs	r3, #128	; 0x80
 800da44:	617b      	str	r3, [r7, #20]
    return event;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	461c      	mov	r4, r3
 800da4a:	f107 0314 	add.w	r3, r7, #20
 800da4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800da52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800da56:	e054      	b.n	800db02 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800da58:	2300      	movs	r3, #0
 800da5a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800da5c:	2300      	movs	r3, #0
 800da5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da66:	d103      	bne.n	800da70 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800da68:	f04f 33ff 	mov.w	r3, #4294967295
 800da6c:	627b      	str	r3, [r7, #36]	; 0x24
 800da6e:	e009      	b.n	800da84 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d006      	beq.n	800da84 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800da7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d101      	bne.n	800da84 <osMessageGet+0x5c>
      ticks = 1;
 800da80:	2301      	movs	r3, #1
 800da82:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800da84:	f7ff fed3 	bl	800d82e <inHandlerMode>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d01c      	beq.n	800dac8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800da8e:	f107 0220 	add.w	r2, r7, #32
 800da92:	f107 0314 	add.w	r3, r7, #20
 800da96:	3304      	adds	r3, #4
 800da98:	4619      	mov	r1, r3
 800da9a:	68b8      	ldr	r0, [r7, #8]
 800da9c:	f000 fca0 	bl	800e3e0 <xQueueReceiveFromISR>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d102      	bne.n	800daac <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800daa6:	2310      	movs	r3, #16
 800daa8:	617b      	str	r3, [r7, #20]
 800daaa:	e001      	b.n	800dab0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800daac:	2300      	movs	r3, #0
 800daae:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dab0:	6a3b      	ldr	r3, [r7, #32]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d01d      	beq.n	800daf2 <osMessageGet+0xca>
 800dab6:	4b15      	ldr	r3, [pc, #84]	; (800db0c <osMessageGet+0xe4>)
 800dab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dabc:	601a      	str	r2, [r3, #0]
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	f3bf 8f6f 	isb	sy
 800dac6:	e014      	b.n	800daf2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800dac8:	f107 0314 	add.w	r3, r7, #20
 800dacc:	3304      	adds	r3, #4
 800dace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dad0:	4619      	mov	r1, r3
 800dad2:	68b8      	ldr	r0, [r7, #8]
 800dad4:	f000 fba4 	bl	800e220 <xQueueReceive>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d102      	bne.n	800dae4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800dade:	2310      	movs	r3, #16
 800dae0:	617b      	str	r3, [r7, #20]
 800dae2:	e006      	b.n	800daf2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d101      	bne.n	800daee <osMessageGet+0xc6>
 800daea:	2300      	movs	r3, #0
 800daec:	e000      	b.n	800daf0 <osMessageGet+0xc8>
 800daee:	2340      	movs	r3, #64	; 0x40
 800daf0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	461c      	mov	r4, r3
 800daf6:	f107 0314 	add.w	r3, r7, #20
 800dafa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dafe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	372c      	adds	r7, #44	; 0x2c
 800db06:	46bd      	mov	sp, r7
 800db08:	bd90      	pop	{r4, r7, pc}
 800db0a:	bf00      	nop
 800db0c:	e000ed04 	.word	0xe000ed04

0800db10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f103 0208 	add.w	r2, r3, #8
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f04f 32ff 	mov.w	r2, #4294967295
 800db28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f103 0208 	add.w	r2, r3, #8
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f103 0208 	add.w	r2, r3, #8
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800db44:	bf00      	nop
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2200      	movs	r2, #0
 800db5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800db5e:	bf00      	nop
 800db60:	370c      	adds	r7, #12
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr

0800db6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800db6a:	b480      	push	{r7}
 800db6c:	b085      	sub	sp, #20
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
 800db72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	689a      	ldr	r2, [r3, #8]
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	683a      	ldr	r2, [r7, #0]
 800db94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	1c5a      	adds	r2, r3, #1
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	601a      	str	r2, [r3, #0]
}
 800dba6:	bf00      	nop
 800dba8:	3714      	adds	r7, #20
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr

0800dbb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dbb2:	b480      	push	{r7}
 800dbb4:	b085      	sub	sp, #20
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
 800dbba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc8:	d103      	bne.n	800dbd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	691b      	ldr	r3, [r3, #16]
 800dbce:	60fb      	str	r3, [r7, #12]
 800dbd0:	e00c      	b.n	800dbec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	3308      	adds	r3, #8
 800dbd6:	60fb      	str	r3, [r7, #12]
 800dbd8:	e002      	b.n	800dbe0 <vListInsert+0x2e>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d2f6      	bcs.n	800dbda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	685a      	ldr	r2, [r3, #4]
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	683a      	ldr	r2, [r7, #0]
 800dbfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	68fa      	ldr	r2, [r7, #12]
 800dc00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	683a      	ldr	r2, [r7, #0]
 800dc06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	1c5a      	adds	r2, r3, #1
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	601a      	str	r2, [r3, #0]
}
 800dc18:	bf00      	nop
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	691b      	ldr	r3, [r3, #16]
 800dc30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	6892      	ldr	r2, [r2, #8]
 800dc3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	6852      	ldr	r2, [r2, #4]
 800dc44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d103      	bne.n	800dc58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	689a      	ldr	r2, [r3, #8]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	1e5a      	subs	r2, r3, #1
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3714      	adds	r7, #20
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d10a      	bne.n	800dca2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc90:	f383 8811 	msr	BASEPRI, r3
 800dc94:	f3bf 8f6f 	isb	sy
 800dc98:	f3bf 8f4f 	dsb	sy
 800dc9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dc9e:	bf00      	nop
 800dca0:	e7fe      	b.n	800dca0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dca2:	f001 fda7 	bl	800f7f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcae:	68f9      	ldr	r1, [r7, #12]
 800dcb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dcb2:	fb01 f303 	mul.w	r3, r1, r3
 800dcb6:	441a      	add	r2, r3
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	68f9      	ldr	r1, [r7, #12]
 800dcd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dcd8:	fb01 f303 	mul.w	r3, r1, r3
 800dcdc:	441a      	add	r2, r3
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	22ff      	movs	r2, #255	; 0xff
 800dce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	22ff      	movs	r2, #255	; 0xff
 800dcee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d114      	bne.n	800dd22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d01a      	beq.n	800dd36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	3310      	adds	r3, #16
 800dd04:	4618      	mov	r0, r3
 800dd06:	f001 f97f 	bl	800f008 <xTaskRemoveFromEventList>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d012      	beq.n	800dd36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dd10:	4b0c      	ldr	r3, [pc, #48]	; (800dd44 <xQueueGenericReset+0xcc>)
 800dd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd16:	601a      	str	r2, [r3, #0]
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	e009      	b.n	800dd36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3310      	adds	r3, #16
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7ff fef2 	bl	800db10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	3324      	adds	r3, #36	; 0x24
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff feed 	bl	800db10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dd36:	f001 fd8d 	bl	800f854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dd3a:	2301      	movs	r3, #1
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	e000ed04 	.word	0xe000ed04

0800dd48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b08e      	sub	sp, #56	; 0x38
 800dd4c:	af02      	add	r7, sp, #8
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
 800dd54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d10a      	bne.n	800dd72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800dd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd60:	f383 8811 	msr	BASEPRI, r3
 800dd64:	f3bf 8f6f 	isb	sy
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dd6e:	bf00      	nop
 800dd70:	e7fe      	b.n	800dd70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d10a      	bne.n	800dd8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800dd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7c:	f383 8811 	msr	BASEPRI, r3
 800dd80:	f3bf 8f6f 	isb	sy
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dd8a:	bf00      	nop
 800dd8c:	e7fe      	b.n	800dd8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d002      	beq.n	800dd9a <xQueueGenericCreateStatic+0x52>
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d001      	beq.n	800dd9e <xQueueGenericCreateStatic+0x56>
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	e000      	b.n	800dda0 <xQueueGenericCreateStatic+0x58>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d10a      	bne.n	800ddba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	623b      	str	r3, [r7, #32]
}
 800ddb6:	bf00      	nop
 800ddb8:	e7fe      	b.n	800ddb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d102      	bne.n	800ddc6 <xQueueGenericCreateStatic+0x7e>
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d101      	bne.n	800ddca <xQueueGenericCreateStatic+0x82>
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e000      	b.n	800ddcc <xQueueGenericCreateStatic+0x84>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10a      	bne.n	800dde6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	61fb      	str	r3, [r7, #28]
}
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dde6:	2348      	movs	r3, #72	; 0x48
 800dde8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	2b48      	cmp	r3, #72	; 0x48
 800ddee:	d00a      	beq.n	800de06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	61bb      	str	r3, [r7, #24]
}
 800de02:	bf00      	nop
 800de04:	e7fe      	b.n	800de04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800de06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800de0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00d      	beq.n	800de2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800de12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de14:	2201      	movs	r2, #1
 800de16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800de1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800de1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	4613      	mov	r3, r2
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	68b9      	ldr	r1, [r7, #8]
 800de28:	68f8      	ldr	r0, [r7, #12]
 800de2a:	f000 f83f 	bl	800deac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800de2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800de30:	4618      	mov	r0, r3
 800de32:	3730      	adds	r7, #48	; 0x30
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08a      	sub	sp, #40	; 0x28
 800de3c:	af02      	add	r7, sp, #8
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	4613      	mov	r3, r2
 800de44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d10a      	bne.n	800de62 <xQueueGenericCreate+0x2a>
	__asm volatile
 800de4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de50:	f383 8811 	msr	BASEPRI, r3
 800de54:	f3bf 8f6f 	isb	sy
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	613b      	str	r3, [r7, #16]
}
 800de5e:	bf00      	nop
 800de60:	e7fe      	b.n	800de60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	68ba      	ldr	r2, [r7, #8]
 800de66:	fb02 f303 	mul.w	r3, r2, r3
 800de6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	3348      	adds	r3, #72	; 0x48
 800de70:	4618      	mov	r0, r3
 800de72:	f001 fde1 	bl	800fa38 <pvPortMalloc>
 800de76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d011      	beq.n	800dea2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	3348      	adds	r3, #72	; 0x48
 800de86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	2200      	movs	r2, #0
 800de8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800de90:	79fa      	ldrb	r2, [r7, #7]
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	4613      	mov	r3, r2
 800de98:	697a      	ldr	r2, [r7, #20]
 800de9a:	68b9      	ldr	r1, [r7, #8]
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f000 f805 	bl	800deac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dea2:	69bb      	ldr	r3, [r7, #24]
	}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3720      	adds	r7, #32
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
 800deb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d103      	bne.n	800dec8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	69ba      	ldr	r2, [r7, #24]
 800dec4:	601a      	str	r2, [r3, #0]
 800dec6:	e002      	b.n	800dece <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	68ba      	ldr	r2, [r7, #8]
 800ded8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800deda:	2101      	movs	r1, #1
 800dedc:	69b8      	ldr	r0, [r7, #24]
 800dede:	f7ff fecb 	bl	800dc78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dee2:	bf00      	nop
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
	...

0800deec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08e      	sub	sp, #56	; 0x38
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800defa:	2300      	movs	r3, #0
 800defc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800df02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df04:	2b00      	cmp	r3, #0
 800df06:	d10a      	bne.n	800df1e <xQueueGenericSend+0x32>
	__asm volatile
 800df08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0c:	f383 8811 	msr	BASEPRI, r3
 800df10:	f3bf 8f6f 	isb	sy
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800df1a:	bf00      	nop
 800df1c:	e7fe      	b.n	800df1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d103      	bne.n	800df2c <xQueueGenericSend+0x40>
 800df24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d101      	bne.n	800df30 <xQueueGenericSend+0x44>
 800df2c:	2301      	movs	r3, #1
 800df2e:	e000      	b.n	800df32 <xQueueGenericSend+0x46>
 800df30:	2300      	movs	r3, #0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d10a      	bne.n	800df4c <xQueueGenericSend+0x60>
	__asm volatile
 800df36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3a:	f383 8811 	msr	BASEPRI, r3
 800df3e:	f3bf 8f6f 	isb	sy
 800df42:	f3bf 8f4f 	dsb	sy
 800df46:	627b      	str	r3, [r7, #36]	; 0x24
}
 800df48:	bf00      	nop
 800df4a:	e7fe      	b.n	800df4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	2b02      	cmp	r3, #2
 800df50:	d103      	bne.n	800df5a <xQueueGenericSend+0x6e>
 800df52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df56:	2b01      	cmp	r3, #1
 800df58:	d101      	bne.n	800df5e <xQueueGenericSend+0x72>
 800df5a:	2301      	movs	r3, #1
 800df5c:	e000      	b.n	800df60 <xQueueGenericSend+0x74>
 800df5e:	2300      	movs	r3, #0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d10a      	bne.n	800df7a <xQueueGenericSend+0x8e>
	__asm volatile
 800df64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df68:	f383 8811 	msr	BASEPRI, r3
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	f3bf 8f4f 	dsb	sy
 800df74:	623b      	str	r3, [r7, #32]
}
 800df76:	bf00      	nop
 800df78:	e7fe      	b.n	800df78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df7a:	f001 fa07 	bl	800f38c <xTaskGetSchedulerState>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d102      	bne.n	800df8a <xQueueGenericSend+0x9e>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d101      	bne.n	800df8e <xQueueGenericSend+0xa2>
 800df8a:	2301      	movs	r3, #1
 800df8c:	e000      	b.n	800df90 <xQueueGenericSend+0xa4>
 800df8e:	2300      	movs	r3, #0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10a      	bne.n	800dfaa <xQueueGenericSend+0xbe>
	__asm volatile
 800df94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df98:	f383 8811 	msr	BASEPRI, r3
 800df9c:	f3bf 8f6f 	isb	sy
 800dfa0:	f3bf 8f4f 	dsb	sy
 800dfa4:	61fb      	str	r3, [r7, #28]
}
 800dfa6:	bf00      	nop
 800dfa8:	e7fe      	b.n	800dfa8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dfaa:	f001 fc23 	bl	800f7f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d302      	bcc.n	800dfc0 <xQueueGenericSend+0xd4>
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	2b02      	cmp	r3, #2
 800dfbe:	d129      	bne.n	800e014 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dfc0:	683a      	ldr	r2, [r7, #0]
 800dfc2:	68b9      	ldr	r1, [r7, #8]
 800dfc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfc6:	f000 fa8b 	bl	800e4e0 <prvCopyDataToQueue>
 800dfca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d010      	beq.n	800dff6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd6:	3324      	adds	r3, #36	; 0x24
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f001 f815 	bl	800f008 <xTaskRemoveFromEventList>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d013      	beq.n	800e00c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dfe4:	4b3f      	ldr	r3, [pc, #252]	; (800e0e4 <xQueueGenericSend+0x1f8>)
 800dfe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfea:	601a      	str	r2, [r3, #0]
 800dfec:	f3bf 8f4f 	dsb	sy
 800dff0:	f3bf 8f6f 	isb	sy
 800dff4:	e00a      	b.n	800e00c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d007      	beq.n	800e00c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dffc:	4b39      	ldr	r3, [pc, #228]	; (800e0e4 <xQueueGenericSend+0x1f8>)
 800dffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e002:	601a      	str	r2, [r3, #0]
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e00c:	f001 fc22 	bl	800f854 <vPortExitCritical>
				return pdPASS;
 800e010:	2301      	movs	r3, #1
 800e012:	e063      	b.n	800e0dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d103      	bne.n	800e022 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e01a:	f001 fc1b 	bl	800f854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e01e:	2300      	movs	r3, #0
 800e020:	e05c      	b.n	800e0dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e024:	2b00      	cmp	r3, #0
 800e026:	d106      	bne.n	800e036 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e028:	f107 0314 	add.w	r3, r7, #20
 800e02c:	4618      	mov	r0, r3
 800e02e:	f001 f84d 	bl	800f0cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e032:	2301      	movs	r3, #1
 800e034:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e036:	f001 fc0d 	bl	800f854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e03a:	f000 fdb5 	bl	800eba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e03e:	f001 fbd9 	bl	800f7f4 <vPortEnterCritical>
 800e042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e044:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e048:	b25b      	sxtb	r3, r3
 800e04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e04e:	d103      	bne.n	800e058 <xQueueGenericSend+0x16c>
 800e050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e052:	2200      	movs	r2, #0
 800e054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e05e:	b25b      	sxtb	r3, r3
 800e060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e064:	d103      	bne.n	800e06e <xQueueGenericSend+0x182>
 800e066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e068:	2200      	movs	r2, #0
 800e06a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e06e:	f001 fbf1 	bl	800f854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e072:	1d3a      	adds	r2, r7, #4
 800e074:	f107 0314 	add.w	r3, r7, #20
 800e078:	4611      	mov	r1, r2
 800e07a:	4618      	mov	r0, r3
 800e07c:	f001 f83c 	bl	800f0f8 <xTaskCheckForTimeOut>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	d124      	bne.n	800e0d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e088:	f000 fb22 	bl	800e6d0 <prvIsQueueFull>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d018      	beq.n	800e0c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e094:	3310      	adds	r3, #16
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	4611      	mov	r1, r2
 800e09a:	4618      	mov	r0, r3
 800e09c:	f000 ff90 	bl	800efc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e0a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0a2:	f000 faad 	bl	800e600 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e0a6:	f000 fd8d 	bl	800ebc4 <xTaskResumeAll>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f47f af7c 	bne.w	800dfaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e0b2:	4b0c      	ldr	r3, [pc, #48]	; (800e0e4 <xQueueGenericSend+0x1f8>)
 800e0b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0b8:	601a      	str	r2, [r3, #0]
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	f3bf 8f6f 	isb	sy
 800e0c2:	e772      	b.n	800dfaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e0c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0c6:	f000 fa9b 	bl	800e600 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0ca:	f000 fd7b 	bl	800ebc4 <xTaskResumeAll>
 800e0ce:	e76c      	b.n	800dfaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e0d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0d2:	f000 fa95 	bl	800e600 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0d6:	f000 fd75 	bl	800ebc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e0da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3738      	adds	r7, #56	; 0x38
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	e000ed04 	.word	0xe000ed04

0800e0e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b090      	sub	sp, #64	; 0x40
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
 800e0f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d10a      	bne.n	800e116 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e112:	bf00      	nop
 800e114:	e7fe      	b.n	800e114 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d103      	bne.n	800e124 <xQueueGenericSendFromISR+0x3c>
 800e11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e120:	2b00      	cmp	r3, #0
 800e122:	d101      	bne.n	800e128 <xQueueGenericSendFromISR+0x40>
 800e124:	2301      	movs	r3, #1
 800e126:	e000      	b.n	800e12a <xQueueGenericSendFromISR+0x42>
 800e128:	2300      	movs	r3, #0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d10a      	bne.n	800e144 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e132:	f383 8811 	msr	BASEPRI, r3
 800e136:	f3bf 8f6f 	isb	sy
 800e13a:	f3bf 8f4f 	dsb	sy
 800e13e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e140:	bf00      	nop
 800e142:	e7fe      	b.n	800e142 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	2b02      	cmp	r3, #2
 800e148:	d103      	bne.n	800e152 <xQueueGenericSendFromISR+0x6a>
 800e14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d101      	bne.n	800e156 <xQueueGenericSendFromISR+0x6e>
 800e152:	2301      	movs	r3, #1
 800e154:	e000      	b.n	800e158 <xQueueGenericSendFromISR+0x70>
 800e156:	2300      	movs	r3, #0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d10a      	bne.n	800e172 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e160:	f383 8811 	msr	BASEPRI, r3
 800e164:	f3bf 8f6f 	isb	sy
 800e168:	f3bf 8f4f 	dsb	sy
 800e16c:	623b      	str	r3, [r7, #32]
}
 800e16e:	bf00      	nop
 800e170:	e7fe      	b.n	800e170 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e172:	f001 fc21 	bl	800f9b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e176:	f3ef 8211 	mrs	r2, BASEPRI
 800e17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17e:	f383 8811 	msr	BASEPRI, r3
 800e182:	f3bf 8f6f 	isb	sy
 800e186:	f3bf 8f4f 	dsb	sy
 800e18a:	61fa      	str	r2, [r7, #28]
 800e18c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e18e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e190:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d302      	bcc.n	800e1a4 <xQueueGenericSendFromISR+0xbc>
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	d12f      	bne.n	800e204 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e1b4:	683a      	ldr	r2, [r7, #0]
 800e1b6:	68b9      	ldr	r1, [r7, #8]
 800e1b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1ba:	f000 f991 	bl	800e4e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e1be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1c6:	d112      	bne.n	800e1ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d016      	beq.n	800e1fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d2:	3324      	adds	r3, #36	; 0x24
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f000 ff17 	bl	800f008 <xTaskRemoveFromEventList>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d00e      	beq.n	800e1fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00b      	beq.n	800e1fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	601a      	str	r2, [r3, #0]
 800e1ec:	e007      	b.n	800e1fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e1ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	b25a      	sxtb	r2, r3
 800e1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e1fe:	2301      	movs	r3, #1
 800e200:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e202:	e001      	b.n	800e208 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e204:	2300      	movs	r3, #0
 800e206:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e20a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e212:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e216:	4618      	mov	r0, r3
 800e218:	3740      	adds	r7, #64	; 0x40
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
	...

0800e220 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b08c      	sub	sp, #48	; 0x30
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e22c:	2300      	movs	r3, #0
 800e22e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e236:	2b00      	cmp	r3, #0
 800e238:	d10a      	bne.n	800e250 <xQueueReceive+0x30>
	__asm volatile
 800e23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23e:	f383 8811 	msr	BASEPRI, r3
 800e242:	f3bf 8f6f 	isb	sy
 800e246:	f3bf 8f4f 	dsb	sy
 800e24a:	623b      	str	r3, [r7, #32]
}
 800e24c:	bf00      	nop
 800e24e:	e7fe      	b.n	800e24e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d103      	bne.n	800e25e <xQueueReceive+0x3e>
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <xQueueReceive+0x42>
 800e25e:	2301      	movs	r3, #1
 800e260:	e000      	b.n	800e264 <xQueueReceive+0x44>
 800e262:	2300      	movs	r3, #0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d10a      	bne.n	800e27e <xQueueReceive+0x5e>
	__asm volatile
 800e268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26c:	f383 8811 	msr	BASEPRI, r3
 800e270:	f3bf 8f6f 	isb	sy
 800e274:	f3bf 8f4f 	dsb	sy
 800e278:	61fb      	str	r3, [r7, #28]
}
 800e27a:	bf00      	nop
 800e27c:	e7fe      	b.n	800e27c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e27e:	f001 f885 	bl	800f38c <xTaskGetSchedulerState>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d102      	bne.n	800e28e <xQueueReceive+0x6e>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d101      	bne.n	800e292 <xQueueReceive+0x72>
 800e28e:	2301      	movs	r3, #1
 800e290:	e000      	b.n	800e294 <xQueueReceive+0x74>
 800e292:	2300      	movs	r3, #0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10a      	bne.n	800e2ae <xQueueReceive+0x8e>
	__asm volatile
 800e298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29c:	f383 8811 	msr	BASEPRI, r3
 800e2a0:	f3bf 8f6f 	isb	sy
 800e2a4:	f3bf 8f4f 	dsb	sy
 800e2a8:	61bb      	str	r3, [r7, #24]
}
 800e2aa:	bf00      	nop
 800e2ac:	e7fe      	b.n	800e2ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2ae:	f001 faa1 	bl	800f7f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d01f      	beq.n	800e2fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e2be:	68b9      	ldr	r1, [r7, #8]
 800e2c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2c2:	f000 f977 	bl	800e5b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c8:	1e5a      	subs	r2, r3, #1
 800e2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d0:	691b      	ldr	r3, [r3, #16]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00f      	beq.n	800e2f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d8:	3310      	adds	r3, #16
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f000 fe94 	bl	800f008 <xTaskRemoveFromEventList>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d007      	beq.n	800e2f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e2e6:	4b3d      	ldr	r3, [pc, #244]	; (800e3dc <xQueueReceive+0x1bc>)
 800e2e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2ec:	601a      	str	r2, [r3, #0]
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e2f6:	f001 faad 	bl	800f854 <vPortExitCritical>
				return pdPASS;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e069      	b.n	800e3d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d103      	bne.n	800e30c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e304:	f001 faa6 	bl	800f854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e308:	2300      	movs	r3, #0
 800e30a:	e062      	b.n	800e3d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d106      	bne.n	800e320 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e312:	f107 0310 	add.w	r3, r7, #16
 800e316:	4618      	mov	r0, r3
 800e318:	f000 fed8 	bl	800f0cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e31c:	2301      	movs	r3, #1
 800e31e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e320:	f001 fa98 	bl	800f854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e324:	f000 fc40 	bl	800eba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e328:	f001 fa64 	bl	800f7f4 <vPortEnterCritical>
 800e32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e332:	b25b      	sxtb	r3, r3
 800e334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e338:	d103      	bne.n	800e342 <xQueueReceive+0x122>
 800e33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e348:	b25b      	sxtb	r3, r3
 800e34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34e:	d103      	bne.n	800e358 <xQueueReceive+0x138>
 800e350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e352:	2200      	movs	r2, #0
 800e354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e358:	f001 fa7c 	bl	800f854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e35c:	1d3a      	adds	r2, r7, #4
 800e35e:	f107 0310 	add.w	r3, r7, #16
 800e362:	4611      	mov	r1, r2
 800e364:	4618      	mov	r0, r3
 800e366:	f000 fec7 	bl	800f0f8 <xTaskCheckForTimeOut>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d123      	bne.n	800e3b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e372:	f000 f997 	bl	800e6a4 <prvIsQueueEmpty>
 800e376:	4603      	mov	r3, r0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d017      	beq.n	800e3ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37e:	3324      	adds	r3, #36	; 0x24
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	4611      	mov	r1, r2
 800e384:	4618      	mov	r0, r3
 800e386:	f000 fe1b 	bl	800efc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e38a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e38c:	f000 f938 	bl	800e600 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e390:	f000 fc18 	bl	800ebc4 <xTaskResumeAll>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d189      	bne.n	800e2ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e39a:	4b10      	ldr	r3, [pc, #64]	; (800e3dc <xQueueReceive+0x1bc>)
 800e39c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3a0:	601a      	str	r2, [r3, #0]
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	e780      	b.n	800e2ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3ae:	f000 f927 	bl	800e600 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3b2:	f000 fc07 	bl	800ebc4 <xTaskResumeAll>
 800e3b6:	e77a      	b.n	800e2ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3ba:	f000 f921 	bl	800e600 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e3be:	f000 fc01 	bl	800ebc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e3c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3c4:	f000 f96e 	bl	800e6a4 <prvIsQueueEmpty>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f43f af6f 	beq.w	800e2ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e3d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3730      	adds	r7, #48	; 0x30
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	e000ed04 	.word	0xe000ed04

0800e3e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b08e      	sub	sp, #56	; 0x38
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	60b9      	str	r1, [r7, #8]
 800e3ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10a      	bne.n	800e40c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fa:	f383 8811 	msr	BASEPRI, r3
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	623b      	str	r3, [r7, #32]
}
 800e408:	bf00      	nop
 800e40a:	e7fe      	b.n	800e40a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d103      	bne.n	800e41a <xQueueReceiveFromISR+0x3a>
 800e412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e416:	2b00      	cmp	r3, #0
 800e418:	d101      	bne.n	800e41e <xQueueReceiveFromISR+0x3e>
 800e41a:	2301      	movs	r3, #1
 800e41c:	e000      	b.n	800e420 <xQueueReceiveFromISR+0x40>
 800e41e:	2300      	movs	r3, #0
 800e420:	2b00      	cmp	r3, #0
 800e422:	d10a      	bne.n	800e43a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e428:	f383 8811 	msr	BASEPRI, r3
 800e42c:	f3bf 8f6f 	isb	sy
 800e430:	f3bf 8f4f 	dsb	sy
 800e434:	61fb      	str	r3, [r7, #28]
}
 800e436:	bf00      	nop
 800e438:	e7fe      	b.n	800e438 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e43a:	f001 fabd 	bl	800f9b8 <vPortValidateInterruptPriority>
	__asm volatile
 800e43e:	f3ef 8211 	mrs	r2, BASEPRI
 800e442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e446:	f383 8811 	msr	BASEPRI, r3
 800e44a:	f3bf 8f6f 	isb	sy
 800e44e:	f3bf 8f4f 	dsb	sy
 800e452:	61ba      	str	r2, [r7, #24]
 800e454:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e456:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e458:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e45e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e462:	2b00      	cmp	r3, #0
 800e464:	d02f      	beq.n	800e4c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e46c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e470:	68b9      	ldr	r1, [r7, #8]
 800e472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e474:	f000 f89e 	bl	800e5b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47a:	1e5a      	subs	r2, r3, #1
 800e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e488:	d112      	bne.n	800e4b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48c:	691b      	ldr	r3, [r3, #16]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d016      	beq.n	800e4c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e494:	3310      	adds	r3, #16
 800e496:	4618      	mov	r0, r3
 800e498:	f000 fdb6 	bl	800f008 <xTaskRemoveFromEventList>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00e      	beq.n	800e4c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00b      	beq.n	800e4c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	601a      	str	r2, [r3, #0]
 800e4ae:	e007      	b.n	800e4c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	b2db      	uxtb	r3, r3
 800e4b8:	b25a      	sxtb	r2, r3
 800e4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	637b      	str	r3, [r7, #52]	; 0x34
 800e4c4:	e001      	b.n	800e4ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	637b      	str	r3, [r7, #52]	; 0x34
 800e4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	f383 8811 	msr	BASEPRI, r3
}
 800e4d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3738      	adds	r7, #56	; 0x38
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d10d      	bne.n	800e51a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d14d      	bne.n	800e5a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	4618      	mov	r0, r3
 800e50c:	f000 ff5c 	bl	800f3c8 <xTaskPriorityDisinherit>
 800e510:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2200      	movs	r2, #0
 800e516:	609a      	str	r2, [r3, #8]
 800e518:	e043      	b.n	800e5a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d119      	bne.n	800e554 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6858      	ldr	r0, [r3, #4]
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e528:	461a      	mov	r2, r3
 800e52a:	68b9      	ldr	r1, [r7, #8]
 800e52c:	f005 fad2 	bl	8013ad4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	685a      	ldr	r2, [r3, #4]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e538:	441a      	add	r2, r3
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	685a      	ldr	r2, [r3, #4]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	429a      	cmp	r2, r3
 800e548:	d32b      	bcc.n	800e5a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	605a      	str	r2, [r3, #4]
 800e552:	e026      	b.n	800e5a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	68d8      	ldr	r0, [r3, #12]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e55c:	461a      	mov	r2, r3
 800e55e:	68b9      	ldr	r1, [r7, #8]
 800e560:	f005 fab8 	bl	8013ad4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	68da      	ldr	r2, [r3, #12]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e56c:	425b      	negs	r3, r3
 800e56e:	441a      	add	r2, r3
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	68da      	ldr	r2, [r3, #12]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d207      	bcs.n	800e590 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	689a      	ldr	r2, [r3, #8]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e588:	425b      	negs	r3, r3
 800e58a:	441a      	add	r2, r3
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2b02      	cmp	r3, #2
 800e594:	d105      	bne.n	800e5a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	3b01      	subs	r3, #1
 800e5a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	1c5a      	adds	r2, r3, #1
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e5aa:	697b      	ldr	r3, [r7, #20]
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3718      	adds	r7, #24
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d018      	beq.n	800e5f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	68da      	ldr	r2, [r3, #12]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ce:	441a      	add	r2, r3
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	68da      	ldr	r2, [r3, #12]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d303      	bcc.n	800e5e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	68d9      	ldr	r1, [r3, #12]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	6838      	ldr	r0, [r7, #0]
 800e5f4:	f005 fa6e 	bl	8013ad4 <memcpy>
	}
}
 800e5f8:	bf00      	nop
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e608:	f001 f8f4 	bl	800f7f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e612:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e614:	e011      	b.n	800e63a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d012      	beq.n	800e644 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	3324      	adds	r3, #36	; 0x24
 800e622:	4618      	mov	r0, r3
 800e624:	f000 fcf0 	bl	800f008 <xTaskRemoveFromEventList>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e62e:	f000 fdc5 	bl	800f1bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e632:	7bfb      	ldrb	r3, [r7, #15]
 800e634:	3b01      	subs	r3, #1
 800e636:	b2db      	uxtb	r3, r3
 800e638:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e63a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	dce9      	bgt.n	800e616 <prvUnlockQueue+0x16>
 800e642:	e000      	b.n	800e646 <prvUnlockQueue+0x46>
					break;
 800e644:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	22ff      	movs	r2, #255	; 0xff
 800e64a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e64e:	f001 f901 	bl	800f854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e652:	f001 f8cf 	bl	800f7f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e65c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e65e:	e011      	b.n	800e684 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	691b      	ldr	r3, [r3, #16]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d012      	beq.n	800e68e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	3310      	adds	r3, #16
 800e66c:	4618      	mov	r0, r3
 800e66e:	f000 fccb 	bl	800f008 <xTaskRemoveFromEventList>
 800e672:	4603      	mov	r3, r0
 800e674:	2b00      	cmp	r3, #0
 800e676:	d001      	beq.n	800e67c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e678:	f000 fda0 	bl	800f1bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e67c:	7bbb      	ldrb	r3, [r7, #14]
 800e67e:	3b01      	subs	r3, #1
 800e680:	b2db      	uxtb	r3, r3
 800e682:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	dce9      	bgt.n	800e660 <prvUnlockQueue+0x60>
 800e68c:	e000      	b.n	800e690 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e68e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	22ff      	movs	r2, #255	; 0xff
 800e694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e698:	f001 f8dc 	bl	800f854 <vPortExitCritical>
}
 800e69c:	bf00      	nop
 800e69e:	3710      	adds	r7, #16
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6ac:	f001 f8a2 	bl	800f7f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d102      	bne.n	800e6be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	60fb      	str	r3, [r7, #12]
 800e6bc:	e001      	b.n	800e6c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e6c2:	f001 f8c7 	bl	800f854 <vPortExitCritical>

	return xReturn;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3710      	adds	r7, #16
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b084      	sub	sp, #16
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6d8:	f001 f88c 	bl	800f7f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d102      	bne.n	800e6ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	60fb      	str	r3, [r7, #12]
 800e6ec:	e001      	b.n	800e6f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e6f2:	f001 f8af 	bl	800f854 <vPortExitCritical>

	return xReturn;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3710      	adds	r7, #16
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e700:	b580      	push	{r7, lr}
 800e702:	b08e      	sub	sp, #56	; 0x38
 800e704:	af04      	add	r7, sp, #16
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
 800e70c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e710:	2b00      	cmp	r3, #0
 800e712:	d10a      	bne.n	800e72a <xTaskCreateStatic+0x2a>
	__asm volatile
 800e714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e718:	f383 8811 	msr	BASEPRI, r3
 800e71c:	f3bf 8f6f 	isb	sy
 800e720:	f3bf 8f4f 	dsb	sy
 800e724:	623b      	str	r3, [r7, #32]
}
 800e726:	bf00      	nop
 800e728:	e7fe      	b.n	800e728 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d10a      	bne.n	800e746 <xTaskCreateStatic+0x46>
	__asm volatile
 800e730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e734:	f383 8811 	msr	BASEPRI, r3
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	61fb      	str	r3, [r7, #28]
}
 800e742:	bf00      	nop
 800e744:	e7fe      	b.n	800e744 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e746:	23b8      	movs	r3, #184	; 0xb8
 800e748:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	2bb8      	cmp	r3, #184	; 0xb8
 800e74e:	d00a      	beq.n	800e766 <xTaskCreateStatic+0x66>
	__asm volatile
 800e750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e754:	f383 8811 	msr	BASEPRI, r3
 800e758:	f3bf 8f6f 	isb	sy
 800e75c:	f3bf 8f4f 	dsb	sy
 800e760:	61bb      	str	r3, [r7, #24]
}
 800e762:	bf00      	nop
 800e764:	e7fe      	b.n	800e764 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e766:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d01e      	beq.n	800e7ac <xTaskCreateStatic+0xac>
 800e76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e770:	2b00      	cmp	r3, #0
 800e772:	d01b      	beq.n	800e7ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e776:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e77c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e780:	2202      	movs	r2, #2
 800e782:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e786:	2300      	movs	r3, #0
 800e788:	9303      	str	r3, [sp, #12]
 800e78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78c:	9302      	str	r3, [sp, #8]
 800e78e:	f107 0314 	add.w	r3, r7, #20
 800e792:	9301      	str	r3, [sp, #4]
 800e794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	68b9      	ldr	r1, [r7, #8]
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f000 f850 	bl	800e844 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e7a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7a6:	f000 f8f7 	bl	800e998 <prvAddNewTaskToReadyList>
 800e7aa:	e001      	b.n	800e7b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e7b0:	697b      	ldr	r3, [r7, #20]
	}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3728      	adds	r7, #40	; 0x28
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e7ba:	b580      	push	{r7, lr}
 800e7bc:	b08c      	sub	sp, #48	; 0x30
 800e7be:	af04      	add	r7, sp, #16
 800e7c0:	60f8      	str	r0, [r7, #12]
 800e7c2:	60b9      	str	r1, [r7, #8]
 800e7c4:	603b      	str	r3, [r7, #0]
 800e7c6:	4613      	mov	r3, r2
 800e7c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e7ca:	88fb      	ldrh	r3, [r7, #6]
 800e7cc:	009b      	lsls	r3, r3, #2
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f001 f932 	bl	800fa38 <pvPortMalloc>
 800e7d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d00e      	beq.n	800e7fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e7dc:	20b8      	movs	r0, #184	; 0xb8
 800e7de:	f001 f92b 	bl	800fa38 <pvPortMalloc>
 800e7e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d003      	beq.n	800e7f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	697a      	ldr	r2, [r7, #20]
 800e7ee:	631a      	str	r2, [r3, #48]	; 0x30
 800e7f0:	e005      	b.n	800e7fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e7f2:	6978      	ldr	r0, [r7, #20]
 800e7f4:	f001 f9f0 	bl	800fbd8 <vPortFree>
 800e7f8:	e001      	b.n	800e7fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e7fe:	69fb      	ldr	r3, [r7, #28]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d017      	beq.n	800e834 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	2200      	movs	r2, #0
 800e808:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e80c:	88fa      	ldrh	r2, [r7, #6]
 800e80e:	2300      	movs	r3, #0
 800e810:	9303      	str	r3, [sp, #12]
 800e812:	69fb      	ldr	r3, [r7, #28]
 800e814:	9302      	str	r3, [sp, #8]
 800e816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e818:	9301      	str	r3, [sp, #4]
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	68b9      	ldr	r1, [r7, #8]
 800e822:	68f8      	ldr	r0, [r7, #12]
 800e824:	f000 f80e 	bl	800e844 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e828:	69f8      	ldr	r0, [r7, #28]
 800e82a:	f000 f8b5 	bl	800e998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e82e:	2301      	movs	r3, #1
 800e830:	61bb      	str	r3, [r7, #24]
 800e832:	e002      	b.n	800e83a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e834:	f04f 33ff 	mov.w	r3, #4294967295
 800e838:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e83a:	69bb      	ldr	r3, [r7, #24]
	}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3720      	adds	r7, #32
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b088      	sub	sp, #32
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
 800e850:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e854:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	009b      	lsls	r3, r3, #2
 800e85a:	461a      	mov	r2, r3
 800e85c:	21a5      	movs	r1, #165	; 0xa5
 800e85e:	f005 f947 	bl	8013af0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e86c:	3b01      	subs	r3, #1
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4413      	add	r3, r2
 800e872:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	f023 0307 	bic.w	r3, r3, #7
 800e87a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	f003 0307 	and.w	r3, r3, #7
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00a      	beq.n	800e89c <prvInitialiseNewTask+0x58>
	__asm volatile
 800e886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88a:	f383 8811 	msr	BASEPRI, r3
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f3bf 8f4f 	dsb	sy
 800e896:	617b      	str	r3, [r7, #20]
}
 800e898:	bf00      	nop
 800e89a:	e7fe      	b.n	800e89a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d01f      	beq.n	800e8e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	61fb      	str	r3, [r7, #28]
 800e8a6:	e012      	b.n	800e8ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e8a8:	68ba      	ldr	r2, [r7, #8]
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	7819      	ldrb	r1, [r3, #0]
 800e8b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8b2:	69fb      	ldr	r3, [r7, #28]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	3334      	adds	r3, #52	; 0x34
 800e8b8:	460a      	mov	r2, r1
 800e8ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e8bc:	68ba      	ldr	r2, [r7, #8]
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d006      	beq.n	800e8d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	61fb      	str	r3, [r7, #28]
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	2b0f      	cmp	r3, #15
 800e8d2:	d9e9      	bls.n	800e8a8 <prvInitialiseNewTask+0x64>
 800e8d4:	e000      	b.n	800e8d8 <prvInitialiseNewTask+0x94>
			{
				break;
 800e8d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8da:	2200      	movs	r2, #0
 800e8dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e8e0:	e003      	b.n	800e8ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ec:	2b06      	cmp	r3, #6
 800e8ee:	d901      	bls.n	800e8f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e8f0:	2306      	movs	r3, #6
 800e8f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e902:	2200      	movs	r2, #0
 800e904:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e908:	3304      	adds	r3, #4
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7ff f920 	bl	800db50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e912:	3318      	adds	r3, #24
 800e914:	4618      	mov	r0, r3
 800e916:	f7ff f91b 	bl	800db50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e91e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	f1c3 0207 	rsb	r2, r3, #7
 800e926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e928:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e92e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	2200      	movs	r2, #0
 800e934:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e938:	2200      	movs	r2, #0
 800e93a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e940:	2200      	movs	r2, #0
 800e942:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e948:	3350      	adds	r3, #80	; 0x50
 800e94a:	2260      	movs	r2, #96	; 0x60
 800e94c:	2100      	movs	r1, #0
 800e94e:	4618      	mov	r0, r3
 800e950:	f005 f8ce 	bl	8013af0 <memset>
 800e954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e956:	4a0d      	ldr	r2, [pc, #52]	; (800e98c <prvInitialiseNewTask+0x148>)
 800e958:	655a      	str	r2, [r3, #84]	; 0x54
 800e95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95c:	4a0c      	ldr	r2, [pc, #48]	; (800e990 <prvInitialiseNewTask+0x14c>)
 800e95e:	659a      	str	r2, [r3, #88]	; 0x58
 800e960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e962:	4a0c      	ldr	r2, [pc, #48]	; (800e994 <prvInitialiseNewTask+0x150>)
 800e964:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e966:	683a      	ldr	r2, [r7, #0]
 800e968:	68f9      	ldr	r1, [r7, #12]
 800e96a:	69b8      	ldr	r0, [r7, #24]
 800e96c:	f000 fe18 	bl	800f5a0 <pxPortInitialiseStack>
 800e970:	4602      	mov	r2, r0
 800e972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e974:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e982:	bf00      	nop
 800e984:	3720      	adds	r7, #32
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
 800e98a:	bf00      	nop
 800e98c:	08014380 	.word	0x08014380
 800e990:	080143a0 	.word	0x080143a0
 800e994:	08014360 	.word	0x08014360

0800e998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e9a0:	f000 ff28 	bl	800f7f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e9a4:	4b2a      	ldr	r3, [pc, #168]	; (800ea50 <prvAddNewTaskToReadyList+0xb8>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	4a29      	ldr	r2, [pc, #164]	; (800ea50 <prvAddNewTaskToReadyList+0xb8>)
 800e9ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e9ae:	4b29      	ldr	r3, [pc, #164]	; (800ea54 <prvAddNewTaskToReadyList+0xbc>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d109      	bne.n	800e9ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e9b6:	4a27      	ldr	r2, [pc, #156]	; (800ea54 <prvAddNewTaskToReadyList+0xbc>)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e9bc:	4b24      	ldr	r3, [pc, #144]	; (800ea50 <prvAddNewTaskToReadyList+0xb8>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d110      	bne.n	800e9e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e9c4:	f000 fc20 	bl	800f208 <prvInitialiseTaskLists>
 800e9c8:	e00d      	b.n	800e9e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e9ca:	4b23      	ldr	r3, [pc, #140]	; (800ea58 <prvAddNewTaskToReadyList+0xc0>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d109      	bne.n	800e9e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e9d2:	4b20      	ldr	r3, [pc, #128]	; (800ea54 <prvAddNewTaskToReadyList+0xbc>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d802      	bhi.n	800e9e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e9e0:	4a1c      	ldr	r2, [pc, #112]	; (800ea54 <prvAddNewTaskToReadyList+0xbc>)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e9e6:	4b1d      	ldr	r3, [pc, #116]	; (800ea5c <prvAddNewTaskToReadyList+0xc4>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	4a1b      	ldr	r2, [pc, #108]	; (800ea5c <prvAddNewTaskToReadyList+0xc4>)
 800e9ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	409a      	lsls	r2, r3
 800e9f8:	4b19      	ldr	r3, [pc, #100]	; (800ea60 <prvAddNewTaskToReadyList+0xc8>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	4a18      	ldr	r2, [pc, #96]	; (800ea60 <prvAddNewTaskToReadyList+0xc8>)
 800ea00:	6013      	str	r3, [r2, #0]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea06:	4613      	mov	r3, r2
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	4413      	add	r3, r2
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	4a15      	ldr	r2, [pc, #84]	; (800ea64 <prvAddNewTaskToReadyList+0xcc>)
 800ea10:	441a      	add	r2, r3
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	3304      	adds	r3, #4
 800ea16:	4619      	mov	r1, r3
 800ea18:	4610      	mov	r0, r2
 800ea1a:	f7ff f8a6 	bl	800db6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ea1e:	f000 ff19 	bl	800f854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ea22:	4b0d      	ldr	r3, [pc, #52]	; (800ea58 <prvAddNewTaskToReadyList+0xc0>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00e      	beq.n	800ea48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ea2a:	4b0a      	ldr	r3, [pc, #40]	; (800ea54 <prvAddNewTaskToReadyList+0xbc>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d207      	bcs.n	800ea48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ea38:	4b0b      	ldr	r3, [pc, #44]	; (800ea68 <prvAddNewTaskToReadyList+0xd0>)
 800ea3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea3e:	601a      	str	r2, [r3, #0]
 800ea40:	f3bf 8f4f 	dsb	sy
 800ea44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea48:	bf00      	nop
 800ea4a:	3708      	adds	r7, #8
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	2000091c 	.word	0x2000091c
 800ea54:	2000081c 	.word	0x2000081c
 800ea58:	20000928 	.word	0x20000928
 800ea5c:	20000938 	.word	0x20000938
 800ea60:	20000924 	.word	0x20000924
 800ea64:	20000820 	.word	0x20000820
 800ea68:	e000ed04 	.word	0xe000ed04

0800ea6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ea74:	2300      	movs	r3, #0
 800ea76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d017      	beq.n	800eaae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ea7e:	4b13      	ldr	r3, [pc, #76]	; (800eacc <vTaskDelay+0x60>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d00a      	beq.n	800ea9c <vTaskDelay+0x30>
	__asm volatile
 800ea86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8a:	f383 8811 	msr	BASEPRI, r3
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	f3bf 8f4f 	dsb	sy
 800ea96:	60bb      	str	r3, [r7, #8]
}
 800ea98:	bf00      	nop
 800ea9a:	e7fe      	b.n	800ea9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ea9c:	f000 f884 	bl	800eba8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eaa0:	2100      	movs	r1, #0
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f000 fd16 	bl	800f4d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eaa8:	f000 f88c 	bl	800ebc4 <xTaskResumeAll>
 800eaac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d107      	bne.n	800eac4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eab4:	4b06      	ldr	r3, [pc, #24]	; (800ead0 <vTaskDelay+0x64>)
 800eab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaba:	601a      	str	r2, [r3, #0]
 800eabc:	f3bf 8f4f 	dsb	sy
 800eac0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eac4:	bf00      	nop
 800eac6:	3710      	adds	r7, #16
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	20000944 	.word	0x20000944
 800ead0:	e000ed04 	.word	0xe000ed04

0800ead4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08a      	sub	sp, #40	; 0x28
 800ead8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eada:	2300      	movs	r3, #0
 800eadc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eade:	2300      	movs	r3, #0
 800eae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eae2:	463a      	mov	r2, r7
 800eae4:	1d39      	adds	r1, r7, #4
 800eae6:	f107 0308 	add.w	r3, r7, #8
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7f2 f804 	bl	8000af8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eaf0:	6839      	ldr	r1, [r7, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	9202      	str	r2, [sp, #8]
 800eaf8:	9301      	str	r3, [sp, #4]
 800eafa:	2300      	movs	r3, #0
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	2300      	movs	r3, #0
 800eb00:	460a      	mov	r2, r1
 800eb02:	4921      	ldr	r1, [pc, #132]	; (800eb88 <vTaskStartScheduler+0xb4>)
 800eb04:	4821      	ldr	r0, [pc, #132]	; (800eb8c <vTaskStartScheduler+0xb8>)
 800eb06:	f7ff fdfb 	bl	800e700 <xTaskCreateStatic>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	4a20      	ldr	r2, [pc, #128]	; (800eb90 <vTaskStartScheduler+0xbc>)
 800eb0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800eb10:	4b1f      	ldr	r3, [pc, #124]	; (800eb90 <vTaskStartScheduler+0xbc>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d002      	beq.n	800eb1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	617b      	str	r3, [r7, #20]
 800eb1c:	e001      	b.n	800eb22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d11b      	bne.n	800eb60 <vTaskStartScheduler+0x8c>
	__asm volatile
 800eb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2c:	f383 8811 	msr	BASEPRI, r3
 800eb30:	f3bf 8f6f 	isb	sy
 800eb34:	f3bf 8f4f 	dsb	sy
 800eb38:	613b      	str	r3, [r7, #16]
}
 800eb3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eb3c:	4b15      	ldr	r3, [pc, #84]	; (800eb94 <vTaskStartScheduler+0xc0>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	3350      	adds	r3, #80	; 0x50
 800eb42:	4a15      	ldr	r2, [pc, #84]	; (800eb98 <vTaskStartScheduler+0xc4>)
 800eb44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800eb46:	4b15      	ldr	r3, [pc, #84]	; (800eb9c <vTaskStartScheduler+0xc8>)
 800eb48:	f04f 32ff 	mov.w	r2, #4294967295
 800eb4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800eb4e:	4b14      	ldr	r3, [pc, #80]	; (800eba0 <vTaskStartScheduler+0xcc>)
 800eb50:	2201      	movs	r2, #1
 800eb52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eb54:	4b13      	ldr	r3, [pc, #76]	; (800eba4 <vTaskStartScheduler+0xd0>)
 800eb56:	2200      	movs	r2, #0
 800eb58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800eb5a:	f000 fda9 	bl	800f6b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eb5e:	e00e      	b.n	800eb7e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb66:	d10a      	bne.n	800eb7e <vTaskStartScheduler+0xaa>
	__asm volatile
 800eb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6c:	f383 8811 	msr	BASEPRI, r3
 800eb70:	f3bf 8f6f 	isb	sy
 800eb74:	f3bf 8f4f 	dsb	sy
 800eb78:	60fb      	str	r3, [r7, #12]
}
 800eb7a:	bf00      	nop
 800eb7c:	e7fe      	b.n	800eb7c <vTaskStartScheduler+0xa8>
}
 800eb7e:	bf00      	nop
 800eb80:	3718      	adds	r7, #24
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	080142dc 	.word	0x080142dc
 800eb8c:	0800f1d5 	.word	0x0800f1d5
 800eb90:	20000940 	.word	0x20000940
 800eb94:	2000081c 	.word	0x2000081c
 800eb98:	20000030 	.word	0x20000030
 800eb9c:	2000093c 	.word	0x2000093c
 800eba0:	20000928 	.word	0x20000928
 800eba4:	20000920 	.word	0x20000920

0800eba8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eba8:	b480      	push	{r7}
 800ebaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ebac:	4b04      	ldr	r3, [pc, #16]	; (800ebc0 <vTaskSuspendAll+0x18>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	4a03      	ldr	r2, [pc, #12]	; (800ebc0 <vTaskSuspendAll+0x18>)
 800ebb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ebb6:	bf00      	nop
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr
 800ebc0:	20000944 	.word	0x20000944

0800ebc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ebd2:	4b41      	ldr	r3, [pc, #260]	; (800ecd8 <xTaskResumeAll+0x114>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d10a      	bne.n	800ebf0 <xTaskResumeAll+0x2c>
	__asm volatile
 800ebda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebde:	f383 8811 	msr	BASEPRI, r3
 800ebe2:	f3bf 8f6f 	isb	sy
 800ebe6:	f3bf 8f4f 	dsb	sy
 800ebea:	603b      	str	r3, [r7, #0]
}
 800ebec:	bf00      	nop
 800ebee:	e7fe      	b.n	800ebee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ebf0:	f000 fe00 	bl	800f7f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ebf4:	4b38      	ldr	r3, [pc, #224]	; (800ecd8 <xTaskResumeAll+0x114>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	4a37      	ldr	r2, [pc, #220]	; (800ecd8 <xTaskResumeAll+0x114>)
 800ebfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebfe:	4b36      	ldr	r3, [pc, #216]	; (800ecd8 <xTaskResumeAll+0x114>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d161      	bne.n	800ecca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ec06:	4b35      	ldr	r3, [pc, #212]	; (800ecdc <xTaskResumeAll+0x118>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d05d      	beq.n	800ecca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ec0e:	e02e      	b.n	800ec6e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec10:	4b33      	ldr	r3, [pc, #204]	; (800ece0 <xTaskResumeAll+0x11c>)
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	68db      	ldr	r3, [r3, #12]
 800ec16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	3318      	adds	r3, #24
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7ff f801 	bl	800dc24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	3304      	adds	r3, #4
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fe fffc 	bl	800dc24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec30:	2201      	movs	r2, #1
 800ec32:	409a      	lsls	r2, r3
 800ec34:	4b2b      	ldr	r3, [pc, #172]	; (800ece4 <xTaskResumeAll+0x120>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	4a2a      	ldr	r2, [pc, #168]	; (800ece4 <xTaskResumeAll+0x120>)
 800ec3c:	6013      	str	r3, [r2, #0]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec42:	4613      	mov	r3, r2
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	4413      	add	r3, r2
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	4a27      	ldr	r2, [pc, #156]	; (800ece8 <xTaskResumeAll+0x124>)
 800ec4c:	441a      	add	r2, r3
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	3304      	adds	r3, #4
 800ec52:	4619      	mov	r1, r3
 800ec54:	4610      	mov	r0, r2
 800ec56:	f7fe ff88 	bl	800db6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec5e:	4b23      	ldr	r3, [pc, #140]	; (800ecec <xTaskResumeAll+0x128>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d302      	bcc.n	800ec6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ec68:	4b21      	ldr	r3, [pc, #132]	; (800ecf0 <xTaskResumeAll+0x12c>)
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ec6e:	4b1c      	ldr	r3, [pc, #112]	; (800ece0 <xTaskResumeAll+0x11c>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d1cc      	bne.n	800ec10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d001      	beq.n	800ec80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ec7c:	f000 fb66 	bl	800f34c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ec80:	4b1c      	ldr	r3, [pc, #112]	; (800ecf4 <xTaskResumeAll+0x130>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d010      	beq.n	800ecae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ec8c:	f000 f858 	bl	800ed40 <xTaskIncrementTick>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d002      	beq.n	800ec9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ec96:	4b16      	ldr	r3, [pc, #88]	; (800ecf0 <xTaskResumeAll+0x12c>)
 800ec98:	2201      	movs	r2, #1
 800ec9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d1f1      	bne.n	800ec8c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800eca8:	4b12      	ldr	r3, [pc, #72]	; (800ecf4 <xTaskResumeAll+0x130>)
 800ecaa:	2200      	movs	r2, #0
 800ecac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ecae:	4b10      	ldr	r3, [pc, #64]	; (800ecf0 <xTaskResumeAll+0x12c>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d009      	beq.n	800ecca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ecba:	4b0f      	ldr	r3, [pc, #60]	; (800ecf8 <xTaskResumeAll+0x134>)
 800ecbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecc0:	601a      	str	r2, [r3, #0]
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ecca:	f000 fdc3 	bl	800f854 <vPortExitCritical>

	return xAlreadyYielded;
 800ecce:	68bb      	ldr	r3, [r7, #8]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3710      	adds	r7, #16
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	20000944 	.word	0x20000944
 800ecdc:	2000091c 	.word	0x2000091c
 800ece0:	200008dc 	.word	0x200008dc
 800ece4:	20000924 	.word	0x20000924
 800ece8:	20000820 	.word	0x20000820
 800ecec:	2000081c 	.word	0x2000081c
 800ecf0:	20000930 	.word	0x20000930
 800ecf4:	2000092c 	.word	0x2000092c
 800ecf8:	e000ed04 	.word	0xe000ed04

0800ecfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ed02:	4b05      	ldr	r3, [pc, #20]	; (800ed18 <xTaskGetTickCount+0x1c>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ed08:	687b      	ldr	r3, [r7, #4]
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	370c      	adds	r7, #12
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop
 800ed18:	20000920 	.word	0x20000920

0800ed1c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed22:	f000 fe49 	bl	800f9b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ed26:	2300      	movs	r3, #0
 800ed28:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ed2a:	4b04      	ldr	r3, [pc, #16]	; (800ed3c <xTaskGetTickCountFromISR+0x20>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed30:	683b      	ldr	r3, [r7, #0]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	20000920 	.word	0x20000920

0800ed40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ed46:	2300      	movs	r3, #0
 800ed48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed4a:	4b4e      	ldr	r3, [pc, #312]	; (800ee84 <xTaskIncrementTick+0x144>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	f040 808e 	bne.w	800ee70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ed54:	4b4c      	ldr	r3, [pc, #304]	; (800ee88 <xTaskIncrementTick+0x148>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ed5c:	4a4a      	ldr	r2, [pc, #296]	; (800ee88 <xTaskIncrementTick+0x148>)
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d120      	bne.n	800edaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ed68:	4b48      	ldr	r3, [pc, #288]	; (800ee8c <xTaskIncrementTick+0x14c>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d00a      	beq.n	800ed88 <xTaskIncrementTick+0x48>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	603b      	str	r3, [r7, #0]
}
 800ed84:	bf00      	nop
 800ed86:	e7fe      	b.n	800ed86 <xTaskIncrementTick+0x46>
 800ed88:	4b40      	ldr	r3, [pc, #256]	; (800ee8c <xTaskIncrementTick+0x14c>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	60fb      	str	r3, [r7, #12]
 800ed8e:	4b40      	ldr	r3, [pc, #256]	; (800ee90 <xTaskIncrementTick+0x150>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4a3e      	ldr	r2, [pc, #248]	; (800ee8c <xTaskIncrementTick+0x14c>)
 800ed94:	6013      	str	r3, [r2, #0]
 800ed96:	4a3e      	ldr	r2, [pc, #248]	; (800ee90 <xTaskIncrementTick+0x150>)
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	6013      	str	r3, [r2, #0]
 800ed9c:	4b3d      	ldr	r3, [pc, #244]	; (800ee94 <xTaskIncrementTick+0x154>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	3301      	adds	r3, #1
 800eda2:	4a3c      	ldr	r2, [pc, #240]	; (800ee94 <xTaskIncrementTick+0x154>)
 800eda4:	6013      	str	r3, [r2, #0]
 800eda6:	f000 fad1 	bl	800f34c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800edaa:	4b3b      	ldr	r3, [pc, #236]	; (800ee98 <xTaskIncrementTick+0x158>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	693a      	ldr	r2, [r7, #16]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d348      	bcc.n	800ee46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edb4:	4b35      	ldr	r3, [pc, #212]	; (800ee8c <xTaskIncrementTick+0x14c>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d104      	bne.n	800edc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edbe:	4b36      	ldr	r3, [pc, #216]	; (800ee98 <xTaskIncrementTick+0x158>)
 800edc0:	f04f 32ff 	mov.w	r2, #4294967295
 800edc4:	601a      	str	r2, [r3, #0]
					break;
 800edc6:	e03e      	b.n	800ee46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edc8:	4b30      	ldr	r3, [pc, #192]	; (800ee8c <xTaskIncrementTick+0x14c>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800edd8:	693a      	ldr	r2, [r7, #16]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d203      	bcs.n	800ede8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ede0:	4a2d      	ldr	r2, [pc, #180]	; (800ee98 <xTaskIncrementTick+0x158>)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ede6:	e02e      	b.n	800ee46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	3304      	adds	r3, #4
 800edec:	4618      	mov	r0, r3
 800edee:	f7fe ff19 	bl	800dc24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d004      	beq.n	800ee04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	3318      	adds	r3, #24
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fe ff10 	bl	800dc24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee08:	2201      	movs	r2, #1
 800ee0a:	409a      	lsls	r2, r3
 800ee0c:	4b23      	ldr	r3, [pc, #140]	; (800ee9c <xTaskIncrementTick+0x15c>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4313      	orrs	r3, r2
 800ee12:	4a22      	ldr	r2, [pc, #136]	; (800ee9c <xTaskIncrementTick+0x15c>)
 800ee14:	6013      	str	r3, [r2, #0]
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	4413      	add	r3, r2
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	4a1f      	ldr	r2, [pc, #124]	; (800eea0 <xTaskIncrementTick+0x160>)
 800ee24:	441a      	add	r2, r3
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	3304      	adds	r3, #4
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	4610      	mov	r0, r2
 800ee2e:	f7fe fe9c 	bl	800db6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee36:	4b1b      	ldr	r3, [pc, #108]	; (800eea4 <xTaskIncrementTick+0x164>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d3b9      	bcc.n	800edb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ee40:	2301      	movs	r3, #1
 800ee42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee44:	e7b6      	b.n	800edb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ee46:	4b17      	ldr	r3, [pc, #92]	; (800eea4 <xTaskIncrementTick+0x164>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee4c:	4914      	ldr	r1, [pc, #80]	; (800eea0 <xTaskIncrementTick+0x160>)
 800ee4e:	4613      	mov	r3, r2
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	4413      	add	r3, r2
 800ee54:	009b      	lsls	r3, r3, #2
 800ee56:	440b      	add	r3, r1
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	d901      	bls.n	800ee62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ee62:	4b11      	ldr	r3, [pc, #68]	; (800eea8 <xTaskIncrementTick+0x168>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d007      	beq.n	800ee7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	617b      	str	r3, [r7, #20]
 800ee6e:	e004      	b.n	800ee7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ee70:	4b0e      	ldr	r3, [pc, #56]	; (800eeac <xTaskIncrementTick+0x16c>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	3301      	adds	r3, #1
 800ee76:	4a0d      	ldr	r2, [pc, #52]	; (800eeac <xTaskIncrementTick+0x16c>)
 800ee78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ee7a:	697b      	ldr	r3, [r7, #20]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3718      	adds	r7, #24
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	20000944 	.word	0x20000944
 800ee88:	20000920 	.word	0x20000920
 800ee8c:	200008d4 	.word	0x200008d4
 800ee90:	200008d8 	.word	0x200008d8
 800ee94:	20000934 	.word	0x20000934
 800ee98:	2000093c 	.word	0x2000093c
 800ee9c:	20000924 	.word	0x20000924
 800eea0:	20000820 	.word	0x20000820
 800eea4:	2000081c 	.word	0x2000081c
 800eea8:	20000930 	.word	0x20000930
 800eeac:	2000092c 	.word	0x2000092c

0800eeb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b088      	sub	sp, #32
 800eeb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eeb6:	4b3c      	ldr	r3, [pc, #240]	; (800efa8 <vTaskSwitchContext+0xf8>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d003      	beq.n	800eec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eebe:	4b3b      	ldr	r3, [pc, #236]	; (800efac <vTaskSwitchContext+0xfc>)
 800eec0:	2201      	movs	r2, #1
 800eec2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eec4:	e06b      	b.n	800ef9e <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800eec6:	4b39      	ldr	r3, [pc, #228]	; (800efac <vTaskSwitchContext+0xfc>)
 800eec8:	2200      	movs	r2, #0
 800eeca:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800eecc:	4b38      	ldr	r3, [pc, #224]	; (800efb0 <vTaskSwitchContext+0x100>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eed2:	61fb      	str	r3, [r7, #28]
 800eed4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800eed8:	61bb      	str	r3, [r7, #24]
 800eeda:	69fb      	ldr	r3, [r7, #28]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	69ba      	ldr	r2, [r7, #24]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d111      	bne.n	800ef08 <vTaskSwitchContext+0x58>
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	3304      	adds	r3, #4
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	69ba      	ldr	r2, [r7, #24]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d10b      	bne.n	800ef08 <vTaskSwitchContext+0x58>
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	3308      	adds	r3, #8
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	69ba      	ldr	r2, [r7, #24]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d105      	bne.n	800ef08 <vTaskSwitchContext+0x58>
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	330c      	adds	r3, #12
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	69ba      	ldr	r2, [r7, #24]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d008      	beq.n	800ef1a <vTaskSwitchContext+0x6a>
 800ef08:	4b29      	ldr	r3, [pc, #164]	; (800efb0 <vTaskSwitchContext+0x100>)
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	4b28      	ldr	r3, [pc, #160]	; (800efb0 <vTaskSwitchContext+0x100>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	3334      	adds	r3, #52	; 0x34
 800ef12:	4619      	mov	r1, r3
 800ef14:	4610      	mov	r0, r2
 800ef16:	f7f1 fddc 	bl	8000ad2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef1a:	4b26      	ldr	r3, [pc, #152]	; (800efb4 <vTaskSwitchContext+0x104>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	fab3 f383 	clz	r3, r3
 800ef26:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ef28:	7afb      	ldrb	r3, [r7, #11]
 800ef2a:	f1c3 031f 	rsb	r3, r3, #31
 800ef2e:	617b      	str	r3, [r7, #20]
 800ef30:	4921      	ldr	r1, [pc, #132]	; (800efb8 <vTaskSwitchContext+0x108>)
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	4613      	mov	r3, r2
 800ef36:	009b      	lsls	r3, r3, #2
 800ef38:	4413      	add	r3, r2
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	440b      	add	r3, r1
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d10a      	bne.n	800ef5a <vTaskSwitchContext+0xaa>
	__asm volatile
 800ef44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef48:	f383 8811 	msr	BASEPRI, r3
 800ef4c:	f3bf 8f6f 	isb	sy
 800ef50:	f3bf 8f4f 	dsb	sy
 800ef54:	607b      	str	r3, [r7, #4]
}
 800ef56:	bf00      	nop
 800ef58:	e7fe      	b.n	800ef58 <vTaskSwitchContext+0xa8>
 800ef5a:	697a      	ldr	r2, [r7, #20]
 800ef5c:	4613      	mov	r3, r2
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	4413      	add	r3, r2
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	4a14      	ldr	r2, [pc, #80]	; (800efb8 <vTaskSwitchContext+0x108>)
 800ef66:	4413      	add	r3, r2
 800ef68:	613b      	str	r3, [r7, #16]
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	685a      	ldr	r2, [r3, #4]
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	605a      	str	r2, [r3, #4]
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	685a      	ldr	r2, [r3, #4]
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	3308      	adds	r3, #8
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d104      	bne.n	800ef8a <vTaskSwitchContext+0xda>
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	685a      	ldr	r2, [r3, #4]
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	605a      	str	r2, [r3, #4]
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	4a07      	ldr	r2, [pc, #28]	; (800efb0 <vTaskSwitchContext+0x100>)
 800ef92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ef94:	4b06      	ldr	r3, [pc, #24]	; (800efb0 <vTaskSwitchContext+0x100>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	3350      	adds	r3, #80	; 0x50
 800ef9a:	4a08      	ldr	r2, [pc, #32]	; (800efbc <vTaskSwitchContext+0x10c>)
 800ef9c:	6013      	str	r3, [r2, #0]
}
 800ef9e:	bf00      	nop
 800efa0:	3720      	adds	r7, #32
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	20000944 	.word	0x20000944
 800efac:	20000930 	.word	0x20000930
 800efb0:	2000081c 	.word	0x2000081c
 800efb4:	20000924 	.word	0x20000924
 800efb8:	20000820 	.word	0x20000820
 800efbc:	20000030 	.word	0x20000030

0800efc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d10a      	bne.n	800efe6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800efd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd4:	f383 8811 	msr	BASEPRI, r3
 800efd8:	f3bf 8f6f 	isb	sy
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	60fb      	str	r3, [r7, #12]
}
 800efe2:	bf00      	nop
 800efe4:	e7fe      	b.n	800efe4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800efe6:	4b07      	ldr	r3, [pc, #28]	; (800f004 <vTaskPlaceOnEventList+0x44>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	3318      	adds	r3, #24
 800efec:	4619      	mov	r1, r3
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7fe fddf 	bl	800dbb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eff4:	2101      	movs	r1, #1
 800eff6:	6838      	ldr	r0, [r7, #0]
 800eff8:	f000 fa6c 	bl	800f4d4 <prvAddCurrentTaskToDelayedList>
}
 800effc:	bf00      	nop
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	2000081c 	.word	0x2000081c

0800f008 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b086      	sub	sp, #24
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d10a      	bne.n	800f034 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f022:	f383 8811 	msr	BASEPRI, r3
 800f026:	f3bf 8f6f 	isb	sy
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	60fb      	str	r3, [r7, #12]
}
 800f030:	bf00      	nop
 800f032:	e7fe      	b.n	800f032 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	3318      	adds	r3, #24
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fe fdf3 	bl	800dc24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f03e:	4b1d      	ldr	r3, [pc, #116]	; (800f0b4 <xTaskRemoveFromEventList+0xac>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d11c      	bne.n	800f080 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	3304      	adds	r3, #4
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fe fdea 	bl	800dc24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f054:	2201      	movs	r2, #1
 800f056:	409a      	lsls	r2, r3
 800f058:	4b17      	ldr	r3, [pc, #92]	; (800f0b8 <xTaskRemoveFromEventList+0xb0>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4313      	orrs	r3, r2
 800f05e:	4a16      	ldr	r2, [pc, #88]	; (800f0b8 <xTaskRemoveFromEventList+0xb0>)
 800f060:	6013      	str	r3, [r2, #0]
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f066:	4613      	mov	r3, r2
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	4413      	add	r3, r2
 800f06c:	009b      	lsls	r3, r3, #2
 800f06e:	4a13      	ldr	r2, [pc, #76]	; (800f0bc <xTaskRemoveFromEventList+0xb4>)
 800f070:	441a      	add	r2, r3
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	3304      	adds	r3, #4
 800f076:	4619      	mov	r1, r3
 800f078:	4610      	mov	r0, r2
 800f07a:	f7fe fd76 	bl	800db6a <vListInsertEnd>
 800f07e:	e005      	b.n	800f08c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	3318      	adds	r3, #24
 800f084:	4619      	mov	r1, r3
 800f086:	480e      	ldr	r0, [pc, #56]	; (800f0c0 <xTaskRemoveFromEventList+0xb8>)
 800f088:	f7fe fd6f 	bl	800db6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f090:	4b0c      	ldr	r3, [pc, #48]	; (800f0c4 <xTaskRemoveFromEventList+0xbc>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f096:	429a      	cmp	r2, r3
 800f098:	d905      	bls.n	800f0a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f09a:	2301      	movs	r3, #1
 800f09c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f09e:	4b0a      	ldr	r3, [pc, #40]	; (800f0c8 <xTaskRemoveFromEventList+0xc0>)
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	601a      	str	r2, [r3, #0]
 800f0a4:	e001      	b.n	800f0aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f0aa:	697b      	ldr	r3, [r7, #20]
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3718      	adds	r7, #24
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	20000944 	.word	0x20000944
 800f0b8:	20000924 	.word	0x20000924
 800f0bc:	20000820 	.word	0x20000820
 800f0c0:	200008dc 	.word	0x200008dc
 800f0c4:	2000081c 	.word	0x2000081c
 800f0c8:	20000930 	.word	0x20000930

0800f0cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b083      	sub	sp, #12
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f0d4:	4b06      	ldr	r3, [pc, #24]	; (800f0f0 <vTaskInternalSetTimeOutState+0x24>)
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f0dc:	4b05      	ldr	r3, [pc, #20]	; (800f0f4 <vTaskInternalSetTimeOutState+0x28>)
 800f0de:	681a      	ldr	r2, [r3, #0]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	605a      	str	r2, [r3, #4]
}
 800f0e4:	bf00      	nop
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	20000934 	.word	0x20000934
 800f0f4:	20000920 	.word	0x20000920

0800f0f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b088      	sub	sp, #32
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d10a      	bne.n	800f11e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10c:	f383 8811 	msr	BASEPRI, r3
 800f110:	f3bf 8f6f 	isb	sy
 800f114:	f3bf 8f4f 	dsb	sy
 800f118:	613b      	str	r3, [r7, #16]
}
 800f11a:	bf00      	nop
 800f11c:	e7fe      	b.n	800f11c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d10a      	bne.n	800f13a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f128:	f383 8811 	msr	BASEPRI, r3
 800f12c:	f3bf 8f6f 	isb	sy
 800f130:	f3bf 8f4f 	dsb	sy
 800f134:	60fb      	str	r3, [r7, #12]
}
 800f136:	bf00      	nop
 800f138:	e7fe      	b.n	800f138 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f13a:	f000 fb5b 	bl	800f7f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f13e:	4b1d      	ldr	r3, [pc, #116]	; (800f1b4 <xTaskCheckForTimeOut+0xbc>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	685b      	ldr	r3, [r3, #4]
 800f148:	69ba      	ldr	r2, [r7, #24]
 800f14a:	1ad3      	subs	r3, r2, r3
 800f14c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f156:	d102      	bne.n	800f15e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f158:	2300      	movs	r3, #0
 800f15a:	61fb      	str	r3, [r7, #28]
 800f15c:	e023      	b.n	800f1a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	4b15      	ldr	r3, [pc, #84]	; (800f1b8 <xTaskCheckForTimeOut+0xc0>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	429a      	cmp	r2, r3
 800f168:	d007      	beq.n	800f17a <xTaskCheckForTimeOut+0x82>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	69ba      	ldr	r2, [r7, #24]
 800f170:	429a      	cmp	r2, r3
 800f172:	d302      	bcc.n	800f17a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f174:	2301      	movs	r3, #1
 800f176:	61fb      	str	r3, [r7, #28]
 800f178:	e015      	b.n	800f1a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	697a      	ldr	r2, [r7, #20]
 800f180:	429a      	cmp	r2, r3
 800f182:	d20b      	bcs.n	800f19c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	1ad2      	subs	r2, r2, r3
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f7ff ff9b 	bl	800f0cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f196:	2300      	movs	r3, #0
 800f198:	61fb      	str	r3, [r7, #28]
 800f19a:	e004      	b.n	800f1a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f1a6:	f000 fb55 	bl	800f854 <vPortExitCritical>

	return xReturn;
 800f1aa:	69fb      	ldr	r3, [r7, #28]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3720      	adds	r7, #32
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	20000920 	.word	0x20000920
 800f1b8:	20000934 	.word	0x20000934

0800f1bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f1bc:	b480      	push	{r7}
 800f1be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f1c0:	4b03      	ldr	r3, [pc, #12]	; (800f1d0 <vTaskMissedYield+0x14>)
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	601a      	str	r2, [r3, #0]
}
 800f1c6:	bf00      	nop
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr
 800f1d0:	20000930 	.word	0x20000930

0800f1d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f1dc:	f000 f854 	bl	800f288 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f1e0:	4b07      	ldr	r3, [pc, #28]	; (800f200 <prvIdleTask+0x2c>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d907      	bls.n	800f1f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800f1e8:	4b06      	ldr	r3, [pc, #24]	; (800f204 <prvIdleTask+0x30>)
 800f1ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1ee:	601a      	str	r2, [r3, #0]
 800f1f0:	f3bf 8f4f 	dsb	sy
 800f1f4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800f1f8:	f7f1 fc64 	bl	8000ac4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800f1fc:	e7ee      	b.n	800f1dc <prvIdleTask+0x8>
 800f1fe:	bf00      	nop
 800f200:	20000820 	.word	0x20000820
 800f204:	e000ed04 	.word	0xe000ed04

0800f208 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f20e:	2300      	movs	r3, #0
 800f210:	607b      	str	r3, [r7, #4]
 800f212:	e00c      	b.n	800f22e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f214:	687a      	ldr	r2, [r7, #4]
 800f216:	4613      	mov	r3, r2
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	4413      	add	r3, r2
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	4a12      	ldr	r2, [pc, #72]	; (800f268 <prvInitialiseTaskLists+0x60>)
 800f220:	4413      	add	r3, r2
 800f222:	4618      	mov	r0, r3
 800f224:	f7fe fc74 	bl	800db10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	3301      	adds	r3, #1
 800f22c:	607b      	str	r3, [r7, #4]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2b06      	cmp	r3, #6
 800f232:	d9ef      	bls.n	800f214 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f234:	480d      	ldr	r0, [pc, #52]	; (800f26c <prvInitialiseTaskLists+0x64>)
 800f236:	f7fe fc6b 	bl	800db10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f23a:	480d      	ldr	r0, [pc, #52]	; (800f270 <prvInitialiseTaskLists+0x68>)
 800f23c:	f7fe fc68 	bl	800db10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f240:	480c      	ldr	r0, [pc, #48]	; (800f274 <prvInitialiseTaskLists+0x6c>)
 800f242:	f7fe fc65 	bl	800db10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f246:	480c      	ldr	r0, [pc, #48]	; (800f278 <prvInitialiseTaskLists+0x70>)
 800f248:	f7fe fc62 	bl	800db10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f24c:	480b      	ldr	r0, [pc, #44]	; (800f27c <prvInitialiseTaskLists+0x74>)
 800f24e:	f7fe fc5f 	bl	800db10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f252:	4b0b      	ldr	r3, [pc, #44]	; (800f280 <prvInitialiseTaskLists+0x78>)
 800f254:	4a05      	ldr	r2, [pc, #20]	; (800f26c <prvInitialiseTaskLists+0x64>)
 800f256:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f258:	4b0a      	ldr	r3, [pc, #40]	; (800f284 <prvInitialiseTaskLists+0x7c>)
 800f25a:	4a05      	ldr	r2, [pc, #20]	; (800f270 <prvInitialiseTaskLists+0x68>)
 800f25c:	601a      	str	r2, [r3, #0]
}
 800f25e:	bf00      	nop
 800f260:	3708      	adds	r7, #8
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	20000820 	.word	0x20000820
 800f26c:	200008ac 	.word	0x200008ac
 800f270:	200008c0 	.word	0x200008c0
 800f274:	200008dc 	.word	0x200008dc
 800f278:	200008f0 	.word	0x200008f0
 800f27c:	20000908 	.word	0x20000908
 800f280:	200008d4 	.word	0x200008d4
 800f284:	200008d8 	.word	0x200008d8

0800f288 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f28e:	e019      	b.n	800f2c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f290:	f000 fab0 	bl	800f7f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f294:	4b10      	ldr	r3, [pc, #64]	; (800f2d8 <prvCheckTasksWaitingTermination+0x50>)
 800f296:	68db      	ldr	r3, [r3, #12]
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	3304      	adds	r3, #4
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fe fcbf 	bl	800dc24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f2a6:	4b0d      	ldr	r3, [pc, #52]	; (800f2dc <prvCheckTasksWaitingTermination+0x54>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	4a0b      	ldr	r2, [pc, #44]	; (800f2dc <prvCheckTasksWaitingTermination+0x54>)
 800f2ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f2b0:	4b0b      	ldr	r3, [pc, #44]	; (800f2e0 <prvCheckTasksWaitingTermination+0x58>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	3b01      	subs	r3, #1
 800f2b6:	4a0a      	ldr	r2, [pc, #40]	; (800f2e0 <prvCheckTasksWaitingTermination+0x58>)
 800f2b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f2ba:	f000 facb 	bl	800f854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 f810 	bl	800f2e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f2c4:	4b06      	ldr	r3, [pc, #24]	; (800f2e0 <prvCheckTasksWaitingTermination+0x58>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d1e1      	bne.n	800f290 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f2cc:	bf00      	nop
 800f2ce:	bf00      	nop
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	200008f0 	.word	0x200008f0
 800f2dc:	2000091c 	.word	0x2000091c
 800f2e0:	20000904 	.word	0x20000904

0800f2e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	3350      	adds	r3, #80	; 0x50
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f004 fcf3 	bl	8013cdc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d108      	bne.n	800f312 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f304:	4618      	mov	r0, r3
 800f306:	f000 fc67 	bl	800fbd8 <vPortFree>
				vPortFree( pxTCB );
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f000 fc64 	bl	800fbd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f310:	e018      	b.n	800f344 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d103      	bne.n	800f324 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fc5b 	bl	800fbd8 <vPortFree>
	}
 800f322:	e00f      	b.n	800f344 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800f32a:	2b02      	cmp	r3, #2
 800f32c:	d00a      	beq.n	800f344 <prvDeleteTCB+0x60>
	__asm volatile
 800f32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f332:	f383 8811 	msr	BASEPRI, r3
 800f336:	f3bf 8f6f 	isb	sy
 800f33a:	f3bf 8f4f 	dsb	sy
 800f33e:	60fb      	str	r3, [r7, #12]
}
 800f340:	bf00      	nop
 800f342:	e7fe      	b.n	800f342 <prvDeleteTCB+0x5e>
	}
 800f344:	bf00      	nop
 800f346:	3710      	adds	r7, #16
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f352:	4b0c      	ldr	r3, [pc, #48]	; (800f384 <prvResetNextTaskUnblockTime+0x38>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d104      	bne.n	800f366 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f35c:	4b0a      	ldr	r3, [pc, #40]	; (800f388 <prvResetNextTaskUnblockTime+0x3c>)
 800f35e:	f04f 32ff 	mov.w	r2, #4294967295
 800f362:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f364:	e008      	b.n	800f378 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f366:	4b07      	ldr	r3, [pc, #28]	; (800f384 <prvResetNextTaskUnblockTime+0x38>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	68db      	ldr	r3, [r3, #12]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	685b      	ldr	r3, [r3, #4]
 800f374:	4a04      	ldr	r2, [pc, #16]	; (800f388 <prvResetNextTaskUnblockTime+0x3c>)
 800f376:	6013      	str	r3, [r2, #0]
}
 800f378:	bf00      	nop
 800f37a:	370c      	adds	r7, #12
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr
 800f384:	200008d4 	.word	0x200008d4
 800f388:	2000093c 	.word	0x2000093c

0800f38c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f392:	4b0b      	ldr	r3, [pc, #44]	; (800f3c0 <xTaskGetSchedulerState+0x34>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d102      	bne.n	800f3a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f39a:	2301      	movs	r3, #1
 800f39c:	607b      	str	r3, [r7, #4]
 800f39e:	e008      	b.n	800f3b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3a0:	4b08      	ldr	r3, [pc, #32]	; (800f3c4 <xTaskGetSchedulerState+0x38>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d102      	bne.n	800f3ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f3a8:	2302      	movs	r3, #2
 800f3aa:	607b      	str	r3, [r7, #4]
 800f3ac:	e001      	b.n	800f3b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f3b2:	687b      	ldr	r3, [r7, #4]
	}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	370c      	adds	r7, #12
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr
 800f3c0:	20000928 	.word	0x20000928
 800f3c4:	20000944 	.word	0x20000944

0800f3c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b086      	sub	sp, #24
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d06e      	beq.n	800f4bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f3de:	4b3a      	ldr	r3, [pc, #232]	; (800f4c8 <xTaskPriorityDisinherit+0x100>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	693a      	ldr	r2, [r7, #16]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d00a      	beq.n	800f3fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ec:	f383 8811 	msr	BASEPRI, r3
 800f3f0:	f3bf 8f6f 	isb	sy
 800f3f4:	f3bf 8f4f 	dsb	sy
 800f3f8:	60fb      	str	r3, [r7, #12]
}
 800f3fa:	bf00      	nop
 800f3fc:	e7fe      	b.n	800f3fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f402:	2b00      	cmp	r3, #0
 800f404:	d10a      	bne.n	800f41c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f40a:	f383 8811 	msr	BASEPRI, r3
 800f40e:	f3bf 8f6f 	isb	sy
 800f412:	f3bf 8f4f 	dsb	sy
 800f416:	60bb      	str	r3, [r7, #8]
}
 800f418:	bf00      	nop
 800f41a:	e7fe      	b.n	800f41a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f420:	1e5a      	subs	r2, r3, #1
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f42e:	429a      	cmp	r2, r3
 800f430:	d044      	beq.n	800f4bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f436:	2b00      	cmp	r3, #0
 800f438:	d140      	bne.n	800f4bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	3304      	adds	r3, #4
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fe fbf0 	bl	800dc24 <uxListRemove>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d115      	bne.n	800f476 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f44e:	491f      	ldr	r1, [pc, #124]	; (800f4cc <xTaskPriorityDisinherit+0x104>)
 800f450:	4613      	mov	r3, r2
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	4413      	add	r3, r2
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	440b      	add	r3, r1
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d10a      	bne.n	800f476 <xTaskPriorityDisinherit+0xae>
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f464:	2201      	movs	r2, #1
 800f466:	fa02 f303 	lsl.w	r3, r2, r3
 800f46a:	43da      	mvns	r2, r3
 800f46c:	4b18      	ldr	r3, [pc, #96]	; (800f4d0 <xTaskPriorityDisinherit+0x108>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4013      	ands	r3, r2
 800f472:	4a17      	ldr	r2, [pc, #92]	; (800f4d0 <xTaskPriorityDisinherit+0x108>)
 800f474:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f482:	f1c3 0207 	rsb	r2, r3, #7
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f48e:	2201      	movs	r2, #1
 800f490:	409a      	lsls	r2, r3
 800f492:	4b0f      	ldr	r3, [pc, #60]	; (800f4d0 <xTaskPriorityDisinherit+0x108>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	4313      	orrs	r3, r2
 800f498:	4a0d      	ldr	r2, [pc, #52]	; (800f4d0 <xTaskPriorityDisinherit+0x108>)
 800f49a:	6013      	str	r3, [r2, #0]
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4a0:	4613      	mov	r3, r2
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	4413      	add	r3, r2
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	4a08      	ldr	r2, [pc, #32]	; (800f4cc <xTaskPriorityDisinherit+0x104>)
 800f4aa:	441a      	add	r2, r3
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	4610      	mov	r0, r2
 800f4b4:	f7fe fb59 	bl	800db6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f4bc:	697b      	ldr	r3, [r7, #20]
	}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3718      	adds	r7, #24
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	2000081c 	.word	0x2000081c
 800f4cc:	20000820 	.word	0x20000820
 800f4d0:	20000924 	.word	0x20000924

0800f4d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f4de:	4b29      	ldr	r3, [pc, #164]	; (800f584 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4e4:	4b28      	ldr	r3, [pc, #160]	; (800f588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	3304      	adds	r3, #4
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fe fb9a 	bl	800dc24 <uxListRemove>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d10b      	bne.n	800f50e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f4f6:	4b24      	ldr	r3, [pc, #144]	; (800f588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	fa02 f303 	lsl.w	r3, r2, r3
 800f502:	43da      	mvns	r2, r3
 800f504:	4b21      	ldr	r3, [pc, #132]	; (800f58c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4013      	ands	r3, r2
 800f50a:	4a20      	ldr	r2, [pc, #128]	; (800f58c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f50c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f514:	d10a      	bne.n	800f52c <prvAddCurrentTaskToDelayedList+0x58>
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d007      	beq.n	800f52c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f51c:	4b1a      	ldr	r3, [pc, #104]	; (800f588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	3304      	adds	r3, #4
 800f522:	4619      	mov	r1, r3
 800f524:	481a      	ldr	r0, [pc, #104]	; (800f590 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f526:	f7fe fb20 	bl	800db6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f52a:	e026      	b.n	800f57a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4413      	add	r3, r2
 800f532:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f534:	4b14      	ldr	r3, [pc, #80]	; (800f588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f53c:	68ba      	ldr	r2, [r7, #8]
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	429a      	cmp	r2, r3
 800f542:	d209      	bcs.n	800f558 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f544:	4b13      	ldr	r3, [pc, #76]	; (800f594 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	4b0f      	ldr	r3, [pc, #60]	; (800f588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	3304      	adds	r3, #4
 800f54e:	4619      	mov	r1, r3
 800f550:	4610      	mov	r0, r2
 800f552:	f7fe fb2e 	bl	800dbb2 <vListInsert>
}
 800f556:	e010      	b.n	800f57a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f558:	4b0f      	ldr	r3, [pc, #60]	; (800f598 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	4b0a      	ldr	r3, [pc, #40]	; (800f588 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	3304      	adds	r3, #4
 800f562:	4619      	mov	r1, r3
 800f564:	4610      	mov	r0, r2
 800f566:	f7fe fb24 	bl	800dbb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f56a:	4b0c      	ldr	r3, [pc, #48]	; (800f59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68ba      	ldr	r2, [r7, #8]
 800f570:	429a      	cmp	r2, r3
 800f572:	d202      	bcs.n	800f57a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f574:	4a09      	ldr	r2, [pc, #36]	; (800f59c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	6013      	str	r3, [r2, #0]
}
 800f57a:	bf00      	nop
 800f57c:	3710      	adds	r7, #16
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	20000920 	.word	0x20000920
 800f588:	2000081c 	.word	0x2000081c
 800f58c:	20000924 	.word	0x20000924
 800f590:	20000908 	.word	0x20000908
 800f594:	200008d8 	.word	0x200008d8
 800f598:	200008d4 	.word	0x200008d4
 800f59c:	2000093c 	.word	0x2000093c

0800f5a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b085      	sub	sp, #20
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	3b04      	subs	r3, #4
 800f5b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f5b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	3b04      	subs	r3, #4
 800f5be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	f023 0201 	bic.w	r2, r3, #1
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	3b04      	subs	r3, #4
 800f5ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f5d0:	4a0c      	ldr	r2, [pc, #48]	; (800f604 <pxPortInitialiseStack+0x64>)
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	3b14      	subs	r3, #20
 800f5da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	3b04      	subs	r3, #4
 800f5e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f06f 0202 	mvn.w	r2, #2
 800f5ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	3b20      	subs	r3, #32
 800f5f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3714      	adds	r7, #20
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr
 800f604:	0800f609 	.word	0x0800f609

0800f608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f608:	b480      	push	{r7}
 800f60a:	b085      	sub	sp, #20
 800f60c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f60e:	2300      	movs	r3, #0
 800f610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f612:	4b12      	ldr	r3, [pc, #72]	; (800f65c <prvTaskExitError+0x54>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f61a:	d00a      	beq.n	800f632 <prvTaskExitError+0x2a>
	__asm volatile
 800f61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f620:	f383 8811 	msr	BASEPRI, r3
 800f624:	f3bf 8f6f 	isb	sy
 800f628:	f3bf 8f4f 	dsb	sy
 800f62c:	60fb      	str	r3, [r7, #12]
}
 800f62e:	bf00      	nop
 800f630:	e7fe      	b.n	800f630 <prvTaskExitError+0x28>
	__asm volatile
 800f632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f636:	f383 8811 	msr	BASEPRI, r3
 800f63a:	f3bf 8f6f 	isb	sy
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	60bb      	str	r3, [r7, #8]
}
 800f644:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f646:	bf00      	nop
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d0fc      	beq.n	800f648 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f64e:	bf00      	nop
 800f650:	bf00      	nop
 800f652:	3714      	adds	r7, #20
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	2000000c 	.word	0x2000000c

0800f660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f660:	4b07      	ldr	r3, [pc, #28]	; (800f680 <pxCurrentTCBConst2>)
 800f662:	6819      	ldr	r1, [r3, #0]
 800f664:	6808      	ldr	r0, [r1, #0]
 800f666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f66a:	f380 8809 	msr	PSP, r0
 800f66e:	f3bf 8f6f 	isb	sy
 800f672:	f04f 0000 	mov.w	r0, #0
 800f676:	f380 8811 	msr	BASEPRI, r0
 800f67a:	4770      	bx	lr
 800f67c:	f3af 8000 	nop.w

0800f680 <pxCurrentTCBConst2>:
 800f680:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f684:	bf00      	nop
 800f686:	bf00      	nop

0800f688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f688:	4808      	ldr	r0, [pc, #32]	; (800f6ac <prvPortStartFirstTask+0x24>)
 800f68a:	6800      	ldr	r0, [r0, #0]
 800f68c:	6800      	ldr	r0, [r0, #0]
 800f68e:	f380 8808 	msr	MSP, r0
 800f692:	f04f 0000 	mov.w	r0, #0
 800f696:	f380 8814 	msr	CONTROL, r0
 800f69a:	b662      	cpsie	i
 800f69c:	b661      	cpsie	f
 800f69e:	f3bf 8f4f 	dsb	sy
 800f6a2:	f3bf 8f6f 	isb	sy
 800f6a6:	df00      	svc	0
 800f6a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f6aa:	bf00      	nop
 800f6ac:	e000ed08 	.word	0xe000ed08

0800f6b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f6b6:	4b46      	ldr	r3, [pc, #280]	; (800f7d0 <xPortStartScheduler+0x120>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4a46      	ldr	r2, [pc, #280]	; (800f7d4 <xPortStartScheduler+0x124>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d10a      	bne.n	800f6d6 <xPortStartScheduler+0x26>
	__asm volatile
 800f6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c4:	f383 8811 	msr	BASEPRI, r3
 800f6c8:	f3bf 8f6f 	isb	sy
 800f6cc:	f3bf 8f4f 	dsb	sy
 800f6d0:	613b      	str	r3, [r7, #16]
}
 800f6d2:	bf00      	nop
 800f6d4:	e7fe      	b.n	800f6d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f6d6:	4b3e      	ldr	r3, [pc, #248]	; (800f7d0 <xPortStartScheduler+0x120>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4a3f      	ldr	r2, [pc, #252]	; (800f7d8 <xPortStartScheduler+0x128>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d10a      	bne.n	800f6f6 <xPortStartScheduler+0x46>
	__asm volatile
 800f6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e4:	f383 8811 	msr	BASEPRI, r3
 800f6e8:	f3bf 8f6f 	isb	sy
 800f6ec:	f3bf 8f4f 	dsb	sy
 800f6f0:	60fb      	str	r3, [r7, #12]
}
 800f6f2:	bf00      	nop
 800f6f4:	e7fe      	b.n	800f6f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f6f6:	4b39      	ldr	r3, [pc, #228]	; (800f7dc <xPortStartScheduler+0x12c>)
 800f6f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	22ff      	movs	r2, #255	; 0xff
 800f706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f710:	78fb      	ldrb	r3, [r7, #3]
 800f712:	b2db      	uxtb	r3, r3
 800f714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f718:	b2da      	uxtb	r2, r3
 800f71a:	4b31      	ldr	r3, [pc, #196]	; (800f7e0 <xPortStartScheduler+0x130>)
 800f71c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f71e:	4b31      	ldr	r3, [pc, #196]	; (800f7e4 <xPortStartScheduler+0x134>)
 800f720:	2207      	movs	r2, #7
 800f722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f724:	e009      	b.n	800f73a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f726:	4b2f      	ldr	r3, [pc, #188]	; (800f7e4 <xPortStartScheduler+0x134>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	3b01      	subs	r3, #1
 800f72c:	4a2d      	ldr	r2, [pc, #180]	; (800f7e4 <xPortStartScheduler+0x134>)
 800f72e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f730:	78fb      	ldrb	r3, [r7, #3]
 800f732:	b2db      	uxtb	r3, r3
 800f734:	005b      	lsls	r3, r3, #1
 800f736:	b2db      	uxtb	r3, r3
 800f738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f73a:	78fb      	ldrb	r3, [r7, #3]
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f742:	2b80      	cmp	r3, #128	; 0x80
 800f744:	d0ef      	beq.n	800f726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f746:	4b27      	ldr	r3, [pc, #156]	; (800f7e4 <xPortStartScheduler+0x134>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f1c3 0307 	rsb	r3, r3, #7
 800f74e:	2b04      	cmp	r3, #4
 800f750:	d00a      	beq.n	800f768 <xPortStartScheduler+0xb8>
	__asm volatile
 800f752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f756:	f383 8811 	msr	BASEPRI, r3
 800f75a:	f3bf 8f6f 	isb	sy
 800f75e:	f3bf 8f4f 	dsb	sy
 800f762:	60bb      	str	r3, [r7, #8]
}
 800f764:	bf00      	nop
 800f766:	e7fe      	b.n	800f766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f768:	4b1e      	ldr	r3, [pc, #120]	; (800f7e4 <xPortStartScheduler+0x134>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	021b      	lsls	r3, r3, #8
 800f76e:	4a1d      	ldr	r2, [pc, #116]	; (800f7e4 <xPortStartScheduler+0x134>)
 800f770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f772:	4b1c      	ldr	r3, [pc, #112]	; (800f7e4 <xPortStartScheduler+0x134>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f77a:	4a1a      	ldr	r2, [pc, #104]	; (800f7e4 <xPortStartScheduler+0x134>)
 800f77c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	b2da      	uxtb	r2, r3
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f786:	4b18      	ldr	r3, [pc, #96]	; (800f7e8 <xPortStartScheduler+0x138>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	4a17      	ldr	r2, [pc, #92]	; (800f7e8 <xPortStartScheduler+0x138>)
 800f78c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f792:	4b15      	ldr	r3, [pc, #84]	; (800f7e8 <xPortStartScheduler+0x138>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	4a14      	ldr	r2, [pc, #80]	; (800f7e8 <xPortStartScheduler+0x138>)
 800f798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f79c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f79e:	f000 f8dd 	bl	800f95c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f7a2:	4b12      	ldr	r3, [pc, #72]	; (800f7ec <xPortStartScheduler+0x13c>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f7a8:	f000 f8fc 	bl	800f9a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f7ac:	4b10      	ldr	r3, [pc, #64]	; (800f7f0 <xPortStartScheduler+0x140>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	4a0f      	ldr	r2, [pc, #60]	; (800f7f0 <xPortStartScheduler+0x140>)
 800f7b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f7b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f7b8:	f7ff ff66 	bl	800f688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f7bc:	f7ff fb78 	bl	800eeb0 <vTaskSwitchContext>
	prvTaskExitError();
 800f7c0:	f7ff ff22 	bl	800f608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3718      	adds	r7, #24
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	e000ed00 	.word	0xe000ed00
 800f7d4:	410fc271 	.word	0x410fc271
 800f7d8:	410fc270 	.word	0x410fc270
 800f7dc:	e000e400 	.word	0xe000e400
 800f7e0:	20000948 	.word	0x20000948
 800f7e4:	2000094c 	.word	0x2000094c
 800f7e8:	e000ed20 	.word	0xe000ed20
 800f7ec:	2000000c 	.word	0x2000000c
 800f7f0:	e000ef34 	.word	0xe000ef34

0800f7f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
	__asm volatile
 800f7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7fe:	f383 8811 	msr	BASEPRI, r3
 800f802:	f3bf 8f6f 	isb	sy
 800f806:	f3bf 8f4f 	dsb	sy
 800f80a:	607b      	str	r3, [r7, #4]
}
 800f80c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f80e:	4b0f      	ldr	r3, [pc, #60]	; (800f84c <vPortEnterCritical+0x58>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	3301      	adds	r3, #1
 800f814:	4a0d      	ldr	r2, [pc, #52]	; (800f84c <vPortEnterCritical+0x58>)
 800f816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f818:	4b0c      	ldr	r3, [pc, #48]	; (800f84c <vPortEnterCritical+0x58>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d10f      	bne.n	800f840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f820:	4b0b      	ldr	r3, [pc, #44]	; (800f850 <vPortEnterCritical+0x5c>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	b2db      	uxtb	r3, r3
 800f826:	2b00      	cmp	r3, #0
 800f828:	d00a      	beq.n	800f840 <vPortEnterCritical+0x4c>
	__asm volatile
 800f82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f82e:	f383 8811 	msr	BASEPRI, r3
 800f832:	f3bf 8f6f 	isb	sy
 800f836:	f3bf 8f4f 	dsb	sy
 800f83a:	603b      	str	r3, [r7, #0]
}
 800f83c:	bf00      	nop
 800f83e:	e7fe      	b.n	800f83e <vPortEnterCritical+0x4a>
	}
}
 800f840:	bf00      	nop
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr
 800f84c:	2000000c 	.word	0x2000000c
 800f850:	e000ed04 	.word	0xe000ed04

0800f854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f85a:	4b12      	ldr	r3, [pc, #72]	; (800f8a4 <vPortExitCritical+0x50>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d10a      	bne.n	800f878 <vPortExitCritical+0x24>
	__asm volatile
 800f862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f866:	f383 8811 	msr	BASEPRI, r3
 800f86a:	f3bf 8f6f 	isb	sy
 800f86e:	f3bf 8f4f 	dsb	sy
 800f872:	607b      	str	r3, [r7, #4]
}
 800f874:	bf00      	nop
 800f876:	e7fe      	b.n	800f876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f878:	4b0a      	ldr	r3, [pc, #40]	; (800f8a4 <vPortExitCritical+0x50>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	3b01      	subs	r3, #1
 800f87e:	4a09      	ldr	r2, [pc, #36]	; (800f8a4 <vPortExitCritical+0x50>)
 800f880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f882:	4b08      	ldr	r3, [pc, #32]	; (800f8a4 <vPortExitCritical+0x50>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d105      	bne.n	800f896 <vPortExitCritical+0x42>
 800f88a:	2300      	movs	r3, #0
 800f88c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	f383 8811 	msr	BASEPRI, r3
}
 800f894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f896:	bf00      	nop
 800f898:	370c      	adds	r7, #12
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr
 800f8a2:	bf00      	nop
 800f8a4:	2000000c 	.word	0x2000000c
	...

0800f8b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f8b0:	f3ef 8009 	mrs	r0, PSP
 800f8b4:	f3bf 8f6f 	isb	sy
 800f8b8:	4b15      	ldr	r3, [pc, #84]	; (800f910 <pxCurrentTCBConst>)
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	f01e 0f10 	tst.w	lr, #16
 800f8c0:	bf08      	it	eq
 800f8c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f8c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ca:	6010      	str	r0, [r2, #0]
 800f8cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f8d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f8d4:	f380 8811 	msr	BASEPRI, r0
 800f8d8:	f3bf 8f4f 	dsb	sy
 800f8dc:	f3bf 8f6f 	isb	sy
 800f8e0:	f7ff fae6 	bl	800eeb0 <vTaskSwitchContext>
 800f8e4:	f04f 0000 	mov.w	r0, #0
 800f8e8:	f380 8811 	msr	BASEPRI, r0
 800f8ec:	bc09      	pop	{r0, r3}
 800f8ee:	6819      	ldr	r1, [r3, #0]
 800f8f0:	6808      	ldr	r0, [r1, #0]
 800f8f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f6:	f01e 0f10 	tst.w	lr, #16
 800f8fa:	bf08      	it	eq
 800f8fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f900:	f380 8809 	msr	PSP, r0
 800f904:	f3bf 8f6f 	isb	sy
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop
 800f90c:	f3af 8000 	nop.w

0800f910 <pxCurrentTCBConst>:
 800f910:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f914:	bf00      	nop
 800f916:	bf00      	nop

0800f918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b082      	sub	sp, #8
 800f91c:	af00      	add	r7, sp, #0
	__asm volatile
 800f91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f922:	f383 8811 	msr	BASEPRI, r3
 800f926:	f3bf 8f6f 	isb	sy
 800f92a:	f3bf 8f4f 	dsb	sy
 800f92e:	607b      	str	r3, [r7, #4]
}
 800f930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f932:	f7ff fa05 	bl	800ed40 <xTaskIncrementTick>
 800f936:	4603      	mov	r3, r0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d003      	beq.n	800f944 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f93c:	4b06      	ldr	r3, [pc, #24]	; (800f958 <SysTick_Handler+0x40>)
 800f93e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f942:	601a      	str	r2, [r3, #0]
 800f944:	2300      	movs	r3, #0
 800f946:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	f383 8811 	msr	BASEPRI, r3
}
 800f94e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f950:	bf00      	nop
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	e000ed04 	.word	0xe000ed04

0800f95c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f95c:	b480      	push	{r7}
 800f95e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f960:	4b0b      	ldr	r3, [pc, #44]	; (800f990 <vPortSetupTimerInterrupt+0x34>)
 800f962:	2200      	movs	r2, #0
 800f964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f966:	4b0b      	ldr	r3, [pc, #44]	; (800f994 <vPortSetupTimerInterrupt+0x38>)
 800f968:	2200      	movs	r2, #0
 800f96a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f96c:	4b0a      	ldr	r3, [pc, #40]	; (800f998 <vPortSetupTimerInterrupt+0x3c>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a0a      	ldr	r2, [pc, #40]	; (800f99c <vPortSetupTimerInterrupt+0x40>)
 800f972:	fba2 2303 	umull	r2, r3, r2, r3
 800f976:	099b      	lsrs	r3, r3, #6
 800f978:	4a09      	ldr	r2, [pc, #36]	; (800f9a0 <vPortSetupTimerInterrupt+0x44>)
 800f97a:	3b01      	subs	r3, #1
 800f97c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f97e:	4b04      	ldr	r3, [pc, #16]	; (800f990 <vPortSetupTimerInterrupt+0x34>)
 800f980:	2207      	movs	r2, #7
 800f982:	601a      	str	r2, [r3, #0]
}
 800f984:	bf00      	nop
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	e000e010 	.word	0xe000e010
 800f994:	e000e018 	.word	0xe000e018
 800f998:	20000000 	.word	0x20000000
 800f99c:	10624dd3 	.word	0x10624dd3
 800f9a0:	e000e014 	.word	0xe000e014

0800f9a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f9a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f9b4 <vPortEnableVFP+0x10>
 800f9a8:	6801      	ldr	r1, [r0, #0]
 800f9aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f9ae:	6001      	str	r1, [r0, #0]
 800f9b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f9b2:	bf00      	nop
 800f9b4:	e000ed88 	.word	0xe000ed88

0800f9b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b085      	sub	sp, #20
 800f9bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f9be:	f3ef 8305 	mrs	r3, IPSR
 800f9c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2b0f      	cmp	r3, #15
 800f9c8:	d914      	bls.n	800f9f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f9ca:	4a17      	ldr	r2, [pc, #92]	; (800fa28 <vPortValidateInterruptPriority+0x70>)
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	4413      	add	r3, r2
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f9d4:	4b15      	ldr	r3, [pc, #84]	; (800fa2c <vPortValidateInterruptPriority+0x74>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	7afa      	ldrb	r2, [r7, #11]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d20a      	bcs.n	800f9f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e2:	f383 8811 	msr	BASEPRI, r3
 800f9e6:	f3bf 8f6f 	isb	sy
 800f9ea:	f3bf 8f4f 	dsb	sy
 800f9ee:	607b      	str	r3, [r7, #4]
}
 800f9f0:	bf00      	nop
 800f9f2:	e7fe      	b.n	800f9f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f9f4:	4b0e      	ldr	r3, [pc, #56]	; (800fa30 <vPortValidateInterruptPriority+0x78>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f9fc:	4b0d      	ldr	r3, [pc, #52]	; (800fa34 <vPortValidateInterruptPriority+0x7c>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d90a      	bls.n	800fa1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa08:	f383 8811 	msr	BASEPRI, r3
 800fa0c:	f3bf 8f6f 	isb	sy
 800fa10:	f3bf 8f4f 	dsb	sy
 800fa14:	603b      	str	r3, [r7, #0]
}
 800fa16:	bf00      	nop
 800fa18:	e7fe      	b.n	800fa18 <vPortValidateInterruptPriority+0x60>
	}
 800fa1a:	bf00      	nop
 800fa1c:	3714      	adds	r7, #20
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop
 800fa28:	e000e3f0 	.word	0xe000e3f0
 800fa2c:	20000948 	.word	0x20000948
 800fa30:	e000ed0c 	.word	0xe000ed0c
 800fa34:	2000094c 	.word	0x2000094c

0800fa38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b08a      	sub	sp, #40	; 0x28
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa40:	2300      	movs	r3, #0
 800fa42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa44:	f7ff f8b0 	bl	800eba8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fa48:	4b5d      	ldr	r3, [pc, #372]	; (800fbc0 <pvPortMalloc+0x188>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d101      	bne.n	800fa54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa50:	f000 f924 	bl	800fc9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa54:	4b5b      	ldr	r3, [pc, #364]	; (800fbc4 <pvPortMalloc+0x18c>)
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4013      	ands	r3, r2
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f040 8093 	bne.w	800fb88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d01d      	beq.n	800faa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fa68:	2208      	movs	r2, #8
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4413      	add	r3, r2
 800fa6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f003 0307 	and.w	r3, r3, #7
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d014      	beq.n	800faa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f023 0307 	bic.w	r3, r3, #7
 800fa80:	3308      	adds	r3, #8
 800fa82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f003 0307 	and.w	r3, r3, #7
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d00a      	beq.n	800faa4 <pvPortMalloc+0x6c>
	__asm volatile
 800fa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa92:	f383 8811 	msr	BASEPRI, r3
 800fa96:	f3bf 8f6f 	isb	sy
 800fa9a:	f3bf 8f4f 	dsb	sy
 800fa9e:	617b      	str	r3, [r7, #20]
}
 800faa0:	bf00      	nop
 800faa2:	e7fe      	b.n	800faa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d06e      	beq.n	800fb88 <pvPortMalloc+0x150>
 800faaa:	4b47      	ldr	r3, [pc, #284]	; (800fbc8 <pvPortMalloc+0x190>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d869      	bhi.n	800fb88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fab4:	4b45      	ldr	r3, [pc, #276]	; (800fbcc <pvPortMalloc+0x194>)
 800fab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fab8:	4b44      	ldr	r3, [pc, #272]	; (800fbcc <pvPortMalloc+0x194>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fabe:	e004      	b.n	800faca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800faca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	687a      	ldr	r2, [r7, #4]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d903      	bls.n	800fadc <pvPortMalloc+0xa4>
 800fad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1f1      	bne.n	800fac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fadc:	4b38      	ldr	r3, [pc, #224]	; (800fbc0 <pvPortMalloc+0x188>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d050      	beq.n	800fb88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fae6:	6a3b      	ldr	r3, [r7, #32]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2208      	movs	r2, #8
 800faec:	4413      	add	r3, r2
 800faee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800faf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	6a3b      	ldr	r3, [r7, #32]
 800faf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800faf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafa:	685a      	ldr	r2, [r3, #4]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	1ad2      	subs	r2, r2, r3
 800fb00:	2308      	movs	r3, #8
 800fb02:	005b      	lsls	r3, r3, #1
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d91f      	bls.n	800fb48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fb08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4413      	add	r3, r2
 800fb0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb10:	69bb      	ldr	r3, [r7, #24]
 800fb12:	f003 0307 	and.w	r3, r3, #7
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00a      	beq.n	800fb30 <pvPortMalloc+0xf8>
	__asm volatile
 800fb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb1e:	f383 8811 	msr	BASEPRI, r3
 800fb22:	f3bf 8f6f 	isb	sy
 800fb26:	f3bf 8f4f 	dsb	sy
 800fb2a:	613b      	str	r3, [r7, #16]
}
 800fb2c:	bf00      	nop
 800fb2e:	e7fe      	b.n	800fb2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb32:	685a      	ldr	r2, [r3, #4]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	1ad2      	subs	r2, r2, r3
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb42:	69b8      	ldr	r0, [r7, #24]
 800fb44:	f000 f90c 	bl	800fd60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb48:	4b1f      	ldr	r3, [pc, #124]	; (800fbc8 <pvPortMalloc+0x190>)
 800fb4a:	681a      	ldr	r2, [r3, #0]
 800fb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4e:	685b      	ldr	r3, [r3, #4]
 800fb50:	1ad3      	subs	r3, r2, r3
 800fb52:	4a1d      	ldr	r2, [pc, #116]	; (800fbc8 <pvPortMalloc+0x190>)
 800fb54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb56:	4b1c      	ldr	r3, [pc, #112]	; (800fbc8 <pvPortMalloc+0x190>)
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	4b1d      	ldr	r3, [pc, #116]	; (800fbd0 <pvPortMalloc+0x198>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d203      	bcs.n	800fb6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb62:	4b19      	ldr	r3, [pc, #100]	; (800fbc8 <pvPortMalloc+0x190>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	4a1a      	ldr	r2, [pc, #104]	; (800fbd0 <pvPortMalloc+0x198>)
 800fb68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6c:	685a      	ldr	r2, [r3, #4]
 800fb6e:	4b15      	ldr	r3, [pc, #84]	; (800fbc4 <pvPortMalloc+0x18c>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	431a      	orrs	r2, r3
 800fb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fb7e:	4b15      	ldr	r3, [pc, #84]	; (800fbd4 <pvPortMalloc+0x19c>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	3301      	adds	r3, #1
 800fb84:	4a13      	ldr	r2, [pc, #76]	; (800fbd4 <pvPortMalloc+0x19c>)
 800fb86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb88:	f7ff f81c 	bl	800ebc4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800fb8c:	69fb      	ldr	r3, [r7, #28]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d101      	bne.n	800fb96 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800fb92:	f7f0 ffa9 	bl	8000ae8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	f003 0307 	and.w	r3, r3, #7
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d00a      	beq.n	800fbb6 <pvPortMalloc+0x17e>
	__asm volatile
 800fba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba4:	f383 8811 	msr	BASEPRI, r3
 800fba8:	f3bf 8f6f 	isb	sy
 800fbac:	f3bf 8f4f 	dsb	sy
 800fbb0:	60fb      	str	r3, [r7, #12]
}
 800fbb2:	bf00      	nop
 800fbb4:	e7fe      	b.n	800fbb4 <pvPortMalloc+0x17c>
	return pvReturn;
 800fbb6:	69fb      	ldr	r3, [r7, #28]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3728      	adds	r7, #40	; 0x28
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	20008958 	.word	0x20008958
 800fbc4:	2000896c 	.word	0x2000896c
 800fbc8:	2000895c 	.word	0x2000895c
 800fbcc:	20008950 	.word	0x20008950
 800fbd0:	20008960 	.word	0x20008960
 800fbd4:	20008964 	.word	0x20008964

0800fbd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b086      	sub	sp, #24
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d04d      	beq.n	800fc86 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fbea:	2308      	movs	r3, #8
 800fbec:	425b      	negs	r3, r3
 800fbee:	697a      	ldr	r2, [r7, #20]
 800fbf0:	4413      	add	r3, r2
 800fbf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	685a      	ldr	r2, [r3, #4]
 800fbfc:	4b24      	ldr	r3, [pc, #144]	; (800fc90 <vPortFree+0xb8>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4013      	ands	r3, r2
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d10a      	bne.n	800fc1c <vPortFree+0x44>
	__asm volatile
 800fc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0a:	f383 8811 	msr	BASEPRI, r3
 800fc0e:	f3bf 8f6f 	isb	sy
 800fc12:	f3bf 8f4f 	dsb	sy
 800fc16:	60fb      	str	r3, [r7, #12]
}
 800fc18:	bf00      	nop
 800fc1a:	e7fe      	b.n	800fc1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d00a      	beq.n	800fc3a <vPortFree+0x62>
	__asm volatile
 800fc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc28:	f383 8811 	msr	BASEPRI, r3
 800fc2c:	f3bf 8f6f 	isb	sy
 800fc30:	f3bf 8f4f 	dsb	sy
 800fc34:	60bb      	str	r3, [r7, #8]
}
 800fc36:	bf00      	nop
 800fc38:	e7fe      	b.n	800fc38 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	685a      	ldr	r2, [r3, #4]
 800fc3e:	4b14      	ldr	r3, [pc, #80]	; (800fc90 <vPortFree+0xb8>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	4013      	ands	r3, r2
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d01e      	beq.n	800fc86 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d11a      	bne.n	800fc86 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	685a      	ldr	r2, [r3, #4]
 800fc54:	4b0e      	ldr	r3, [pc, #56]	; (800fc90 <vPortFree+0xb8>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	43db      	mvns	r3, r3
 800fc5a:	401a      	ands	r2, r3
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc60:	f7fe ffa2 	bl	800eba8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	685a      	ldr	r2, [r3, #4]
 800fc68:	4b0a      	ldr	r3, [pc, #40]	; (800fc94 <vPortFree+0xbc>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	4a09      	ldr	r2, [pc, #36]	; (800fc94 <vPortFree+0xbc>)
 800fc70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc72:	6938      	ldr	r0, [r7, #16]
 800fc74:	f000 f874 	bl	800fd60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fc78:	4b07      	ldr	r3, [pc, #28]	; (800fc98 <vPortFree+0xc0>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	4a06      	ldr	r2, [pc, #24]	; (800fc98 <vPortFree+0xc0>)
 800fc80:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fc82:	f7fe ff9f 	bl	800ebc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc86:	bf00      	nop
 800fc88:	3718      	adds	r7, #24
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	2000896c 	.word	0x2000896c
 800fc94:	2000895c 	.word	0x2000895c
 800fc98:	20008968 	.word	0x20008968

0800fc9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b085      	sub	sp, #20
 800fca0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fca6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fca8:	4b27      	ldr	r3, [pc, #156]	; (800fd48 <prvHeapInit+0xac>)
 800fcaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f003 0307 	and.w	r3, r3, #7
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00c      	beq.n	800fcd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	3307      	adds	r3, #7
 800fcba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f023 0307 	bic.w	r3, r3, #7
 800fcc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fcc4:	68ba      	ldr	r2, [r7, #8]
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	1ad3      	subs	r3, r2, r3
 800fcca:	4a1f      	ldr	r2, [pc, #124]	; (800fd48 <prvHeapInit+0xac>)
 800fccc:	4413      	add	r3, r2
 800fcce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fcd4:	4a1d      	ldr	r2, [pc, #116]	; (800fd4c <prvHeapInit+0xb0>)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fcda:	4b1c      	ldr	r3, [pc, #112]	; (800fd4c <prvHeapInit+0xb0>)
 800fcdc:	2200      	movs	r2, #0
 800fcde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	68ba      	ldr	r2, [r7, #8]
 800fce4:	4413      	add	r3, r2
 800fce6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fce8:	2208      	movs	r2, #8
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	1a9b      	subs	r3, r3, r2
 800fcee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	f023 0307 	bic.w	r3, r3, #7
 800fcf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	4a15      	ldr	r2, [pc, #84]	; (800fd50 <prvHeapInit+0xb4>)
 800fcfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fcfe:	4b14      	ldr	r3, [pc, #80]	; (800fd50 <prvHeapInit+0xb4>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2200      	movs	r2, #0
 800fd04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fd06:	4b12      	ldr	r3, [pc, #72]	; (800fd50 <prvHeapInit+0xb4>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	68fa      	ldr	r2, [r7, #12]
 800fd16:	1ad2      	subs	r2, r2, r3
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fd1c:	4b0c      	ldr	r3, [pc, #48]	; (800fd50 <prvHeapInit+0xb4>)
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	4a0a      	ldr	r2, [pc, #40]	; (800fd54 <prvHeapInit+0xb8>)
 800fd2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	4a09      	ldr	r2, [pc, #36]	; (800fd58 <prvHeapInit+0xbc>)
 800fd32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fd34:	4b09      	ldr	r3, [pc, #36]	; (800fd5c <prvHeapInit+0xc0>)
 800fd36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fd3a:	601a      	str	r2, [r3, #0]
}
 800fd3c:	bf00      	nop
 800fd3e:	3714      	adds	r7, #20
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr
 800fd48:	20000950 	.word	0x20000950
 800fd4c:	20008950 	.word	0x20008950
 800fd50:	20008958 	.word	0x20008958
 800fd54:	20008960 	.word	0x20008960
 800fd58:	2000895c 	.word	0x2000895c
 800fd5c:	2000896c 	.word	0x2000896c

0800fd60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd60:	b480      	push	{r7}
 800fd62:	b085      	sub	sp, #20
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd68:	4b28      	ldr	r3, [pc, #160]	; (800fe0c <prvInsertBlockIntoFreeList+0xac>)
 800fd6a:	60fb      	str	r3, [r7, #12]
 800fd6c:	e002      	b.n	800fd74 <prvInsertBlockIntoFreeList+0x14>
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	60fb      	str	r3, [r7, #12]
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d8f7      	bhi.n	800fd6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	68ba      	ldr	r2, [r7, #8]
 800fd88:	4413      	add	r3, r2
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d108      	bne.n	800fda2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	685a      	ldr	r2, [r3, #4]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	441a      	add	r2, r3
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	68ba      	ldr	r2, [r7, #8]
 800fdac:	441a      	add	r2, r3
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d118      	bne.n	800fde8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	4b15      	ldr	r3, [pc, #84]	; (800fe10 <prvInsertBlockIntoFreeList+0xb0>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d00d      	beq.n	800fdde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	685a      	ldr	r2, [r3, #4]
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	441a      	add	r2, r3
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	601a      	str	r2, [r3, #0]
 800fddc:	e008      	b.n	800fdf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fdde:	4b0c      	ldr	r3, [pc, #48]	; (800fe10 <prvInsertBlockIntoFreeList+0xb0>)
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	601a      	str	r2, [r3, #0]
 800fde6:	e003      	b.n	800fdf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d002      	beq.n	800fdfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	687a      	ldr	r2, [r7, #4]
 800fdfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fdfe:	bf00      	nop
 800fe00:	3714      	adds	r7, #20
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr
 800fe0a:	bf00      	nop
 800fe0c:	20008950 	.word	0x20008950
 800fe10:	20008958 	.word	0x20008958

0800fe14 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800fe14:	b590      	push	{r4, r7, lr}
 800fe16:	b089      	sub	sp, #36	; 0x24
 800fe18:	af04      	add	r7, sp, #16
 800fe1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fe22:	7919      	ldrb	r1, [r3, #4]
 800fe24:	2350      	movs	r3, #80	; 0x50
 800fe26:	2206      	movs	r2, #6
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f002 f891 	bl	8011f50 <USBH_FindInterface>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800fe32:	7bfb      	ldrb	r3, [r7, #15]
 800fe34:	2bff      	cmp	r3, #255	; 0xff
 800fe36:	d002      	beq.n	800fe3e <USBH_MSC_InterfaceInit+0x2a>
 800fe38:	7bfb      	ldrb	r3, [r7, #15]
 800fe3a:	2b01      	cmp	r3, #1
 800fe3c:	d901      	bls.n	800fe42 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800fe3e:	2302      	movs	r3, #2
 800fe40:	e106      	b.n	8010050 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800fe42:	7bfb      	ldrb	r3, [r7, #15]
 800fe44:	4619      	mov	r1, r3
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f002 f866 	bl	8011f18 <USBH_SelectInterface>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800fe50:	7bbb      	ldrb	r3, [r7, #14]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d001      	beq.n	800fe5a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800fe56:	2302      	movs	r3, #2
 800fe58:	e0fa      	b.n	8010050 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800fe60:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fe64:	f003 fe26 	bl	8013ab4 <malloc>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fe72:	69db      	ldr	r3, [r3, #28]
 800fe74:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d101      	bne.n	800fe80 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800fe7c:	2302      	movs	r3, #2
 800fe7e:	e0e7      	b.n	8010050 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800fe80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fe84:	2100      	movs	r1, #0
 800fe86:	68b8      	ldr	r0, [r7, #8]
 800fe88:	f003 fe32 	bl	8013af0 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800fe8c:	7bfb      	ldrb	r3, [r7, #15]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	211a      	movs	r1, #26
 800fe92:	fb01 f303 	mul.w	r3, r1, r3
 800fe96:	4413      	add	r3, r2
 800fe98:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fe9c:	781b      	ldrb	r3, [r3, #0]
 800fe9e:	b25b      	sxtb	r3, r3
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	da16      	bge.n	800fed2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800fea4:	7bfb      	ldrb	r3, [r7, #15]
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	211a      	movs	r1, #26
 800feaa:	fb01 f303 	mul.w	r3, r1, r3
 800feae:	4413      	add	r3, r2
 800feb0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800feb4:	781a      	ldrb	r2, [r3, #0]
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800feba:	7bfb      	ldrb	r3, [r7, #15]
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	211a      	movs	r1, #26
 800fec0:	fb01 f303 	mul.w	r3, r1, r3
 800fec4:	4413      	add	r3, r2
 800fec6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800feca:	881a      	ldrh	r2, [r3, #0]
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	815a      	strh	r2, [r3, #10]
 800fed0:	e015      	b.n	800fefe <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800fed2:	7bfb      	ldrb	r3, [r7, #15]
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	211a      	movs	r1, #26
 800fed8:	fb01 f303 	mul.w	r3, r1, r3
 800fedc:	4413      	add	r3, r2
 800fede:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fee2:	781a      	ldrb	r2, [r3, #0]
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fee8:	7bfb      	ldrb	r3, [r7, #15]
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	211a      	movs	r1, #26
 800feee:	fb01 f303 	mul.w	r3, r1, r3
 800fef2:	4413      	add	r3, r2
 800fef4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fef8:	881a      	ldrh	r2, [r3, #0]
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800fefe:	7bfb      	ldrb	r3, [r7, #15]
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	211a      	movs	r1, #26
 800ff04:	fb01 f303 	mul.w	r3, r1, r3
 800ff08:	4413      	add	r3, r2
 800ff0a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	b25b      	sxtb	r3, r3
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	da16      	bge.n	800ff44 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800ff16:	7bfb      	ldrb	r3, [r7, #15]
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	211a      	movs	r1, #26
 800ff1c:	fb01 f303 	mul.w	r3, r1, r3
 800ff20:	4413      	add	r3, r2
 800ff22:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ff26:	781a      	ldrb	r2, [r3, #0]
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ff2c:	7bfb      	ldrb	r3, [r7, #15]
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	211a      	movs	r1, #26
 800ff32:	fb01 f303 	mul.w	r3, r1, r3
 800ff36:	4413      	add	r3, r2
 800ff38:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ff3c:	881a      	ldrh	r2, [r3, #0]
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	815a      	strh	r2, [r3, #10]
 800ff42:	e015      	b.n	800ff70 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800ff44:	7bfb      	ldrb	r3, [r7, #15]
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	211a      	movs	r1, #26
 800ff4a:	fb01 f303 	mul.w	r3, r1, r3
 800ff4e:	4413      	add	r3, r2
 800ff50:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ff54:	781a      	ldrb	r2, [r3, #0]
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ff5a:	7bfb      	ldrb	r3, [r7, #15]
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	211a      	movs	r1, #26
 800ff60:	fb01 f303 	mul.w	r3, r1, r3
 800ff64:	4413      	add	r3, r2
 800ff66:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ff6a:	881a      	ldrh	r2, [r3, #0]
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	2200      	movs	r2, #0
 800ff74:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	799b      	ldrb	r3, [r3, #6]
 800ff86:	4619      	mov	r1, r3
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f003 fd06 	bl	801399a <USBH_AllocPipe>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	461a      	mov	r2, r3
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	79db      	ldrb	r3, [r3, #7]
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f003 fcfc 	bl	801399a <USBH_AllocPipe>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 fe04 	bl	8010bb8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	799b      	ldrb	r3, [r3, #6]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d01e      	beq.n	800fff6 <USBH_MSC_InterfaceInit+0x1e2>
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	891b      	ldrh	r3, [r3, #8]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d01a      	beq.n	800fff6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	7959      	ldrb	r1, [r3, #5]
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	7998      	ldrb	r0, [r3, #6]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ffd4:	68ba      	ldr	r2, [r7, #8]
 800ffd6:	8912      	ldrh	r2, [r2, #8]
 800ffd8:	9202      	str	r2, [sp, #8]
 800ffda:	2202      	movs	r2, #2
 800ffdc:	9201      	str	r2, [sp, #4]
 800ffde:	9300      	str	r3, [sp, #0]
 800ffe0:	4623      	mov	r3, r4
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f003 fca9 	bl	801393c <USBH_OpenPipe>
 800ffea:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	79db      	ldrb	r3, [r3, #7]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d02c      	beq.n	801004e <USBH_MSC_InterfaceInit+0x23a>
 800fff4:	e001      	b.n	800fffa <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800fff6:	2303      	movs	r3, #3
 800fff8:	e02a      	b.n	8010050 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	895b      	ldrh	r3, [r3, #10]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d025      	beq.n	801004e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	7919      	ldrb	r1, [r3, #4]
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	79d8      	ldrb	r0, [r3, #7]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010016:	68ba      	ldr	r2, [r7, #8]
 8010018:	8952      	ldrh	r2, [r2, #10]
 801001a:	9202      	str	r2, [sp, #8]
 801001c:	2202      	movs	r2, #2
 801001e:	9201      	str	r2, [sp, #4]
 8010020:	9300      	str	r3, [sp, #0]
 8010022:	4623      	mov	r3, r4
 8010024:	4602      	mov	r2, r0
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f003 fc88 	bl	801393c <USBH_OpenPipe>
 801002c:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	791b      	ldrb	r3, [r3, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	4619      	mov	r1, r3
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f001 fdda 	bl	8011bf0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	795b      	ldrb	r3, [r3, #5]
 8010040:	2200      	movs	r2, #0
 8010042:	4619      	mov	r1, r3
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f001 fdd3 	bl	8011bf0 <USBH_LL_SetToggle>

  return USBH_OK;
 801004a:	2300      	movs	r3, #0
 801004c:	e000      	b.n	8010050 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 801004e:	2303      	movs	r3, #3
}
 8010050:	4618      	mov	r0, r3
 8010052:	3714      	adds	r7, #20
 8010054:	46bd      	mov	sp, r7
 8010056:	bd90      	pop	{r4, r7, pc}

08010058 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010066:	69db      	ldr	r3, [r3, #28]
 8010068:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	795b      	ldrb	r3, [r3, #5]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d00e      	beq.n	8010090 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	795b      	ldrb	r3, [r3, #5]
 8010076:	4619      	mov	r1, r3
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f003 fc7e 	bl	801397a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	795b      	ldrb	r3, [r3, #5]
 8010082:	4619      	mov	r1, r3
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f003 fca9 	bl	80139dc <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2200      	movs	r2, #0
 801008e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	791b      	ldrb	r3, [r3, #4]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d00e      	beq.n	80100b6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	791b      	ldrb	r3, [r3, #4]
 801009c:	4619      	mov	r1, r3
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f003 fc6b 	bl	801397a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	791b      	ldrb	r3, [r3, #4]
 80100a8:	4619      	mov	r1, r3
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f003 fc96 	bl	80139dc <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2200      	movs	r2, #0
 80100b4:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80100bc:	69db      	ldr	r3, [r3, #28]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d00b      	beq.n	80100da <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80100c8:	69db      	ldr	r3, [r3, #28]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f003 fcfa 	bl	8013ac4 <free>
    phost->pActiveClass->pData = 0U;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80100d6:	2200      	movs	r2, #0
 80100d8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80100da:	2300      	movs	r3, #0
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3710      	adds	r7, #16
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80100f2:	69db      	ldr	r3, [r3, #28]
 80100f4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80100f6:	2301      	movs	r3, #1
 80100f8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	7b9b      	ldrb	r3, [r3, #14]
 80100fe:	2b03      	cmp	r3, #3
 8010100:	d041      	beq.n	8010186 <USBH_MSC_ClassRequest+0xa2>
 8010102:	2b03      	cmp	r3, #3
 8010104:	dc4b      	bgt.n	801019e <USBH_MSC_ClassRequest+0xba>
 8010106:	2b00      	cmp	r3, #0
 8010108:	d001      	beq.n	801010e <USBH_MSC_ClassRequest+0x2a>
 801010a:	2b02      	cmp	r3, #2
 801010c:	d147      	bne.n	801019e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	4619      	mov	r1, r3
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f000 fd32 	bl	8010b7c <USBH_MSC_BOT_REQ_GetMaxLUN>
 8010118:	4603      	mov	r3, r0
 801011a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 801011c:	7bfb      	ldrb	r3, [r7, #15]
 801011e:	2b03      	cmp	r3, #3
 8010120:	d104      	bne.n	801012c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	2200      	movs	r2, #0
 8010126:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8010128:	2300      	movs	r3, #0
 801012a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 801012c:	7bfb      	ldrb	r3, [r7, #15]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d137      	bne.n	80101a2 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	2b02      	cmp	r3, #2
 8010138:	d804      	bhi.n	8010144 <USBH_MSC_ClassRequest+0x60>
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	3301      	adds	r3, #1
 8010140:	b2da      	uxtb	r2, r3
 8010142:	e000      	b.n	8010146 <USBH_MSC_ClassRequest+0x62>
 8010144:	2202      	movs	r2, #2
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 801014a:	2300      	movs	r3, #0
 801014c:	73bb      	strb	r3, [r7, #14]
 801014e:	e014      	b.n	801017a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8010150:	7bbb      	ldrb	r3, [r7, #14]
 8010152:	68ba      	ldr	r2, [r7, #8]
 8010154:	2134      	movs	r1, #52	; 0x34
 8010156:	fb01 f303 	mul.w	r3, r1, r3
 801015a:	4413      	add	r3, r2
 801015c:	3392      	adds	r3, #146	; 0x92
 801015e:	2202      	movs	r2, #2
 8010160:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8010162:	7bbb      	ldrb	r3, [r7, #14]
 8010164:	68ba      	ldr	r2, [r7, #8]
 8010166:	2134      	movs	r1, #52	; 0x34
 8010168:	fb01 f303 	mul.w	r3, r1, r3
 801016c:	4413      	add	r3, r2
 801016e:	33c1      	adds	r3, #193	; 0xc1
 8010170:	2200      	movs	r2, #0
 8010172:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8010174:	7bbb      	ldrb	r3, [r7, #14]
 8010176:	3301      	adds	r3, #1
 8010178:	73bb      	strb	r3, [r7, #14]
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	7bba      	ldrb	r2, [r7, #14]
 8010180:	429a      	cmp	r2, r3
 8010182:	d3e5      	bcc.n	8010150 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8010184:	e00d      	b.n	80101a2 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8010186:	2100      	movs	r1, #0
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f002 fdc8 	bl	8012d1e <USBH_ClrFeature>
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d108      	bne.n	80101a6 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	7bda      	ldrb	r2, [r3, #15]
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	739a      	strb	r2, [r3, #14]
      }
      break;
 801019c:	e003      	b.n	80101a6 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 801019e:	bf00      	nop
 80101a0:	e002      	b.n	80101a8 <USBH_MSC_ClassRequest+0xc4>
      break;
 80101a2:	bf00      	nop
 80101a4:	e000      	b.n	80101a8 <USBH_MSC_ClassRequest+0xc4>
      break;
 80101a6:	bf00      	nop
  }

  return status;
 80101a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
	...

080101b4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b086      	sub	sp, #24
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80101c2:	69db      	ldr	r3, [r3, #28]
 80101c4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80101c6:	2301      	movs	r3, #1
 80101c8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80101ca:	2301      	movs	r3, #1
 80101cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80101ce:	2301      	movs	r3, #1
 80101d0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	7b1b      	ldrb	r3, [r3, #12]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d003      	beq.n	80101e2 <USBH_MSC_Process+0x2e>
 80101da:	2b01      	cmp	r3, #1
 80101dc:	f000 828d 	beq.w	80106fa <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80101e0:	e28e      	b.n	8010700 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	429a      	cmp	r2, r3
 80101f0:	f080 8267 	bcs.w	80106c2 <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80101fa:	4619      	mov	r1, r3
 80101fc:	693a      	ldr	r2, [r7, #16]
 80101fe:	2334      	movs	r3, #52	; 0x34
 8010200:	fb01 f303 	mul.w	r3, r1, r3
 8010204:	4413      	add	r3, r2
 8010206:	3391      	adds	r3, #145	; 0x91
 8010208:	2201      	movs	r2, #1
 801020a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010212:	4619      	mov	r1, r3
 8010214:	693a      	ldr	r2, [r7, #16]
 8010216:	2334      	movs	r3, #52	; 0x34
 8010218:	fb01 f303 	mul.w	r3, r1, r3
 801021c:	4413      	add	r3, r2
 801021e:	3390      	adds	r3, #144	; 0x90
 8010220:	781b      	ldrb	r3, [r3, #0]
 8010222:	2b08      	cmp	r3, #8
 8010224:	f200 8235 	bhi.w	8010692 <USBH_MSC_Process+0x4de>
 8010228:	a201      	add	r2, pc, #4	; (adr r2, 8010230 <USBH_MSC_Process+0x7c>)
 801022a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801022e:	bf00      	nop
 8010230:	08010255 	.word	0x08010255
 8010234:	08010693 	.word	0x08010693
 8010238:	0801031d 	.word	0x0801031d
 801023c:	080104a1 	.word	0x080104a1
 8010240:	0801027b 	.word	0x0801027b
 8010244:	0801056d 	.word	0x0801056d
 8010248:	08010693 	.word	0x08010693
 801024c:	08010693 	.word	0x08010693
 8010250:	08010681 	.word	0x08010681
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801025a:	4619      	mov	r1, r3
 801025c:	693a      	ldr	r2, [r7, #16]
 801025e:	2334      	movs	r3, #52	; 0x34
 8010260:	fb01 f303 	mul.w	r3, r1, r3
 8010264:	4413      	add	r3, r2
 8010266:	3390      	adds	r3, #144	; 0x90
 8010268:	2204      	movs	r2, #4
 801026a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8010278:	e214      	b.n	80106a4 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010280:	b2d9      	uxtb	r1, r3
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010288:	461a      	mov	r2, r3
 801028a:	2334      	movs	r3, #52	; 0x34
 801028c:	fb02 f303 	mul.w	r3, r2, r3
 8010290:	3398      	adds	r3, #152	; 0x98
 8010292:	693a      	ldr	r2, [r7, #16]
 8010294:	4413      	add	r3, r2
 8010296:	3307      	adds	r3, #7
 8010298:	461a      	mov	r2, r3
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	f001 f836 	bl	801130c <USBH_MSC_SCSI_Inquiry>
 80102a0:	4603      	mov	r3, r0
 80102a2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80102a4:	7bfb      	ldrb	r3, [r7, #15]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d10b      	bne.n	80102c2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102b0:	4619      	mov	r1, r3
 80102b2:	693a      	ldr	r2, [r7, #16]
 80102b4:	2334      	movs	r3, #52	; 0x34
 80102b6:	fb01 f303 	mul.w	r3, r1, r3
 80102ba:	4413      	add	r3, r2
 80102bc:	3390      	adds	r3, #144	; 0x90
 80102be:	2202      	movs	r2, #2
 80102c0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80102c2:	7bfb      	ldrb	r3, [r7, #15]
 80102c4:	2b02      	cmp	r3, #2
 80102c6:	d10c      	bne.n	80102e2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102ce:	4619      	mov	r1, r3
 80102d0:	693a      	ldr	r2, [r7, #16]
 80102d2:	2334      	movs	r3, #52	; 0x34
 80102d4:	fb01 f303 	mul.w	r3, r1, r3
 80102d8:	4413      	add	r3, r2
 80102da:	3390      	adds	r3, #144	; 0x90
 80102dc:	2205      	movs	r2, #5
 80102de:	701a      	strb	r2, [r3, #0]
            break;
 80102e0:	e1d9      	b.n	8010696 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80102e2:	7bfb      	ldrb	r3, [r7, #15]
 80102e4:	2b04      	cmp	r3, #4
 80102e6:	f040 81d6 	bne.w	8010696 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80102f0:	4619      	mov	r1, r3
 80102f2:	693a      	ldr	r2, [r7, #16]
 80102f4:	2334      	movs	r3, #52	; 0x34
 80102f6:	fb01 f303 	mul.w	r3, r1, r3
 80102fa:	4413      	add	r3, r2
 80102fc:	3390      	adds	r3, #144	; 0x90
 80102fe:	2201      	movs	r2, #1
 8010300:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010308:	4619      	mov	r1, r3
 801030a:	693a      	ldr	r2, [r7, #16]
 801030c:	2334      	movs	r3, #52	; 0x34
 801030e:	fb01 f303 	mul.w	r3, r1, r3
 8010312:	4413      	add	r3, r2
 8010314:	3391      	adds	r3, #145	; 0x91
 8010316:	2202      	movs	r2, #2
 8010318:	701a      	strb	r2, [r3, #0]
            break;
 801031a:	e1bc      	b.n	8010696 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010322:	b2db      	uxtb	r3, r3
 8010324:	4619      	mov	r1, r3
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f000 ff32 	bl	8011190 <USBH_MSC_SCSI_TestUnitReady>
 801032c:	4603      	mov	r3, r0
 801032e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8010330:	7bbb      	ldrb	r3, [r7, #14]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d149      	bne.n	80103ca <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801033c:	4619      	mov	r1, r3
 801033e:	693a      	ldr	r2, [r7, #16]
 8010340:	2334      	movs	r3, #52	; 0x34
 8010342:	fb01 f303 	mul.w	r3, r1, r3
 8010346:	4413      	add	r3, r2
 8010348:	3392      	adds	r3, #146	; 0x92
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d00c      	beq.n	801036a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010356:	4619      	mov	r1, r3
 8010358:	693a      	ldr	r2, [r7, #16]
 801035a:	2334      	movs	r3, #52	; 0x34
 801035c:	fb01 f303 	mul.w	r3, r1, r3
 8010360:	4413      	add	r3, r2
 8010362:	33c1      	adds	r3, #193	; 0xc1
 8010364:	2201      	movs	r2, #1
 8010366:	701a      	strb	r2, [r3, #0]
 8010368:	e00b      	b.n	8010382 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010370:	4619      	mov	r1, r3
 8010372:	693a      	ldr	r2, [r7, #16]
 8010374:	2334      	movs	r3, #52	; 0x34
 8010376:	fb01 f303 	mul.w	r3, r1, r3
 801037a:	4413      	add	r3, r2
 801037c:	33c1      	adds	r3, #193	; 0xc1
 801037e:	2200      	movs	r2, #0
 8010380:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010388:	4619      	mov	r1, r3
 801038a:	693a      	ldr	r2, [r7, #16]
 801038c:	2334      	movs	r3, #52	; 0x34
 801038e:	fb01 f303 	mul.w	r3, r1, r3
 8010392:	4413      	add	r3, r2
 8010394:	3390      	adds	r3, #144	; 0x90
 8010396:	2203      	movs	r2, #3
 8010398:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80103a0:	4619      	mov	r1, r3
 80103a2:	693a      	ldr	r2, [r7, #16]
 80103a4:	2334      	movs	r3, #52	; 0x34
 80103a6:	fb01 f303 	mul.w	r3, r1, r3
 80103aa:	4413      	add	r3, r2
 80103ac:	3391      	adds	r3, #145	; 0x91
 80103ae:	2200      	movs	r2, #0
 80103b0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80103b8:	4619      	mov	r1, r3
 80103ba:	693a      	ldr	r2, [r7, #16]
 80103bc:	2334      	movs	r3, #52	; 0x34
 80103be:	fb01 f303 	mul.w	r3, r1, r3
 80103c2:	4413      	add	r3, r2
 80103c4:	3392      	adds	r3, #146	; 0x92
 80103c6:	2200      	movs	r2, #0
 80103c8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80103ca:	7bbb      	ldrb	r3, [r7, #14]
 80103cc:	2b02      	cmp	r3, #2
 80103ce:	d14a      	bne.n	8010466 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80103d6:	4619      	mov	r1, r3
 80103d8:	693a      	ldr	r2, [r7, #16]
 80103da:	2334      	movs	r3, #52	; 0x34
 80103dc:	fb01 f303 	mul.w	r3, r1, r3
 80103e0:	4413      	add	r3, r2
 80103e2:	3392      	adds	r3, #146	; 0x92
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	2b02      	cmp	r3, #2
 80103e8:	d00c      	beq.n	8010404 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80103f0:	4619      	mov	r1, r3
 80103f2:	693a      	ldr	r2, [r7, #16]
 80103f4:	2334      	movs	r3, #52	; 0x34
 80103f6:	fb01 f303 	mul.w	r3, r1, r3
 80103fa:	4413      	add	r3, r2
 80103fc:	33c1      	adds	r3, #193	; 0xc1
 80103fe:	2201      	movs	r2, #1
 8010400:	701a      	strb	r2, [r3, #0]
 8010402:	e00b      	b.n	801041c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801040a:	4619      	mov	r1, r3
 801040c:	693a      	ldr	r2, [r7, #16]
 801040e:	2334      	movs	r3, #52	; 0x34
 8010410:	fb01 f303 	mul.w	r3, r1, r3
 8010414:	4413      	add	r3, r2
 8010416:	33c1      	adds	r3, #193	; 0xc1
 8010418:	2200      	movs	r2, #0
 801041a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010422:	4619      	mov	r1, r3
 8010424:	693a      	ldr	r2, [r7, #16]
 8010426:	2334      	movs	r3, #52	; 0x34
 8010428:	fb01 f303 	mul.w	r3, r1, r3
 801042c:	4413      	add	r3, r2
 801042e:	3390      	adds	r3, #144	; 0x90
 8010430:	2205      	movs	r2, #5
 8010432:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801043a:	4619      	mov	r1, r3
 801043c:	693a      	ldr	r2, [r7, #16]
 801043e:	2334      	movs	r3, #52	; 0x34
 8010440:	fb01 f303 	mul.w	r3, r1, r3
 8010444:	4413      	add	r3, r2
 8010446:	3391      	adds	r3, #145	; 0x91
 8010448:	2201      	movs	r2, #1
 801044a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010452:	4619      	mov	r1, r3
 8010454:	693a      	ldr	r2, [r7, #16]
 8010456:	2334      	movs	r3, #52	; 0x34
 8010458:	fb01 f303 	mul.w	r3, r1, r3
 801045c:	4413      	add	r3, r2
 801045e:	3392      	adds	r3, #146	; 0x92
 8010460:	2202      	movs	r2, #2
 8010462:	701a      	strb	r2, [r3, #0]
            break;
 8010464:	e119      	b.n	801069a <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8010466:	7bbb      	ldrb	r3, [r7, #14]
 8010468:	2b04      	cmp	r3, #4
 801046a:	f040 8116 	bne.w	801069a <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010474:	4619      	mov	r1, r3
 8010476:	693a      	ldr	r2, [r7, #16]
 8010478:	2334      	movs	r3, #52	; 0x34
 801047a:	fb01 f303 	mul.w	r3, r1, r3
 801047e:	4413      	add	r3, r2
 8010480:	3390      	adds	r3, #144	; 0x90
 8010482:	2201      	movs	r2, #1
 8010484:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801048c:	4619      	mov	r1, r3
 801048e:	693a      	ldr	r2, [r7, #16]
 8010490:	2334      	movs	r3, #52	; 0x34
 8010492:	fb01 f303 	mul.w	r3, r1, r3
 8010496:	4413      	add	r3, r2
 8010498:	3391      	adds	r3, #145	; 0x91
 801049a:	2202      	movs	r2, #2
 801049c:	701a      	strb	r2, [r3, #0]
            break;
 801049e:	e0fc      	b.n	801069a <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80104a6:	b2d9      	uxtb	r1, r3
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80104ae:	461a      	mov	r2, r3
 80104b0:	2334      	movs	r3, #52	; 0x34
 80104b2:	fb02 f303 	mul.w	r3, r2, r3
 80104b6:	3390      	adds	r3, #144	; 0x90
 80104b8:	693a      	ldr	r2, [r7, #16]
 80104ba:	4413      	add	r3, r2
 80104bc:	3304      	adds	r3, #4
 80104be:	461a      	mov	r2, r3
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f000 fea8 	bl	8011216 <USBH_MSC_SCSI_ReadCapacity>
 80104c6:	4603      	mov	r3, r0
 80104c8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80104ca:	7bfb      	ldrb	r3, [r7, #15]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d120      	bne.n	8010512 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80104d6:	4619      	mov	r1, r3
 80104d8:	693a      	ldr	r2, [r7, #16]
 80104da:	2334      	movs	r3, #52	; 0x34
 80104dc:	fb01 f303 	mul.w	r3, r1, r3
 80104e0:	4413      	add	r3, r2
 80104e2:	3390      	adds	r3, #144	; 0x90
 80104e4:	2201      	movs	r2, #1
 80104e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80104ee:	4619      	mov	r1, r3
 80104f0:	693a      	ldr	r2, [r7, #16]
 80104f2:	2334      	movs	r3, #52	; 0x34
 80104f4:	fb01 f303 	mul.w	r3, r1, r3
 80104f8:	4413      	add	r3, r2
 80104fa:	3391      	adds	r3, #145	; 0x91
 80104fc:	2200      	movs	r2, #0
 80104fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010506:	3301      	adds	r3, #1
 8010508:	b29a      	uxth	r2, r3
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8010510:	e0c5      	b.n	801069e <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 8010512:	7bfb      	ldrb	r3, [r7, #15]
 8010514:	2b02      	cmp	r3, #2
 8010516:	d10c      	bne.n	8010532 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801051e:	4619      	mov	r1, r3
 8010520:	693a      	ldr	r2, [r7, #16]
 8010522:	2334      	movs	r3, #52	; 0x34
 8010524:	fb01 f303 	mul.w	r3, r1, r3
 8010528:	4413      	add	r3, r2
 801052a:	3390      	adds	r3, #144	; 0x90
 801052c:	2205      	movs	r2, #5
 801052e:	701a      	strb	r2, [r3, #0]
            break;
 8010530:	e0b5      	b.n	801069e <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8010532:	7bfb      	ldrb	r3, [r7, #15]
 8010534:	2b04      	cmp	r3, #4
 8010536:	f040 80b2 	bne.w	801069e <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010540:	4619      	mov	r1, r3
 8010542:	693a      	ldr	r2, [r7, #16]
 8010544:	2334      	movs	r3, #52	; 0x34
 8010546:	fb01 f303 	mul.w	r3, r1, r3
 801054a:	4413      	add	r3, r2
 801054c:	3390      	adds	r3, #144	; 0x90
 801054e:	2201      	movs	r2, #1
 8010550:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010558:	4619      	mov	r1, r3
 801055a:	693a      	ldr	r2, [r7, #16]
 801055c:	2334      	movs	r3, #52	; 0x34
 801055e:	fb01 f303 	mul.w	r3, r1, r3
 8010562:	4413      	add	r3, r2
 8010564:	3391      	adds	r3, #145	; 0x91
 8010566:	2202      	movs	r2, #2
 8010568:	701a      	strb	r2, [r3, #0]
            break;
 801056a:	e098      	b.n	801069e <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010572:	b2d9      	uxtb	r1, r3
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801057a:	461a      	mov	r2, r3
 801057c:	2334      	movs	r3, #52	; 0x34
 801057e:	fb02 f303 	mul.w	r3, r2, r3
 8010582:	3398      	adds	r3, #152	; 0x98
 8010584:	693a      	ldr	r2, [r7, #16]
 8010586:	4413      	add	r3, r2
 8010588:	3304      	adds	r3, #4
 801058a:	461a      	mov	r2, r3
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f000 ff62 	bl	8011456 <USBH_MSC_SCSI_RequestSense>
 8010592:	4603      	mov	r3, r0
 8010594:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8010596:	7bfb      	ldrb	r3, [r7, #15]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d145      	bne.n	8010628 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80105a2:	4619      	mov	r1, r3
 80105a4:	693a      	ldr	r2, [r7, #16]
 80105a6:	2334      	movs	r3, #52	; 0x34
 80105a8:	fb01 f303 	mul.w	r3, r1, r3
 80105ac:	4413      	add	r3, r2
 80105ae:	339c      	adds	r3, #156	; 0x9c
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	2b06      	cmp	r3, #6
 80105b4:	d00c      	beq.n	80105d0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80105bc:	4619      	mov	r1, r3
 80105be:	693a      	ldr	r2, [r7, #16]
 80105c0:	2334      	movs	r3, #52	; 0x34
 80105c2:	fb01 f303 	mul.w	r3, r1, r3
 80105c6:	4413      	add	r3, r2
 80105c8:	339c      	adds	r3, #156	; 0x9c
 80105ca:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80105cc:	2b02      	cmp	r3, #2
 80105ce:	d117      	bne.n	8010600 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80105dc:	1ad3      	subs	r3, r2, r3
 80105de:	f242 720f 	movw	r2, #9999	; 0x270f
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d80c      	bhi.n	8010600 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80105ec:	4619      	mov	r1, r3
 80105ee:	693a      	ldr	r2, [r7, #16]
 80105f0:	2334      	movs	r3, #52	; 0x34
 80105f2:	fb01 f303 	mul.w	r3, r1, r3
 80105f6:	4413      	add	r3, r2
 80105f8:	3390      	adds	r3, #144	; 0x90
 80105fa:	2202      	movs	r2, #2
 80105fc:	701a      	strb	r2, [r3, #0]
                  break;
 80105fe:	e051      	b.n	80106a4 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010606:	4619      	mov	r1, r3
 8010608:	693a      	ldr	r2, [r7, #16]
 801060a:	2334      	movs	r3, #52	; 0x34
 801060c:	fb01 f303 	mul.w	r3, r1, r3
 8010610:	4413      	add	r3, r2
 8010612:	3390      	adds	r3, #144	; 0x90
 8010614:	2201      	movs	r2, #1
 8010616:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8010618:	693b      	ldr	r3, [r7, #16]
 801061a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801061e:	3301      	adds	r3, #1
 8010620:	b29a      	uxth	r2, r3
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8010628:	7bfb      	ldrb	r3, [r7, #15]
 801062a:	2b02      	cmp	r3, #2
 801062c:	d10c      	bne.n	8010648 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010634:	4619      	mov	r1, r3
 8010636:	693a      	ldr	r2, [r7, #16]
 8010638:	2334      	movs	r3, #52	; 0x34
 801063a:	fb01 f303 	mul.w	r3, r1, r3
 801063e:	4413      	add	r3, r2
 8010640:	3390      	adds	r3, #144	; 0x90
 8010642:	2208      	movs	r2, #8
 8010644:	701a      	strb	r2, [r3, #0]
            break;
 8010646:	e02c      	b.n	80106a2 <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8010648:	7bfb      	ldrb	r3, [r7, #15]
 801064a:	2b04      	cmp	r3, #4
 801064c:	d129      	bne.n	80106a2 <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010654:	4619      	mov	r1, r3
 8010656:	693a      	ldr	r2, [r7, #16]
 8010658:	2334      	movs	r3, #52	; 0x34
 801065a:	fb01 f303 	mul.w	r3, r1, r3
 801065e:	4413      	add	r3, r2
 8010660:	3390      	adds	r3, #144	; 0x90
 8010662:	2201      	movs	r2, #1
 8010664:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801066c:	4619      	mov	r1, r3
 801066e:	693a      	ldr	r2, [r7, #16]
 8010670:	2334      	movs	r3, #52	; 0x34
 8010672:	fb01 f303 	mul.w	r3, r1, r3
 8010676:	4413      	add	r3, r2
 8010678:	3391      	adds	r3, #145	; 0x91
 801067a:	2202      	movs	r2, #2
 801067c:	701a      	strb	r2, [r3, #0]
            break;
 801067e:	e010      	b.n	80106a2 <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8010686:	3301      	adds	r3, #1
 8010688:	b29a      	uxth	r2, r3
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8010690:	e008      	b.n	80106a4 <USBH_MSC_Process+0x4f0>
            break;
 8010692:	bf00      	nop
 8010694:	e006      	b.n	80106a4 <USBH_MSC_Process+0x4f0>
            break;
 8010696:	bf00      	nop
 8010698:	e004      	b.n	80106a4 <USBH_MSC_Process+0x4f0>
            break;
 801069a:	bf00      	nop
 801069c:	e002      	b.n	80106a4 <USBH_MSC_Process+0x4f0>
            break;
 801069e:	bf00      	nop
 80106a0:	e000      	b.n	80106a4 <USBH_MSC_Process+0x4f0>
            break;
 80106a2:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2204      	movs	r2, #4
 80106a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80106b8:	2200      	movs	r2, #0
 80106ba:	4619      	mov	r1, r3
 80106bc:	f7fd f974 	bl	800d9a8 <osMessagePut>
      break;
 80106c0:	e01e      	b.n	8010700 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	2200      	movs	r2, #0
 80106c6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	2201      	movs	r2, #1
 80106ce:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2204      	movs	r2, #4
 80106d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80106e4:	2200      	movs	r2, #0
 80106e6:	4619      	mov	r1, r3
 80106e8:	f7fd f95e 	bl	800d9a8 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80106f2:	2102      	movs	r1, #2
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	4798      	blx	r3
      break;
 80106f8:	e002      	b.n	8010700 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 80106fa:	2300      	movs	r3, #0
 80106fc:	75fb      	strb	r3, [r7, #23]
      break;
 80106fe:	bf00      	nop
  }
  return error;
 8010700:	7dfb      	ldrb	r3, [r7, #23]
}
 8010702:	4618      	mov	r0, r3
 8010704:	3718      	adds	r7, #24
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop

0801070c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8010714:	2300      	movs	r3, #0
}
 8010716:	4618      	mov	r0, r3
 8010718:	370c      	adds	r7, #12
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr

08010722 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8010722:	b580      	push	{r7, lr}
 8010724:	b088      	sub	sp, #32
 8010726:	af02      	add	r7, sp, #8
 8010728:	6078      	str	r0, [r7, #4]
 801072a:	460b      	mov	r3, r1
 801072c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010734:	69db      	ldr	r3, [r3, #28]
 8010736:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8010738:	2301      	movs	r3, #1
 801073a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 801073c:	2301      	movs	r3, #1
 801073e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8010740:	78fb      	ldrb	r3, [r7, #3]
 8010742:	693a      	ldr	r2, [r7, #16]
 8010744:	2134      	movs	r1, #52	; 0x34
 8010746:	fb01 f303 	mul.w	r3, r1, r3
 801074a:	4413      	add	r3, r2
 801074c:	3390      	adds	r3, #144	; 0x90
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	2b07      	cmp	r3, #7
 8010752:	d04b      	beq.n	80107ec <USBH_MSC_RdWrProcess+0xca>
 8010754:	2b07      	cmp	r3, #7
 8010756:	f300 80d2 	bgt.w	80108fe <USBH_MSC_RdWrProcess+0x1dc>
 801075a:	2b05      	cmp	r3, #5
 801075c:	f000 8089 	beq.w	8010872 <USBH_MSC_RdWrProcess+0x150>
 8010760:	2b06      	cmp	r3, #6
 8010762:	f040 80cc 	bne.w	80108fe <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8010766:	78f9      	ldrb	r1, [r7, #3]
 8010768:	2300      	movs	r3, #0
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	2300      	movs	r3, #0
 801076e:	2200      	movs	r2, #0
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f000 ff54 	bl	801161e <USBH_MSC_SCSI_Read>
 8010776:	4603      	mov	r3, r0
 8010778:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 801077a:	7bfb      	ldrb	r3, [r7, #15]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d10b      	bne.n	8010798 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8010780:	78fb      	ldrb	r3, [r7, #3]
 8010782:	693a      	ldr	r2, [r7, #16]
 8010784:	2134      	movs	r1, #52	; 0x34
 8010786:	fb01 f303 	mul.w	r3, r1, r3
 801078a:	4413      	add	r3, r2
 801078c:	3390      	adds	r3, #144	; 0x90
 801078e:	2201      	movs	r2, #1
 8010790:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8010792:	2300      	movs	r3, #0
 8010794:	75fb      	strb	r3, [r7, #23]
 8010796:	e01a      	b.n	80107ce <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 8010798:	7bfb      	ldrb	r3, [r7, #15]
 801079a:	2b02      	cmp	r3, #2
 801079c:	d109      	bne.n	80107b2 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 801079e:	78fb      	ldrb	r3, [r7, #3]
 80107a0:	693a      	ldr	r2, [r7, #16]
 80107a2:	2134      	movs	r1, #52	; 0x34
 80107a4:	fb01 f303 	mul.w	r3, r1, r3
 80107a8:	4413      	add	r3, r2
 80107aa:	3390      	adds	r3, #144	; 0x90
 80107ac:	2205      	movs	r2, #5
 80107ae:	701a      	strb	r2, [r3, #0]
 80107b0:	e00d      	b.n	80107ce <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80107b2:	7bfb      	ldrb	r3, [r7, #15]
 80107b4:	2b04      	cmp	r3, #4
 80107b6:	d10a      	bne.n	80107ce <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80107b8:	78fb      	ldrb	r3, [r7, #3]
 80107ba:	693a      	ldr	r2, [r7, #16]
 80107bc:	2134      	movs	r1, #52	; 0x34
 80107be:	fb01 f303 	mul.w	r3, r1, r3
 80107c2:	4413      	add	r3, r2
 80107c4:	3390      	adds	r3, #144	; 0x90
 80107c6:	2208      	movs	r2, #8
 80107c8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80107ca:	2302      	movs	r3, #2
 80107cc:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2204      	movs	r2, #4
 80107d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80107e2:	2200      	movs	r2, #0
 80107e4:	4619      	mov	r1, r3
 80107e6:	f7fd f8df 	bl	800d9a8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80107ea:	e089      	b.n	8010900 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80107ec:	78f9      	ldrb	r1, [r7, #3]
 80107ee:	2300      	movs	r3, #0
 80107f0:	9300      	str	r3, [sp, #0]
 80107f2:	2300      	movs	r3, #0
 80107f4:	2200      	movs	r2, #0
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f000 fea6 	bl	8011548 <USBH_MSC_SCSI_Write>
 80107fc:	4603      	mov	r3, r0
 80107fe:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8010800:	7bfb      	ldrb	r3, [r7, #15]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d10b      	bne.n	801081e <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8010806:	78fb      	ldrb	r3, [r7, #3]
 8010808:	693a      	ldr	r2, [r7, #16]
 801080a:	2134      	movs	r1, #52	; 0x34
 801080c:	fb01 f303 	mul.w	r3, r1, r3
 8010810:	4413      	add	r3, r2
 8010812:	3390      	adds	r3, #144	; 0x90
 8010814:	2201      	movs	r2, #1
 8010816:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8010818:	2300      	movs	r3, #0
 801081a:	75fb      	strb	r3, [r7, #23]
 801081c:	e01a      	b.n	8010854 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 801081e:	7bfb      	ldrb	r3, [r7, #15]
 8010820:	2b02      	cmp	r3, #2
 8010822:	d109      	bne.n	8010838 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8010824:	78fb      	ldrb	r3, [r7, #3]
 8010826:	693a      	ldr	r2, [r7, #16]
 8010828:	2134      	movs	r1, #52	; 0x34
 801082a:	fb01 f303 	mul.w	r3, r1, r3
 801082e:	4413      	add	r3, r2
 8010830:	3390      	adds	r3, #144	; 0x90
 8010832:	2205      	movs	r2, #5
 8010834:	701a      	strb	r2, [r3, #0]
 8010836:	e00d      	b.n	8010854 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8010838:	7bfb      	ldrb	r3, [r7, #15]
 801083a:	2b04      	cmp	r3, #4
 801083c:	d10a      	bne.n	8010854 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 801083e:	78fb      	ldrb	r3, [r7, #3]
 8010840:	693a      	ldr	r2, [r7, #16]
 8010842:	2134      	movs	r1, #52	; 0x34
 8010844:	fb01 f303 	mul.w	r3, r1, r3
 8010848:	4413      	add	r3, r2
 801084a:	3390      	adds	r3, #144	; 0x90
 801084c:	2208      	movs	r2, #8
 801084e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8010850:	2302      	movs	r3, #2
 8010852:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2204      	movs	r2, #4
 8010858:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010868:	2200      	movs	r2, #0
 801086a:	4619      	mov	r1, r3
 801086c:	f7fd f89c 	bl	800d9a8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010870:	e046      	b.n	8010900 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8010872:	78fb      	ldrb	r3, [r7, #3]
 8010874:	2234      	movs	r2, #52	; 0x34
 8010876:	fb02 f303 	mul.w	r3, r2, r3
 801087a:	3398      	adds	r3, #152	; 0x98
 801087c:	693a      	ldr	r2, [r7, #16]
 801087e:	4413      	add	r3, r2
 8010880:	1d1a      	adds	r2, r3, #4
 8010882:	78fb      	ldrb	r3, [r7, #3]
 8010884:	4619      	mov	r1, r3
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f000 fde5 	bl	8011456 <USBH_MSC_SCSI_RequestSense>
 801088c:	4603      	mov	r3, r0
 801088e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8010890:	7bfb      	ldrb	r3, [r7, #15]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d113      	bne.n	80108be <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8010896:	78fb      	ldrb	r3, [r7, #3]
 8010898:	693a      	ldr	r2, [r7, #16]
 801089a:	2134      	movs	r1, #52	; 0x34
 801089c:	fb01 f303 	mul.w	r3, r1, r3
 80108a0:	4413      	add	r3, r2
 80108a2:	3390      	adds	r3, #144	; 0x90
 80108a4:	2201      	movs	r2, #1
 80108a6:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80108a8:	78fb      	ldrb	r3, [r7, #3]
 80108aa:	693a      	ldr	r2, [r7, #16]
 80108ac:	2134      	movs	r1, #52	; 0x34
 80108ae:	fb01 f303 	mul.w	r3, r1, r3
 80108b2:	4413      	add	r3, r2
 80108b4:	3391      	adds	r3, #145	; 0x91
 80108b6:	2202      	movs	r2, #2
 80108b8:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80108ba:	2302      	movs	r3, #2
 80108bc:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80108be:	7bfb      	ldrb	r3, [r7, #15]
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	d00d      	beq.n	80108e0 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80108c4:	7bfb      	ldrb	r3, [r7, #15]
 80108c6:	2b04      	cmp	r3, #4
 80108c8:	d10a      	bne.n	80108e0 <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80108ca:	78fb      	ldrb	r3, [r7, #3]
 80108cc:	693a      	ldr	r2, [r7, #16]
 80108ce:	2134      	movs	r1, #52	; 0x34
 80108d0:	fb01 f303 	mul.w	r3, r1, r3
 80108d4:	4413      	add	r3, r2
 80108d6:	3390      	adds	r3, #144	; 0x90
 80108d8:	2208      	movs	r2, #8
 80108da:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80108dc:	2302      	movs	r3, #2
 80108de:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2204      	movs	r2, #4
 80108e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80108f4:	2200      	movs	r2, #0
 80108f6:	4619      	mov	r1, r3
 80108f8:	f7fd f856 	bl	800d9a8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80108fc:	e000      	b.n	8010900 <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 80108fe:	bf00      	nop

  }
  return error;
 8010900:	7dfb      	ldrb	r3, [r7, #23]
}
 8010902:	4618      	mov	r0, r3
 8010904:	3718      	adds	r7, #24
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 801090a:	b480      	push	{r7}
 801090c:	b085      	sub	sp, #20
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
 8010912:	460b      	mov	r3, r1
 8010914:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801091c:	69db      	ldr	r3, [r3, #28]
 801091e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	b2db      	uxtb	r3, r3
 8010926:	2b0b      	cmp	r3, #11
 8010928:	d10c      	bne.n	8010944 <USBH_MSC_UnitIsReady+0x3a>
 801092a:	78fb      	ldrb	r3, [r7, #3]
 801092c:	68ba      	ldr	r2, [r7, #8]
 801092e:	2134      	movs	r1, #52	; 0x34
 8010930:	fb01 f303 	mul.w	r3, r1, r3
 8010934:	4413      	add	r3, r2
 8010936:	3391      	adds	r3, #145	; 0x91
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d102      	bne.n	8010944 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 801093e:	2301      	movs	r3, #1
 8010940:	73fb      	strb	r3, [r7, #15]
 8010942:	e001      	b.n	8010948 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8010944:	2300      	movs	r3, #0
 8010946:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8010948:	7bfb      	ldrb	r3, [r7, #15]
}
 801094a:	4618      	mov	r0, r3
 801094c:	3714      	adds	r7, #20
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr

08010956 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8010956:	b580      	push	{r7, lr}
 8010958:	b086      	sub	sp, #24
 801095a:	af00      	add	r7, sp, #0
 801095c:	60f8      	str	r0, [r7, #12]
 801095e:	460b      	mov	r3, r1
 8010960:	607a      	str	r2, [r7, #4]
 8010962:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801096a:	69db      	ldr	r3, [r3, #28]
 801096c:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	b2db      	uxtb	r3, r3
 8010974:	2b0b      	cmp	r3, #11
 8010976:	d10d      	bne.n	8010994 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8010978:	7afb      	ldrb	r3, [r7, #11]
 801097a:	2234      	movs	r2, #52	; 0x34
 801097c:	fb02 f303 	mul.w	r3, r2, r3
 8010980:	3390      	adds	r3, #144	; 0x90
 8010982:	697a      	ldr	r2, [r7, #20]
 8010984:	4413      	add	r3, r2
 8010986:	2234      	movs	r2, #52	; 0x34
 8010988:	4619      	mov	r1, r3
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f003 f8a2 	bl	8013ad4 <memcpy>
    return USBH_OK;
 8010990:	2300      	movs	r3, #0
 8010992:	e000      	b.n	8010996 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8010994:	2302      	movs	r3, #2
  }
}
 8010996:	4618      	mov	r0, r3
 8010998:	3718      	adds	r7, #24
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}

0801099e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 801099e:	b580      	push	{r7, lr}
 80109a0:	b088      	sub	sp, #32
 80109a2:	af02      	add	r7, sp, #8
 80109a4:	60f8      	str	r0, [r7, #12]
 80109a6:	607a      	str	r2, [r7, #4]
 80109a8:	603b      	str	r3, [r7, #0]
 80109aa:	460b      	mov	r3, r1
 80109ac:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80109b4:	69db      	ldr	r3, [r3, #28]
 80109b6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d00e      	beq.n	80109e2 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80109ca:	2b0b      	cmp	r3, #11
 80109cc:	d109      	bne.n	80109e2 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80109ce:	7afb      	ldrb	r3, [r7, #11]
 80109d0:	697a      	ldr	r2, [r7, #20]
 80109d2:	2134      	movs	r1, #52	; 0x34
 80109d4:	fb01 f303 	mul.w	r3, r1, r3
 80109d8:	4413      	add	r3, r2
 80109da:	3390      	adds	r3, #144	; 0x90
 80109dc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d001      	beq.n	80109e6 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80109e2:	2302      	movs	r3, #2
 80109e4:	e040      	b.n	8010a68 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	2206      	movs	r2, #6
 80109ea:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80109ec:	7afb      	ldrb	r3, [r7, #11]
 80109ee:	697a      	ldr	r2, [r7, #20]
 80109f0:	2134      	movs	r1, #52	; 0x34
 80109f2:	fb01 f303 	mul.w	r3, r1, r3
 80109f6:	4413      	add	r3, r2
 80109f8:	3390      	adds	r3, #144	; 0x90
 80109fa:	2206      	movs	r2, #6
 80109fc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80109fe:	7afb      	ldrb	r3, [r7, #11]
 8010a00:	b29a      	uxth	r2, r3
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8010a08:	7af9      	ldrb	r1, [r7, #11]
 8010a0a:	6a3b      	ldr	r3, [r7, #32]
 8010a0c:	9300      	str	r3, [sp, #0]
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	687a      	ldr	r2, [r7, #4]
 8010a12:	68f8      	ldr	r0, [r7, #12]
 8010a14:	f000 fe03 	bl	801161e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010a1e:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8010a20:	e016      	b.n	8010a50 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	1ad2      	subs	r2, r2, r3
 8010a2c:	6a3b      	ldr	r3, [r7, #32]
 8010a2e:	f242 7110 	movw	r1, #10000	; 0x2710
 8010a32:	fb01 f303 	mul.w	r3, r1, r3
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d805      	bhi.n	8010a46 <USBH_MSC_Read+0xa8>
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8010a40:	b2db      	uxtb	r3, r3
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d104      	bne.n	8010a50 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	2201      	movs	r2, #1
 8010a4a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8010a4c:	2302      	movs	r3, #2
 8010a4e:	e00b      	b.n	8010a68 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8010a50:	7afb      	ldrb	r3, [r7, #11]
 8010a52:	4619      	mov	r1, r3
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f7ff fe64 	bl	8010722 <USBH_MSC_RdWrProcess>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b01      	cmp	r3, #1
 8010a5e:	d0e0      	beq.n	8010a22 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	2201      	movs	r2, #1
 8010a64:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8010a66:	2300      	movs	r3, #0
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	3718      	adds	r7, #24
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}

08010a70 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b088      	sub	sp, #32
 8010a74:	af02      	add	r7, sp, #8
 8010a76:	60f8      	str	r0, [r7, #12]
 8010a78:	607a      	str	r2, [r7, #4]
 8010a7a:	603b      	str	r3, [r7, #0]
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a86:	69db      	ldr	r3, [r3, #28]
 8010a88:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d00e      	beq.n	8010ab4 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8010a9c:	2b0b      	cmp	r3, #11
 8010a9e:	d109      	bne.n	8010ab4 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8010aa0:	7afb      	ldrb	r3, [r7, #11]
 8010aa2:	697a      	ldr	r2, [r7, #20]
 8010aa4:	2134      	movs	r1, #52	; 0x34
 8010aa6:	fb01 f303 	mul.w	r3, r1, r3
 8010aaa:	4413      	add	r3, r2
 8010aac:	3390      	adds	r3, #144	; 0x90
 8010aae:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d001      	beq.n	8010ab8 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8010ab4:	2302      	movs	r3, #2
 8010ab6:	e040      	b.n	8010b3a <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	2207      	movs	r2, #7
 8010abc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8010abe:	7afb      	ldrb	r3, [r7, #11]
 8010ac0:	697a      	ldr	r2, [r7, #20]
 8010ac2:	2134      	movs	r1, #52	; 0x34
 8010ac4:	fb01 f303 	mul.w	r3, r1, r3
 8010ac8:	4413      	add	r3, r2
 8010aca:	3390      	adds	r3, #144	; 0x90
 8010acc:	2207      	movs	r2, #7
 8010ace:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8010ad0:	7afb      	ldrb	r3, [r7, #11]
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8010ada:	7af9      	ldrb	r1, [r7, #11]
 8010adc:	6a3b      	ldr	r3, [r7, #32]
 8010ade:	9300      	str	r3, [sp, #0]
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	687a      	ldr	r2, [r7, #4]
 8010ae4:	68f8      	ldr	r0, [r7, #12]
 8010ae6:	f000 fd2f 	bl	8011548 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010af0:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8010af2:	e016      	b.n	8010b22 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	1ad2      	subs	r2, r2, r3
 8010afe:	6a3b      	ldr	r3, [r7, #32]
 8010b00:	f242 7110 	movw	r1, #10000	; 0x2710
 8010b04:	fb01 f303 	mul.w	r3, r1, r3
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d805      	bhi.n	8010b18 <USBH_MSC_Write+0xa8>
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d104      	bne.n	8010b22 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8010b1e:	2302      	movs	r3, #2
 8010b20:	e00b      	b.n	8010b3a <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8010b22:	7afb      	ldrb	r3, [r7, #11]
 8010b24:	4619      	mov	r1, r3
 8010b26:	68f8      	ldr	r0, [r7, #12]
 8010b28:	f7ff fdfb 	bl	8010722 <USBH_MSC_RdWrProcess>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	2b01      	cmp	r3, #1
 8010b30:	d0e0      	beq.n	8010af4 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	2201      	movs	r2, #1
 8010b36:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8010b38:	2300      	movs	r3, #0
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3718      	adds	r7, #24
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b082      	sub	sp, #8
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2221      	movs	r2, #33	; 0x21
 8010b4e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	22ff      	movs	r2, #255	; 0xff
 8010b54:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2200      	movs	r2, #0
 8010b66:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8010b68:	2200      	movs	r2, #0
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f002 fba3 	bl	80132b8 <USBH_CtlReq>
 8010b72:	4603      	mov	r3, r0
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	22a1      	movs	r2, #161	; 0xa1
 8010b8a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	22fe      	movs	r2, #254	; 0xfe
 8010b90:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2200      	movs	r2, #0
 8010b96:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2201      	movs	r2, #1
 8010ba2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	6839      	ldr	r1, [r7, #0]
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f002 fb85 	bl	80132b8 <USBH_CtlReq>
 8010bae:	4603      	mov	r3, r0
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b085      	sub	sp, #20
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010bc6:	69db      	ldr	r3, [r3, #28]
 8010bc8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	4a09      	ldr	r2, [pc, #36]	; (8010bf4 <USBH_MSC_BOT_Init+0x3c>)
 8010bce:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	4a09      	ldr	r2, [pc, #36]	; (8010bf8 <USBH_MSC_BOT_Init+0x40>)
 8010bd4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2201      	movs	r2, #1
 8010bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2201      	movs	r2, #1
 8010be2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8010be6:	2300      	movs	r3, #0
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3714      	adds	r7, #20
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr
 8010bf4:	43425355 	.word	0x43425355
 8010bf8:	20304050 	.word	0x20304050

08010bfc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b088      	sub	sp, #32
 8010c00:	af02      	add	r7, sp, #8
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	460b      	mov	r3, r1
 8010c06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8010c10:	2301      	movs	r3, #1
 8010c12:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010c14:	2300      	movs	r3, #0
 8010c16:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010c1e:	69db      	ldr	r3, [r3, #28]
 8010c20:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8010c22:	2300      	movs	r3, #0
 8010c24:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8010c26:	693b      	ldr	r3, [r7, #16]
 8010c28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	2b0a      	cmp	r3, #10
 8010c30:	f200 822a 	bhi.w	8011088 <USBH_MSC_BOT_Process+0x48c>
 8010c34:	a201      	add	r2, pc, #4	; (adr r2, 8010c3c <USBH_MSC_BOT_Process+0x40>)
 8010c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c3a:	bf00      	nop
 8010c3c:	08010c69 	.word	0x08010c69
 8010c40:	08010c91 	.word	0x08010c91
 8010c44:	08010d4f 	.word	0x08010d4f
 8010c48:	08010d6d 	.word	0x08010d6d
 8010c4c:	08010e29 	.word	0x08010e29
 8010c50:	08010e4b 	.word	0x08010e4b
 8010c54:	08010f37 	.word	0x08010f37
 8010c58:	08010f53 	.word	0x08010f53
 8010c5c:	08010fdd 	.word	0x08010fdd
 8010c60:	0801100d 	.word	0x0801100d
 8010c64:	0801106f 	.word	0x0801106f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	78fa      	ldrb	r2, [r7, #3]
 8010c6c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	2202      	movs	r2, #2
 8010c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	795b      	ldrb	r3, [r3, #5]
 8010c82:	2201      	movs	r2, #1
 8010c84:	9200      	str	r2, [sp, #0]
 8010c86:	221f      	movs	r2, #31
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f002 fe14 	bl	80138b6 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8010c8e:	e20a      	b.n	80110a6 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	795b      	ldrb	r3, [r3, #5]
 8010c94:	4619      	mov	r1, r3
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f000 ff80 	bl	8011b9c <USBH_LL_GetURBState>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8010ca0:	7d3b      	ldrb	r3, [r7, #20]
 8010ca2:	2b01      	cmp	r3, #1
 8010ca4:	d126      	bne.n	8010cf4 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d00f      	beq.n	8010cce <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8010cb4:	b25b      	sxtb	r3, r3
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	da04      	bge.n	8010cc4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	2203      	movs	r2, #3
 8010cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8010cc2:	e008      	b.n	8010cd6 <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	2205      	movs	r2, #5
 8010cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8010ccc:	e003      	b.n	8010cd6 <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	2207      	movs	r2, #7
 8010cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2202      	movs	r2, #2
 8010cda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010cea:	2200      	movs	r2, #0
 8010cec:	4619      	mov	r1, r3
 8010cee:	f7fc fe5b 	bl	800d9a8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010cf2:	e1cb      	b.n	801108c <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010cf4:	7d3b      	ldrb	r3, [r7, #20]
 8010cf6:	2b02      	cmp	r3, #2
 8010cf8:	d112      	bne.n	8010d20 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	2201      	movs	r2, #1
 8010cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2202      	movs	r2, #2
 8010d06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010d16:	2200      	movs	r2, #0
 8010d18:	4619      	mov	r1, r3
 8010d1a:	f7fc fe45 	bl	800d9a8 <osMessagePut>
      break;
 8010d1e:	e1b5      	b.n	801108c <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 8010d20:	7d3b      	ldrb	r3, [r7, #20]
 8010d22:	2b05      	cmp	r3, #5
 8010d24:	f040 81b2 	bne.w	801108c <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	220a      	movs	r2, #10
 8010d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2202      	movs	r2, #2
 8010d34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010d44:	2200      	movs	r2, #0
 8010d46:	4619      	mov	r1, r3
 8010d48:	f7fc fe2e 	bl	800d9a8 <osMessagePut>
      break;
 8010d4c:	e19e      	b.n	801108c <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	895a      	ldrh	r2, [r3, #10]
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	791b      	ldrb	r3, [r3, #4]
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f002 fdcf 	bl	8013900 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	2204      	movs	r2, #4
 8010d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8010d6a:	e19c      	b.n	80110a6 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	791b      	ldrb	r3, [r3, #4]
 8010d70:	4619      	mov	r1, r3
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f000 ff12 	bl	8011b9c <USBH_LL_GetURBState>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8010d7c:	7d3b      	ldrb	r3, [r7, #20]
 8010d7e:	2b01      	cmp	r3, #1
 8010d80:	d13b      	bne.n	8010dfa <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d86:	693a      	ldr	r2, [r7, #16]
 8010d88:	8952      	ldrh	r2, [r2, #10]
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	d910      	bls.n	8010db0 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d94:	693a      	ldr	r2, [r7, #16]
 8010d96:	8952      	ldrh	r2, [r2, #10]
 8010d98:	441a      	add	r2, r3
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8010da0:	693b      	ldr	r3, [r7, #16]
 8010da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010da4:	693a      	ldr	r2, [r7, #16]
 8010da6:	8952      	ldrh	r2, [r2, #10]
 8010da8:	1a9a      	subs	r2, r3, r2
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	65da      	str	r2, [r3, #92]	; 0x5c
 8010dae:	e002      	b.n	8010db6 <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	2200      	movs	r2, #0
 8010db4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d00a      	beq.n	8010dd4 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	895a      	ldrh	r2, [r3, #10]
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	791b      	ldrb	r3, [r3, #4]
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f002 fd97 	bl	8013900 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8010dd2:	e15d      	b.n	8011090 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	2207      	movs	r2, #7
 8010dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2202      	movs	r2, #2
 8010de0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010df0:	2200      	movs	r2, #0
 8010df2:	4619      	mov	r1, r3
 8010df4:	f7fc fdd8 	bl	800d9a8 <osMessagePut>
      break;
 8010df8:	e14a      	b.n	8011090 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 8010dfa:	7d3b      	ldrb	r3, [r7, #20]
 8010dfc:	2b05      	cmp	r3, #5
 8010dfe:	f040 8147 	bne.w	8011090 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	2209      	movs	r2, #9
 8010e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2202      	movs	r2, #2
 8010e0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010e1e:	2200      	movs	r2, #0
 8010e20:	4619      	mov	r1, r3
 8010e22:	f7fc fdc1 	bl	800d9a8 <osMessagePut>
      break;
 8010e26:	e133      	b.n	8011090 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	891a      	ldrh	r2, [r3, #8]
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	795b      	ldrb	r3, [r3, #5]
 8010e36:	2001      	movs	r0, #1
 8010e38:	9000      	str	r0, [sp, #0]
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f002 fd3b 	bl	80138b6 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	2206      	movs	r2, #6
 8010e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8010e48:	e12d      	b.n	80110a6 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8010e4a:	693b      	ldr	r3, [r7, #16]
 8010e4c:	795b      	ldrb	r3, [r3, #5]
 8010e4e:	4619      	mov	r1, r3
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f000 fea3 	bl	8011b9c <USBH_LL_GetURBState>
 8010e56:	4603      	mov	r3, r0
 8010e58:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8010e5a:	7d3b      	ldrb	r3, [r7, #20]
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	d13d      	bne.n	8010edc <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e64:	693a      	ldr	r2, [r7, #16]
 8010e66:	8912      	ldrh	r2, [r2, #8]
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d910      	bls.n	8010e8e <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e72:	693a      	ldr	r2, [r7, #16]
 8010e74:	8912      	ldrh	r2, [r2, #8]
 8010e76:	441a      	add	r2, r3
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e82:	693a      	ldr	r2, [r7, #16]
 8010e84:	8912      	ldrh	r2, [r2, #8]
 8010e86:	1a9a      	subs	r2, r3, r2
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8010e8c:	e002      	b.n	8010e94 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	2200      	movs	r2, #0
 8010e92:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8010e94:	693b      	ldr	r3, [r7, #16]
 8010e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d00c      	beq.n	8010eb6 <USBH_MSC_BOT_Process+0x2ba>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	891a      	ldrh	r2, [r3, #8]
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	795b      	ldrb	r3, [r3, #5]
 8010eaa:	2001      	movs	r0, #1
 8010eac:	9000      	str	r0, [sp, #0]
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f002 fd01 	bl	80138b6 <USBH_BulkSendData>
 8010eb4:	e003      	b.n	8010ebe <USBH_MSC_BOT_Process+0x2c2>
                                  MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	2207      	movs	r2, #7
 8010eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2202      	movs	r2, #2
 8010ec2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	f7fc fd67 	bl	800d9a8 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 8010eda:	e0db      	b.n	8011094 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010edc:	7d3b      	ldrb	r3, [r7, #20]
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	d112      	bne.n	8010f08 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	2205      	movs	r2, #5
 8010ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2202      	movs	r2, #2
 8010eee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010efe:	2200      	movs	r2, #0
 8010f00:	4619      	mov	r1, r3
 8010f02:	f7fc fd51 	bl	800d9a8 <osMessagePut>
      break;
 8010f06:	e0c5      	b.n	8011094 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 8010f08:	7d3b      	ldrb	r3, [r7, #20]
 8010f0a:	2b05      	cmp	r3, #5
 8010f0c:	f040 80c2 	bne.w	8011094 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	220a      	movs	r2, #10
 8010f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2202      	movs	r2, #2
 8010f1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	4619      	mov	r1, r3
 8010f30:	f7fc fd3a 	bl	800d9a8 <osMessagePut>
      break;
 8010f34:	e0ae      	b.n	8011094 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	791b      	ldrb	r3, [r3, #4]
 8010f40:	220d      	movs	r2, #13
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f002 fcdc 	bl	8013900 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	2208      	movs	r2, #8
 8010f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8010f50:	e0a9      	b.n	80110a6 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	791b      	ldrb	r3, [r3, #4]
 8010f56:	4619      	mov	r1, r3
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f000 fe1f 	bl	8011b9c <USBH_LL_GetURBState>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8010f62:	7d3b      	ldrb	r3, [r7, #20]
 8010f64:	2b01      	cmp	r3, #1
 8010f66:	d123      	bne.n	8010fb0 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010f68:	693b      	ldr	r3, [r7, #16]
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	2201      	movs	r2, #1
 8010f74:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 f8c5 	bl	8011108 <USBH_MSC_DecodeCSW>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8010f82:	7d7b      	ldrb	r3, [r7, #21]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d102      	bne.n	8010f8e <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	75fb      	strb	r3, [r7, #23]
 8010f8c:	e001      	b.n	8010f92 <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 8010f8e:	2302      	movs	r3, #2
 8010f90:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2202      	movs	r2, #2
 8010f96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	4619      	mov	r1, r3
 8010faa:	f7fc fcfd 	bl	800d9a8 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 8010fae:	e073      	b.n	8011098 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 8010fb0:	7d3b      	ldrb	r3, [r7, #20]
 8010fb2:	2b05      	cmp	r3, #5
 8010fb4:	d170      	bne.n	8011098 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	2209      	movs	r2, #9
 8010fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2202      	movs	r2, #2
 8010fc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	f7fc fce7 	bl	800d9a8 <osMessagePut>
      break;
 8010fda:	e05d      	b.n	8011098 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8010fdc:	78fb      	ldrb	r3, [r7, #3]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f000 f864 	bl	80110b0 <USBH_MSC_BOT_Abort>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8010fec:	7dbb      	ldrb	r3, [r7, #22]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d104      	bne.n	8010ffc <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	2207      	movs	r2, #7
 8010ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8010ffa:	e04f      	b.n	801109c <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 8010ffc:	7dbb      	ldrb	r3, [r7, #22]
 8010ffe:	2b04      	cmp	r3, #4
 8011000:	d14c      	bne.n	801109c <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	220b      	movs	r2, #11
 8011006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801100a:	e047      	b.n	801109c <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 801100c:	78fb      	ldrb	r3, [r7, #3]
 801100e:	2201      	movs	r2, #1
 8011010:	4619      	mov	r1, r3
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 f84c 	bl	80110b0 <USBH_MSC_BOT_Abort>
 8011018:	4603      	mov	r3, r0
 801101a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 801101c:	7dbb      	ldrb	r3, [r7, #22]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d11d      	bne.n	801105e <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	795b      	ldrb	r3, [r3, #5]
 8011026:	4619      	mov	r1, r3
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f000 fe11 	bl	8011c50 <USBH_LL_GetToggle>
 801102e:	4603      	mov	r3, r0
 8011030:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	7959      	ldrb	r1, [r3, #5]
 8011036:	7bfb      	ldrb	r3, [r7, #15]
 8011038:	f1c3 0301 	rsb	r3, r3, #1
 801103c:	b2db      	uxtb	r3, r3
 801103e:	461a      	mov	r2, r3
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 fdd5 	bl	8011bf0 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	791b      	ldrb	r3, [r3, #4]
 801104a:	2200      	movs	r2, #0
 801104c:	4619      	mov	r1, r3
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 fdce 	bl	8011bf0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	2209      	movs	r2, #9
 8011058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 801105c:	e020      	b.n	80110a0 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 801105e:	7dbb      	ldrb	r3, [r7, #22]
 8011060:	2b04      	cmp	r3, #4
 8011062:	d11d      	bne.n	80110a0 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	220b      	movs	r2, #11
 8011068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801106c:	e018      	b.n	80110a0 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f7ff fd67 	bl	8010b42 <USBH_MSC_BOT_REQ_Reset>
 8011074:	4603      	mov	r3, r0
 8011076:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8011078:	7dfb      	ldrb	r3, [r7, #23]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d112      	bne.n	80110a4 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	2201      	movs	r2, #1
 8011082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8011086:	e00d      	b.n	80110a4 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 8011088:	bf00      	nop
 801108a:	e00c      	b.n	80110a6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 801108c:	bf00      	nop
 801108e:	e00a      	b.n	80110a6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8011090:	bf00      	nop
 8011092:	e008      	b.n	80110a6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8011094:	bf00      	nop
 8011096:	e006      	b.n	80110a6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8011098:	bf00      	nop
 801109a:	e004      	b.n	80110a6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 801109c:	bf00      	nop
 801109e:	e002      	b.n	80110a6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 80110a0:	bf00      	nop
 80110a2:	e000      	b.n	80110a6 <USBH_MSC_BOT_Process+0x4aa>
      break;
 80110a4:	bf00      	nop
  }
  return status;
 80110a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3718      	adds	r7, #24
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	460b      	mov	r3, r1
 80110ba:	70fb      	strb	r3, [r7, #3]
 80110bc:	4613      	mov	r3, r2
 80110be:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80110c0:	2302      	movs	r3, #2
 80110c2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80110ca:	69db      	ldr	r3, [r3, #28]
 80110cc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80110ce:	78bb      	ldrb	r3, [r7, #2]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d002      	beq.n	80110da <USBH_MSC_BOT_Abort+0x2a>
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d009      	beq.n	80110ec <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80110d8:	e011      	b.n	80110fe <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	79db      	ldrb	r3, [r3, #7]
 80110de:	4619      	mov	r1, r3
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f001 fe1c 	bl	8012d1e <USBH_ClrFeature>
 80110e6:	4603      	mov	r3, r0
 80110e8:	73fb      	strb	r3, [r7, #15]
      break;
 80110ea:	e008      	b.n	80110fe <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	799b      	ldrb	r3, [r3, #6]
 80110f0:	4619      	mov	r1, r3
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f001 fe13 	bl	8012d1e <USBH_ClrFeature>
 80110f8:	4603      	mov	r3, r0
 80110fa:	73fb      	strb	r3, [r7, #15]
      break;
 80110fc:	bf00      	nop
  }
  return status;
 80110fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011100:	4618      	mov	r0, r3
 8011102:	3710      	adds	r7, #16
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011116:	69db      	ldr	r3, [r3, #28]
 8011118:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 801111a:	2301      	movs	r3, #1
 801111c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	791b      	ldrb	r3, [r3, #4]
 8011122:	4619      	mov	r1, r3
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f000 fca7 	bl	8011a78 <USBH_LL_GetLastXferSize>
 801112a:	4603      	mov	r3, r0
 801112c:	2b0d      	cmp	r3, #13
 801112e:	d002      	beq.n	8011136 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8011130:	2302      	movs	r3, #2
 8011132:	73fb      	strb	r3, [r7, #15]
 8011134:	e024      	b.n	8011180 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801113a:	4a14      	ldr	r2, [pc, #80]	; (801118c <USBH_MSC_DecodeCSW+0x84>)
 801113c:	4293      	cmp	r3, r2
 801113e:	d11d      	bne.n	801117c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011148:	429a      	cmp	r2, r3
 801114a:	d119      	bne.n	8011180 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011152:	2b00      	cmp	r3, #0
 8011154:	d102      	bne.n	801115c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8011156:	2300      	movs	r3, #0
 8011158:	73fb      	strb	r3, [r7, #15]
 801115a:	e011      	b.n	8011180 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011162:	2b01      	cmp	r3, #1
 8011164:	d102      	bne.n	801116c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8011166:	2301      	movs	r3, #1
 8011168:	73fb      	strb	r3, [r7, #15]
 801116a:	e009      	b.n	8011180 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011172:	2b02      	cmp	r3, #2
 8011174:	d104      	bne.n	8011180 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8011176:	2302      	movs	r3, #2
 8011178:	73fb      	strb	r3, [r7, #15]
 801117a:	e001      	b.n	8011180 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 801117c:	2302      	movs	r3, #2
 801117e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8011180:	7bfb      	ldrb	r3, [r7, #15]
}
 8011182:	4618      	mov	r0, r3
 8011184:	3710      	adds	r7, #16
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	53425355 	.word	0x53425355

08011190 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b084      	sub	sp, #16
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	460b      	mov	r3, r1
 801119a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 801119c:	2302      	movs	r3, #2
 801119e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80111a6:	69db      	ldr	r3, [r3, #28]
 80111a8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d002      	beq.n	80111ba <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80111b4:	2b02      	cmp	r3, #2
 80111b6:	d021      	beq.n	80111fc <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80111b8:	e028      	b.n	801120c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	2200      	movs	r2, #0
 80111be:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	2200      	movs	r2, #0
 80111c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	220a      	movs	r2, #10
 80111cc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	3363      	adds	r3, #99	; 0x63
 80111d4:	2210      	movs	r2, #16
 80111d6:	2100      	movs	r1, #0
 80111d8:	4618      	mov	r0, r3
 80111da:	f002 fc89 	bl	8013af0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	2200      	movs	r2, #0
 80111e2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	2201      	movs	r2, #1
 80111ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	2202      	movs	r2, #2
 80111f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80111f6:	2301      	movs	r3, #1
 80111f8:	73fb      	strb	r3, [r7, #15]
      break;
 80111fa:	e007      	b.n	801120c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80111fc:	78fb      	ldrb	r3, [r7, #3]
 80111fe:	4619      	mov	r1, r3
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f7ff fcfb 	bl	8010bfc <USBH_MSC_BOT_Process>
 8011206:	4603      	mov	r3, r0
 8011208:	73fb      	strb	r3, [r7, #15]
      break;
 801120a:	bf00      	nop
  }

  return error;
 801120c:	7bfb      	ldrb	r3, [r7, #15]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3710      	adds	r7, #16
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8011216:	b580      	push	{r7, lr}
 8011218:	b086      	sub	sp, #24
 801121a:	af00      	add	r7, sp, #0
 801121c:	60f8      	str	r0, [r7, #12]
 801121e:	460b      	mov	r3, r1
 8011220:	607a      	str	r2, [r7, #4]
 8011222:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8011224:	2301      	movs	r3, #1
 8011226:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801122e:	69db      	ldr	r3, [r3, #28]
 8011230:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8011238:	2b01      	cmp	r3, #1
 801123a:	d002      	beq.n	8011242 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 801123c:	2b02      	cmp	r3, #2
 801123e:	d027      	beq.n	8011290 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8011240:	e05f      	b.n	8011302 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	2208      	movs	r2, #8
 8011246:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	2280      	movs	r2, #128	; 0x80
 801124c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	220a      	movs	r2, #10
 8011254:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	3363      	adds	r3, #99	; 0x63
 801125c:	2210      	movs	r2, #16
 801125e:	2100      	movs	r1, #0
 8011260:	4618      	mov	r0, r3
 8011262:	f002 fc45 	bl	8013af0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8011266:	693b      	ldr	r3, [r7, #16]
 8011268:	2225      	movs	r2, #37	; 0x25
 801126a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	2201      	movs	r2, #1
 8011272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8011276:	693b      	ldr	r3, [r7, #16]
 8011278:	2202      	movs	r2, #2
 801127a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	f103 0210 	add.w	r2, r3, #16
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 801128a:	2301      	movs	r3, #1
 801128c:	75fb      	strb	r3, [r7, #23]
      break;
 801128e:	e038      	b.n	8011302 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8011290:	7afb      	ldrb	r3, [r7, #11]
 8011292:	4619      	mov	r1, r3
 8011294:	68f8      	ldr	r0, [r7, #12]
 8011296:	f7ff fcb1 	bl	8010bfc <USBH_MSC_BOT_Process>
 801129a:	4603      	mov	r3, r0
 801129c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 801129e:	7dfb      	ldrb	r3, [r7, #23]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d12d      	bne.n	8011300 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112aa:	3303      	adds	r3, #3
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	461a      	mov	r2, r3
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112b6:	3302      	adds	r3, #2
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	021b      	lsls	r3, r3, #8
 80112bc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112c4:	3301      	adds	r3, #1
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80112ca:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80112cc:	693b      	ldr	r3, [r7, #16]
 80112ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	061b      	lsls	r3, r3, #24
 80112d6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112e2:	3307      	adds	r3, #7
 80112e4:	781b      	ldrb	r3, [r3, #0]
 80112e6:	b29a      	uxth	r2, r3
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112ee:	3306      	adds	r3, #6
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	b29b      	uxth	r3, r3
 80112f4:	021b      	lsls	r3, r3, #8
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	4313      	orrs	r3, r2
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	809a      	strh	r2, [r3, #4]
      break;
 8011300:	bf00      	nop
  }

  return error;
 8011302:	7dfb      	ldrb	r3, [r7, #23]
}
 8011304:	4618      	mov	r0, r3
 8011306:	3718      	adds	r7, #24
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}

0801130c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b086      	sub	sp, #24
 8011310:	af00      	add	r7, sp, #0
 8011312:	60f8      	str	r0, [r7, #12]
 8011314:	460b      	mov	r3, r1
 8011316:	607a      	str	r2, [r7, #4]
 8011318:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 801131a:	2302      	movs	r3, #2
 801131c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011324:	69db      	ldr	r3, [r3, #28]
 8011326:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801132e:	2b01      	cmp	r3, #1
 8011330:	d002      	beq.n	8011338 <USBH_MSC_SCSI_Inquiry+0x2c>
 8011332:	2b02      	cmp	r3, #2
 8011334:	d03d      	beq.n	80113b2 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8011336:	e089      	b.n	801144c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	2224      	movs	r2, #36	; 0x24
 801133c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	2280      	movs	r2, #128	; 0x80
 8011342:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	220a      	movs	r2, #10
 801134a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	3363      	adds	r3, #99	; 0x63
 8011352:	220a      	movs	r2, #10
 8011354:	2100      	movs	r1, #0
 8011356:	4618      	mov	r0, r3
 8011358:	f002 fbca 	bl	8013af0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	2212      	movs	r2, #18
 8011360:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8011364:	7afb      	ldrb	r3, [r7, #11]
 8011366:	015b      	lsls	r3, r3, #5
 8011368:	b2da      	uxtb	r2, r3
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	2200      	movs	r2, #0
 8011374:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	2200      	movs	r2, #0
 801137c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	2224      	movs	r2, #36	; 0x24
 8011384:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	2200      	movs	r2, #0
 801138c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	2201      	movs	r2, #1
 8011394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	2202      	movs	r2, #2
 801139c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	f103 0210 	add.w	r2, r3, #16
 80113a6:	693b      	ldr	r3, [r7, #16]
 80113a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80113ac:	2301      	movs	r3, #1
 80113ae:	75fb      	strb	r3, [r7, #23]
      break;
 80113b0:	e04c      	b.n	801144c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80113b2:	7afb      	ldrb	r3, [r7, #11]
 80113b4:	4619      	mov	r1, r3
 80113b6:	68f8      	ldr	r0, [r7, #12]
 80113b8:	f7ff fc20 	bl	8010bfc <USBH_MSC_BOT_Process>
 80113bc:	4603      	mov	r3, r0
 80113be:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80113c0:	7dfb      	ldrb	r3, [r7, #23]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d141      	bne.n	801144a <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80113c6:	2222      	movs	r2, #34	; 0x22
 80113c8:	2100      	movs	r1, #0
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f002 fb90 	bl	8013af0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	f003 031f 	and.w	r3, r3, #31
 80113dc:	b2da      	uxtb	r2, r3
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	095b      	lsrs	r3, r3, #5
 80113ec:	b2da      	uxtb	r2, r3
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113f8:	3301      	adds	r3, #1
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	b25b      	sxtb	r3, r3
 80113fe:	2b00      	cmp	r3, #0
 8011400:	da03      	bge.n	801140a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2201      	movs	r2, #1
 8011406:	709a      	strb	r2, [r3, #2]
 8011408:	e002      	b.n	8011410 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2200      	movs	r2, #0
 801140e:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	1cd8      	adds	r0, r3, #3
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801141a:	3308      	adds	r3, #8
 801141c:	2208      	movs	r2, #8
 801141e:	4619      	mov	r1, r3
 8011420:	f002 fb58 	bl	8013ad4 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f103 000c 	add.w	r0, r3, #12
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011430:	3310      	adds	r3, #16
 8011432:	2210      	movs	r2, #16
 8011434:	4619      	mov	r1, r3
 8011436:	f002 fb4d 	bl	8013ad4 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	331d      	adds	r3, #29
 801143e:	693a      	ldr	r2, [r7, #16]
 8011440:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8011444:	3220      	adds	r2, #32
 8011446:	6812      	ldr	r2, [r2, #0]
 8011448:	601a      	str	r2, [r3, #0]
      break;
 801144a:	bf00      	nop
  }

  return error;
 801144c:	7dfb      	ldrb	r3, [r7, #23]
}
 801144e:	4618      	mov	r0, r3
 8011450:	3718      	adds	r7, #24
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}

08011456 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8011456:	b580      	push	{r7, lr}
 8011458:	b086      	sub	sp, #24
 801145a:	af00      	add	r7, sp, #0
 801145c:	60f8      	str	r0, [r7, #12]
 801145e:	460b      	mov	r3, r1
 8011460:	607a      	str	r2, [r7, #4]
 8011462:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8011464:	2302      	movs	r3, #2
 8011466:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801146e:	69db      	ldr	r3, [r3, #28]
 8011470:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8011478:	2b01      	cmp	r3, #1
 801147a:	d002      	beq.n	8011482 <USBH_MSC_SCSI_RequestSense+0x2c>
 801147c:	2b02      	cmp	r3, #2
 801147e:	d03d      	beq.n	80114fc <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8011480:	e05d      	b.n	801153e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8011482:	693b      	ldr	r3, [r7, #16]
 8011484:	220e      	movs	r2, #14
 8011486:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	2280      	movs	r2, #128	; 0x80
 801148c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	220a      	movs	r2, #10
 8011494:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8011498:	693b      	ldr	r3, [r7, #16]
 801149a:	3363      	adds	r3, #99	; 0x63
 801149c:	2210      	movs	r2, #16
 801149e:	2100      	movs	r1, #0
 80114a0:	4618      	mov	r0, r3
 80114a2:	f002 fb25 	bl	8013af0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	2203      	movs	r2, #3
 80114aa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80114ae:	7afb      	ldrb	r3, [r7, #11]
 80114b0:	015b      	lsls	r3, r3, #5
 80114b2:	b2da      	uxtb	r2, r3
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	2200      	movs	r2, #0
 80114be:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	2200      	movs	r2, #0
 80114c6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	220e      	movs	r2, #14
 80114ce:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	2200      	movs	r2, #0
 80114d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	2201      	movs	r2, #1
 80114de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	2202      	movs	r2, #2
 80114e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	f103 0210 	add.w	r2, r3, #16
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80114f6:	2301      	movs	r3, #1
 80114f8:	75fb      	strb	r3, [r7, #23]
      break;
 80114fa:	e020      	b.n	801153e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80114fc:	7afb      	ldrb	r3, [r7, #11]
 80114fe:	4619      	mov	r1, r3
 8011500:	68f8      	ldr	r0, [r7, #12]
 8011502:	f7ff fb7b 	bl	8010bfc <USBH_MSC_BOT_Process>
 8011506:	4603      	mov	r3, r0
 8011508:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 801150a:	7dfb      	ldrb	r3, [r7, #23]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d115      	bne.n	801153c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011516:	3302      	adds	r3, #2
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	f003 030f 	and.w	r3, r3, #15
 801151e:	b2da      	uxtb	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801152a:	7b1a      	ldrb	r2, [r3, #12]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011536:	7b5a      	ldrb	r2, [r3, #13]
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	709a      	strb	r2, [r3, #2]
      break;
 801153c:	bf00      	nop
  }

  return error;
 801153e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011540:	4618      	mov	r0, r3
 8011542:	3718      	adds	r7, #24
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}

08011548 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b086      	sub	sp, #24
 801154c:	af00      	add	r7, sp, #0
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	607a      	str	r2, [r7, #4]
 8011552:	603b      	str	r3, [r7, #0]
 8011554:	460b      	mov	r3, r1
 8011556:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8011558:	2302      	movs	r3, #2
 801155a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011562:	69db      	ldr	r3, [r3, #28]
 8011564:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801156c:	2b01      	cmp	r3, #1
 801156e:	d002      	beq.n	8011576 <USBH_MSC_SCSI_Write+0x2e>
 8011570:	2b02      	cmp	r3, #2
 8011572:	d047      	beq.n	8011604 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8011574:	e04e      	b.n	8011614 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 801157c:	461a      	mov	r2, r3
 801157e:	6a3b      	ldr	r3, [r7, #32]
 8011580:	fb03 f202 	mul.w	r2, r3, r2
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	2200      	movs	r2, #0
 801158c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	220a      	movs	r2, #10
 8011594:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	3363      	adds	r3, #99	; 0x63
 801159c:	2210      	movs	r2, #16
 801159e:	2100      	movs	r1, #0
 80115a0:	4618      	mov	r0, r3
 80115a2:	f002 faa5 	bl	8013af0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	222a      	movs	r2, #42	; 0x2a
 80115aa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80115ae:	79fa      	ldrb	r2, [r7, #7]
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80115b6:	79ba      	ldrb	r2, [r7, #6]
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80115be:	797a      	ldrb	r2, [r7, #5]
 80115c0:	693b      	ldr	r3, [r7, #16]
 80115c2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80115c6:	1d3b      	adds	r3, r7, #4
 80115c8:	781a      	ldrb	r2, [r3, #0]
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80115d0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80115da:	f107 0320 	add.w	r3, r7, #32
 80115de:	781a      	ldrb	r2, [r3, #0]
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	2201      	movs	r2, #1
 80115ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80115ee:	693b      	ldr	r3, [r7, #16]
 80115f0:	2202      	movs	r2, #2
 80115f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	683a      	ldr	r2, [r7, #0]
 80115fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80115fe:	2301      	movs	r3, #1
 8011600:	75fb      	strb	r3, [r7, #23]
      break;
 8011602:	e007      	b.n	8011614 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8011604:	7afb      	ldrb	r3, [r7, #11]
 8011606:	4619      	mov	r1, r3
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	f7ff faf7 	bl	8010bfc <USBH_MSC_BOT_Process>
 801160e:	4603      	mov	r3, r0
 8011610:	75fb      	strb	r3, [r7, #23]
      break;
 8011612:	bf00      	nop
  }

  return error;
 8011614:	7dfb      	ldrb	r3, [r7, #23]
}
 8011616:	4618      	mov	r0, r3
 8011618:	3718      	adds	r7, #24
 801161a:	46bd      	mov	sp, r7
 801161c:	bd80      	pop	{r7, pc}

0801161e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 801161e:	b580      	push	{r7, lr}
 8011620:	b086      	sub	sp, #24
 8011622:	af00      	add	r7, sp, #0
 8011624:	60f8      	str	r0, [r7, #12]
 8011626:	607a      	str	r2, [r7, #4]
 8011628:	603b      	str	r3, [r7, #0]
 801162a:	460b      	mov	r3, r1
 801162c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 801162e:	2302      	movs	r3, #2
 8011630:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011638:	69db      	ldr	r3, [r3, #28]
 801163a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8011642:	2b01      	cmp	r3, #1
 8011644:	d002      	beq.n	801164c <USBH_MSC_SCSI_Read+0x2e>
 8011646:	2b02      	cmp	r3, #2
 8011648:	d047      	beq.n	80116da <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 801164a:	e04e      	b.n	80116ea <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8011652:	461a      	mov	r2, r3
 8011654:	6a3b      	ldr	r3, [r7, #32]
 8011656:	fb03 f202 	mul.w	r2, r3, r2
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	2280      	movs	r2, #128	; 0x80
 8011662:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	220a      	movs	r2, #10
 801166a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	3363      	adds	r3, #99	; 0x63
 8011672:	2210      	movs	r2, #16
 8011674:	2100      	movs	r1, #0
 8011676:	4618      	mov	r0, r3
 8011678:	f002 fa3a 	bl	8013af0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	2228      	movs	r2, #40	; 0x28
 8011680:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8011684:	79fa      	ldrb	r2, [r7, #7]
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 801168c:	79ba      	ldrb	r2, [r7, #6]
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8011694:	797a      	ldrb	r2, [r7, #5]
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 801169c:	1d3b      	adds	r3, r7, #4
 801169e:	781a      	ldrb	r2, [r3, #0]
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80116a6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80116b0:	f107 0320 	add.w	r3, r7, #32
 80116b4:	781a      	ldrb	r2, [r3, #0]
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	2201      	movs	r2, #1
 80116c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	2202      	movs	r2, #2
 80116c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	683a      	ldr	r2, [r7, #0]
 80116d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80116d4:	2301      	movs	r3, #1
 80116d6:	75fb      	strb	r3, [r7, #23]
      break;
 80116d8:	e007      	b.n	80116ea <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80116da:	7afb      	ldrb	r3, [r7, #11]
 80116dc:	4619      	mov	r1, r3
 80116de:	68f8      	ldr	r0, [r7, #12]
 80116e0:	f7ff fa8c 	bl	8010bfc <USBH_MSC_BOT_Process>
 80116e4:	4603      	mov	r3, r0
 80116e6:	75fb      	strb	r3, [r7, #23]
      break;
 80116e8:	bf00      	nop
  }

  return error;
 80116ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3718      	adds	r7, #24
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}

080116f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80116f8:	2201      	movs	r2, #1
 80116fa:	490e      	ldr	r1, [pc, #56]	; (8011734 <MX_USB_HOST_Init+0x40>)
 80116fc:	480e      	ldr	r0, [pc, #56]	; (8011738 <MX_USB_HOST_Init+0x44>)
 80116fe:	f000 fb2b 	bl	8011d58 <USBH_Init>
 8011702:	4603      	mov	r3, r0
 8011704:	2b00      	cmp	r3, #0
 8011706:	d001      	beq.n	801170c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011708:	f7ef fe22 	bl	8001350 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 801170c:	490b      	ldr	r1, [pc, #44]	; (801173c <MX_USB_HOST_Init+0x48>)
 801170e:	480a      	ldr	r0, [pc, #40]	; (8011738 <MX_USB_HOST_Init+0x44>)
 8011710:	f000 fbd8 	bl	8011ec4 <USBH_RegisterClass>
 8011714:	4603      	mov	r3, r0
 8011716:	2b00      	cmp	r3, #0
 8011718:	d001      	beq.n	801171e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801171a:	f7ef fe19 	bl	8001350 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801171e:	4806      	ldr	r0, [pc, #24]	; (8011738 <MX_USB_HOST_Init+0x44>)
 8011720:	f000 fc5c 	bl	8011fdc <USBH_Start>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	d001      	beq.n	801172e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801172a:	f7ef fe11 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801172e:	bf00      	nop
 8011730:	bd80      	pop	{r7, pc}
 8011732:	bf00      	nop
 8011734:	08011741 	.word	0x08011741
 8011738:	20008970 	.word	0x20008970
 801173c:	20000010 	.word	0x20000010

08011740 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011740:	b480      	push	{r7}
 8011742:	b083      	sub	sp, #12
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	460b      	mov	r3, r1
 801174a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801174c:	78fb      	ldrb	r3, [r7, #3]
 801174e:	3b01      	subs	r3, #1
 8011750:	2b04      	cmp	r3, #4
 8011752:	d819      	bhi.n	8011788 <USBH_UserProcess+0x48>
 8011754:	a201      	add	r2, pc, #4	; (adr r2, 801175c <USBH_UserProcess+0x1c>)
 8011756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801175a:	bf00      	nop
 801175c:	08011789 	.word	0x08011789
 8011760:	08011779 	.word	0x08011779
 8011764:	08011789 	.word	0x08011789
 8011768:	08011781 	.word	0x08011781
 801176c:	08011771 	.word	0x08011771
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011770:	4b09      	ldr	r3, [pc, #36]	; (8011798 <USBH_UserProcess+0x58>)
 8011772:	2203      	movs	r2, #3
 8011774:	701a      	strb	r2, [r3, #0]
  break;
 8011776:	e008      	b.n	801178a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011778:	4b07      	ldr	r3, [pc, #28]	; (8011798 <USBH_UserProcess+0x58>)
 801177a:	2202      	movs	r2, #2
 801177c:	701a      	strb	r2, [r3, #0]
  break;
 801177e:	e004      	b.n	801178a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011780:	4b05      	ldr	r3, [pc, #20]	; (8011798 <USBH_UserProcess+0x58>)
 8011782:	2201      	movs	r2, #1
 8011784:	701a      	strb	r2, [r3, #0]
  break;
 8011786:	e000      	b.n	801178a <USBH_UserProcess+0x4a>

  default:
  break;
 8011788:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801178a:	bf00      	nop
 801178c:	370c      	adds	r7, #12
 801178e:	46bd      	mov	sp, r7
 8011790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011794:	4770      	bx	lr
 8011796:	bf00      	nop
 8011798:	20008d54 	.word	0x20008d54

0801179c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b08a      	sub	sp, #40	; 0x28
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80117a4:	f107 0314 	add.w	r3, r7, #20
 80117a8:	2200      	movs	r2, #0
 80117aa:	601a      	str	r2, [r3, #0]
 80117ac:	605a      	str	r2, [r3, #4]
 80117ae:	609a      	str	r2, [r3, #8]
 80117b0:	60da      	str	r2, [r3, #12]
 80117b2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80117bc:	d147      	bne.n	801184e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80117be:	2300      	movs	r3, #0
 80117c0:	613b      	str	r3, [r7, #16]
 80117c2:	4b25      	ldr	r3, [pc, #148]	; (8011858 <HAL_HCD_MspInit+0xbc>)
 80117c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117c6:	4a24      	ldr	r2, [pc, #144]	; (8011858 <HAL_HCD_MspInit+0xbc>)
 80117c8:	f043 0301 	orr.w	r3, r3, #1
 80117cc:	6313      	str	r3, [r2, #48]	; 0x30
 80117ce:	4b22      	ldr	r3, [pc, #136]	; (8011858 <HAL_HCD_MspInit+0xbc>)
 80117d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117d2:	f003 0301 	and.w	r3, r3, #1
 80117d6:	613b      	str	r3, [r7, #16]
 80117d8:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 80117da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80117de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117e0:	2302      	movs	r3, #2
 80117e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117e4:	2300      	movs	r3, #0
 80117e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80117e8:	2303      	movs	r3, #3
 80117ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80117ec:	230a      	movs	r3, #10
 80117ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117f0:	f107 0314 	add.w	r3, r7, #20
 80117f4:	4619      	mov	r1, r3
 80117f6:	4819      	ldr	r0, [pc, #100]	; (801185c <HAL_HCD_MspInit+0xc0>)
 80117f8:	f7f1 ff3c 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 80117fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011802:	2302      	movs	r3, #2
 8011804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011806:	2300      	movs	r3, #0
 8011808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 801180a:	f107 0314 	add.w	r3, r7, #20
 801180e:	4619      	mov	r1, r3
 8011810:	4812      	ldr	r0, [pc, #72]	; (801185c <HAL_HCD_MspInit+0xc0>)
 8011812:	f7f1 ff2f 	bl	8003674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011816:	4b10      	ldr	r3, [pc, #64]	; (8011858 <HAL_HCD_MspInit+0xbc>)
 8011818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801181a:	4a0f      	ldr	r2, [pc, #60]	; (8011858 <HAL_HCD_MspInit+0xbc>)
 801181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011820:	6353      	str	r3, [r2, #52]	; 0x34
 8011822:	2300      	movs	r3, #0
 8011824:	60fb      	str	r3, [r7, #12]
 8011826:	4b0c      	ldr	r3, [pc, #48]	; (8011858 <HAL_HCD_MspInit+0xbc>)
 8011828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801182a:	4a0b      	ldr	r2, [pc, #44]	; (8011858 <HAL_HCD_MspInit+0xbc>)
 801182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011830:	6453      	str	r3, [r2, #68]	; 0x44
 8011832:	4b09      	ldr	r3, [pc, #36]	; (8011858 <HAL_HCD_MspInit+0xbc>)
 8011834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801183a:	60fb      	str	r3, [r7, #12]
 801183c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801183e:	2200      	movs	r2, #0
 8011840:	2105      	movs	r1, #5
 8011842:	2043      	movs	r0, #67	; 0x43
 8011844:	f7f0 fc0e 	bl	8002064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011848:	2043      	movs	r0, #67	; 0x43
 801184a:	f7f0 fc37 	bl	80020bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801184e:	bf00      	nop
 8011850:	3728      	adds	r7, #40	; 0x28
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	bf00      	nop
 8011858:	40023800 	.word	0x40023800
 801185c:	40020000 	.word	0x40020000

08011860 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801186e:	4618      	mov	r0, r3
 8011870:	f001 f86b 	bl	801294a <USBH_LL_IncTimer>
}
 8011874:	bf00      	nop
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801188a:	4618      	mov	r0, r3
 801188c:	f001 f8af 	bl	80129ee <USBH_LL_Connect>
}
 8011890:	bf00      	nop
 8011892:	3708      	adds	r7, #8
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}

08011898 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80118a6:	4618      	mov	r0, r3
 80118a8:	f001 f8c4 	bl	8012a34 <USBH_LL_Disconnect>
}
 80118ac:	bf00      	nop
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	460b      	mov	r3, r1
 80118be:	70fb      	strb	r3, [r7, #3]
 80118c0:	4613      	mov	r3, r2
 80118c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80118ca:	4618      	mov	r0, r3
 80118cc:	f001 f8f9 	bl	8012ac2 <USBH_LL_NotifyURBChange>
#endif
}
 80118d0:	bf00      	nop
 80118d2:	3708      	adds	r7, #8
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}

080118d8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80118e6:	4618      	mov	r0, r3
 80118e8:	f001 f859 	bl	801299e <USBH_LL_PortEnabled>
}
 80118ec:	bf00      	nop
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011902:	4618      	mov	r0, r3
 8011904:	f001 f865 	bl	80129d2 <USBH_LL_PortDisabled>
}
 8011908:	bf00      	nop
 801190a:	3708      	adds	r7, #8
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801191e:	2b01      	cmp	r3, #1
 8011920:	d12a      	bne.n	8011978 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011922:	4a18      	ldr	r2, [pc, #96]	; (8011984 <USBH_LL_Init+0x74>)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	4a15      	ldr	r2, [pc, #84]	; (8011984 <USBH_LL_Init+0x74>)
 801192e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011932:	4b14      	ldr	r3, [pc, #80]	; (8011984 <USBH_LL_Init+0x74>)
 8011934:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011938:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801193a:	4b12      	ldr	r3, [pc, #72]	; (8011984 <USBH_LL_Init+0x74>)
 801193c:	2208      	movs	r2, #8
 801193e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011940:	4b10      	ldr	r3, [pc, #64]	; (8011984 <USBH_LL_Init+0x74>)
 8011942:	2201      	movs	r2, #1
 8011944:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011946:	4b0f      	ldr	r3, [pc, #60]	; (8011984 <USBH_LL_Init+0x74>)
 8011948:	2200      	movs	r2, #0
 801194a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801194c:	4b0d      	ldr	r3, [pc, #52]	; (8011984 <USBH_LL_Init+0x74>)
 801194e:	2202      	movs	r2, #2
 8011950:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011952:	4b0c      	ldr	r3, [pc, #48]	; (8011984 <USBH_LL_Init+0x74>)
 8011954:	2200      	movs	r2, #0
 8011956:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011958:	480a      	ldr	r0, [pc, #40]	; (8011984 <USBH_LL_Init+0x74>)
 801195a:	f7f2 fa13 	bl	8003d84 <HAL_HCD_Init>
 801195e:	4603      	mov	r3, r0
 8011960:	2b00      	cmp	r3, #0
 8011962:	d001      	beq.n	8011968 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011964:	f7ef fcf4 	bl	8001350 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011968:	4806      	ldr	r0, [pc, #24]	; (8011984 <USBH_LL_Init+0x74>)
 801196a:	f7f2 fe08 	bl	800457e <HAL_HCD_GetCurrentFrame>
 801196e:	4603      	mov	r3, r0
 8011970:	4619      	mov	r1, r3
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f000 ffda 	bl	801292c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011978:	2300      	movs	r3, #0
}
 801197a:	4618      	mov	r0, r3
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	20008d58 	.word	0x20008d58

08011988 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b084      	sub	sp, #16
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011990:	2300      	movs	r3, #0
 8011992:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011994:	2300      	movs	r3, #0
 8011996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801199e:	4618      	mov	r0, r3
 80119a0:	f7f2 fd77 	bl	8004492 <HAL_HCD_Start>
 80119a4:	4603      	mov	r3, r0
 80119a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80119a8:	7bfb      	ldrb	r3, [r7, #15]
 80119aa:	4618      	mov	r0, r3
 80119ac:	f000 f98c 	bl	8011cc8 <USBH_Get_USB_Status>
 80119b0:	4603      	mov	r3, r0
 80119b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3710      	adds	r7, #16
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}

080119be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80119be:	b580      	push	{r7, lr}
 80119c0:	b084      	sub	sp, #16
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119c6:	2300      	movs	r3, #0
 80119c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80119ca:	2300      	movs	r3, #0
 80119cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7f2 fd7f 	bl	80044d8 <HAL_HCD_Stop>
 80119da:	4603      	mov	r3, r0
 80119dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80119de:	7bfb      	ldrb	r3, [r7, #15]
 80119e0:	4618      	mov	r0, r3
 80119e2:	f000 f971 	bl	8011cc8 <USBH_Get_USB_Status>
 80119e6:	4603      	mov	r3, r0
 80119e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3710      	adds	r7, #16
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b084      	sub	sp, #16
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80119fc:	2301      	movs	r3, #1
 80119fe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7f2 fdc7 	bl	800459a <HAL_HCD_GetCurrentSpeed>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2b02      	cmp	r3, #2
 8011a10:	d00c      	beq.n	8011a2c <USBH_LL_GetSpeed+0x38>
 8011a12:	2b02      	cmp	r3, #2
 8011a14:	d80d      	bhi.n	8011a32 <USBH_LL_GetSpeed+0x3e>
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d002      	beq.n	8011a20 <USBH_LL_GetSpeed+0x2c>
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d003      	beq.n	8011a26 <USBH_LL_GetSpeed+0x32>
 8011a1e:	e008      	b.n	8011a32 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011a20:	2300      	movs	r3, #0
 8011a22:	73fb      	strb	r3, [r7, #15]
    break;
 8011a24:	e008      	b.n	8011a38 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011a26:	2301      	movs	r3, #1
 8011a28:	73fb      	strb	r3, [r7, #15]
    break;
 8011a2a:	e005      	b.n	8011a38 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011a2c:	2302      	movs	r3, #2
 8011a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8011a30:	e002      	b.n	8011a38 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011a32:	2301      	movs	r3, #1
 8011a34:	73fb      	strb	r3, [r7, #15]
    break;
 8011a36:	bf00      	nop
  }
  return  speed;
 8011a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3710      	adds	r7, #16
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}

08011a42 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011a42:	b580      	push	{r7, lr}
 8011a44:	b084      	sub	sp, #16
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7f2 fd5a 	bl	8004512 <HAL_HCD_ResetPort>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011a62:	7bfb      	ldrb	r3, [r7, #15]
 8011a64:	4618      	mov	r0, r3
 8011a66:	f000 f92f 	bl	8011cc8 <USBH_Get_USB_Status>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3710      	adds	r7, #16
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	460b      	mov	r3, r1
 8011a82:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a8a:	78fa      	ldrb	r2, [r7, #3]
 8011a8c:	4611      	mov	r1, r2
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7f2 fd61 	bl	8004556 <HAL_HCD_HC_GetXferCount>
 8011a94:	4603      	mov	r3, r0
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3708      	adds	r7, #8
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011a9e:	b590      	push	{r4, r7, lr}
 8011aa0:	b089      	sub	sp, #36	; 0x24
 8011aa2:	af04      	add	r7, sp, #16
 8011aa4:	6078      	str	r0, [r7, #4]
 8011aa6:	4608      	mov	r0, r1
 8011aa8:	4611      	mov	r1, r2
 8011aaa:	461a      	mov	r2, r3
 8011aac:	4603      	mov	r3, r0
 8011aae:	70fb      	strb	r3, [r7, #3]
 8011ab0:	460b      	mov	r3, r1
 8011ab2:	70bb      	strb	r3, [r7, #2]
 8011ab4:	4613      	mov	r3, r2
 8011ab6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011abc:	2300      	movs	r3, #0
 8011abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011ac6:	787c      	ldrb	r4, [r7, #1]
 8011ac8:	78ba      	ldrb	r2, [r7, #2]
 8011aca:	78f9      	ldrb	r1, [r7, #3]
 8011acc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011ace:	9302      	str	r3, [sp, #8]
 8011ad0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011ad4:	9301      	str	r3, [sp, #4]
 8011ad6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011ada:	9300      	str	r3, [sp, #0]
 8011adc:	4623      	mov	r3, r4
 8011ade:	f7f2 f9c5 	bl	8003e6c <HAL_HCD_HC_Init>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011ae6:	7bfb      	ldrb	r3, [r7, #15]
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f000 f8ed 	bl	8011cc8 <USBH_Get_USB_Status>
 8011aee:	4603      	mov	r3, r0
 8011af0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3714      	adds	r7, #20
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd90      	pop	{r4, r7, pc}

08011afc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	460b      	mov	r3, r1
 8011b06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011b16:	78fa      	ldrb	r2, [r7, #3]
 8011b18:	4611      	mov	r1, r2
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7f2 fa35 	bl	8003f8a <HAL_HCD_HC_Halt>
 8011b20:	4603      	mov	r3, r0
 8011b22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011b24:	7bfb      	ldrb	r3, [r7, #15]
 8011b26:	4618      	mov	r0, r3
 8011b28:	f000 f8ce 	bl	8011cc8 <USBH_Get_USB_Status>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3710      	adds	r7, #16
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}

08011b3a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011b3a:	b590      	push	{r4, r7, lr}
 8011b3c:	b089      	sub	sp, #36	; 0x24
 8011b3e:	af04      	add	r7, sp, #16
 8011b40:	6078      	str	r0, [r7, #4]
 8011b42:	4608      	mov	r0, r1
 8011b44:	4611      	mov	r1, r2
 8011b46:	461a      	mov	r2, r3
 8011b48:	4603      	mov	r3, r0
 8011b4a:	70fb      	strb	r3, [r7, #3]
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	70bb      	strb	r3, [r7, #2]
 8011b50:	4613      	mov	r3, r2
 8011b52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b54:	2300      	movs	r3, #0
 8011b56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011b62:	787c      	ldrb	r4, [r7, #1]
 8011b64:	78ba      	ldrb	r2, [r7, #2]
 8011b66:	78f9      	ldrb	r1, [r7, #3]
 8011b68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011b6c:	9303      	str	r3, [sp, #12]
 8011b6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011b70:	9302      	str	r3, [sp, #8]
 8011b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b74:	9301      	str	r3, [sp, #4]
 8011b76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011b7a:	9300      	str	r3, [sp, #0]
 8011b7c:	4623      	mov	r3, r4
 8011b7e:	f7f2 fa27 	bl	8003fd0 <HAL_HCD_HC_SubmitRequest>
 8011b82:	4603      	mov	r3, r0
 8011b84:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011b86:	7bfb      	ldrb	r3, [r7, #15]
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f000 f89d 	bl	8011cc8 <USBH_Get_USB_Status>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b92:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3714      	adds	r7, #20
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd90      	pop	{r4, r7, pc}

08011b9c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b082      	sub	sp, #8
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	460b      	mov	r3, r1
 8011ba6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011bae:	78fa      	ldrb	r2, [r7, #3]
 8011bb0:	4611      	mov	r1, r2
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7f2 fcbb 	bl	800452e <HAL_HCD_HC_GetURBState>
 8011bb8:	4603      	mov	r3, r0
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3708      	adds	r7, #8
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}

08011bc2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011bc2:	b580      	push	{r7, lr}
 8011bc4:	b082      	sub	sp, #8
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
 8011bca:	460b      	mov	r3, r1
 8011bcc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011bd4:	2b01      	cmp	r3, #1
 8011bd6:	d103      	bne.n	8011be0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011bd8:	78fb      	ldrb	r3, [r7, #3]
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f000 f8a0 	bl	8011d20 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011be0:	20c8      	movs	r0, #200	; 0xc8
 8011be2:	f7f0 f94d 	bl	8001e80 <HAL_Delay>
  return USBH_OK;
 8011be6:	2300      	movs	r3, #0
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3708      	adds	r7, #8
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}

08011bf0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	b085      	sub	sp, #20
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	70fb      	strb	r3, [r7, #3]
 8011bfc:	4613      	mov	r3, r2
 8011bfe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c06:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011c08:	78fb      	ldrb	r3, [r7, #3]
 8011c0a:	68fa      	ldr	r2, [r7, #12]
 8011c0c:	212c      	movs	r1, #44	; 0x2c
 8011c0e:	fb01 f303 	mul.w	r3, r1, r3
 8011c12:	4413      	add	r3, r2
 8011c14:	333b      	adds	r3, #59	; 0x3b
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d009      	beq.n	8011c30 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011c1c:	78fb      	ldrb	r3, [r7, #3]
 8011c1e:	68fa      	ldr	r2, [r7, #12]
 8011c20:	212c      	movs	r1, #44	; 0x2c
 8011c22:	fb01 f303 	mul.w	r3, r1, r3
 8011c26:	4413      	add	r3, r2
 8011c28:	3354      	adds	r3, #84	; 0x54
 8011c2a:	78ba      	ldrb	r2, [r7, #2]
 8011c2c:	701a      	strb	r2, [r3, #0]
 8011c2e:	e008      	b.n	8011c42 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011c30:	78fb      	ldrb	r3, [r7, #3]
 8011c32:	68fa      	ldr	r2, [r7, #12]
 8011c34:	212c      	movs	r1, #44	; 0x2c
 8011c36:	fb01 f303 	mul.w	r3, r1, r3
 8011c3a:	4413      	add	r3, r2
 8011c3c:	3355      	adds	r3, #85	; 0x55
 8011c3e:	78ba      	ldrb	r2, [r7, #2]
 8011c40:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011c42:	2300      	movs	r3, #0
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3714      	adds	r7, #20
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr

08011c50 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b085      	sub	sp, #20
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	460b      	mov	r3, r1
 8011c5a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c66:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8011c68:	78fb      	ldrb	r3, [r7, #3]
 8011c6a:	68ba      	ldr	r2, [r7, #8]
 8011c6c:	212c      	movs	r1, #44	; 0x2c
 8011c6e:	fb01 f303 	mul.w	r3, r1, r3
 8011c72:	4413      	add	r3, r2
 8011c74:	333b      	adds	r3, #59	; 0x3b
 8011c76:	781b      	ldrb	r3, [r3, #0]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d009      	beq.n	8011c90 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8011c7c:	78fb      	ldrb	r3, [r7, #3]
 8011c7e:	68ba      	ldr	r2, [r7, #8]
 8011c80:	212c      	movs	r1, #44	; 0x2c
 8011c82:	fb01 f303 	mul.w	r3, r1, r3
 8011c86:	4413      	add	r3, r2
 8011c88:	3354      	adds	r3, #84	; 0x54
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	73fb      	strb	r3, [r7, #15]
 8011c8e:	e008      	b.n	8011ca2 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011c90:	78fb      	ldrb	r3, [r7, #3]
 8011c92:	68ba      	ldr	r2, [r7, #8]
 8011c94:	212c      	movs	r1, #44	; 0x2c
 8011c96:	fb01 f303 	mul.w	r3, r1, r3
 8011c9a:	4413      	add	r3, r2
 8011c9c:	3355      	adds	r3, #85	; 0x55
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8011ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3714      	adds	r7, #20
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cae:	4770      	bx	lr

08011cb0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f7f0 f8e1 	bl	8001e80 <HAL_Delay>
}
 8011cbe:	bf00      	nop
 8011cc0:	3708      	adds	r7, #8
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
	...

08011cc8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b085      	sub	sp, #20
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	4603      	mov	r3, r0
 8011cd0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011cd6:	79fb      	ldrb	r3, [r7, #7]
 8011cd8:	2b03      	cmp	r3, #3
 8011cda:	d817      	bhi.n	8011d0c <USBH_Get_USB_Status+0x44>
 8011cdc:	a201      	add	r2, pc, #4	; (adr r2, 8011ce4 <USBH_Get_USB_Status+0x1c>)
 8011cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ce2:	bf00      	nop
 8011ce4:	08011cf5 	.word	0x08011cf5
 8011ce8:	08011cfb 	.word	0x08011cfb
 8011cec:	08011d01 	.word	0x08011d01
 8011cf0:	08011d07 	.word	0x08011d07
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8011cf8:	e00b      	b.n	8011d12 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011cfa:	2302      	movs	r3, #2
 8011cfc:	73fb      	strb	r3, [r7, #15]
    break;
 8011cfe:	e008      	b.n	8011d12 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011d00:	2301      	movs	r3, #1
 8011d02:	73fb      	strb	r3, [r7, #15]
    break;
 8011d04:	e005      	b.n	8011d12 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011d06:	2302      	movs	r3, #2
 8011d08:	73fb      	strb	r3, [r7, #15]
    break;
 8011d0a:	e002      	b.n	8011d12 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011d0c:	2302      	movs	r3, #2
 8011d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8011d10:	bf00      	nop
  }
  return usb_status;
 8011d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3714      	adds	r7, #20
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr

08011d20 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b084      	sub	sp, #16
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	4603      	mov	r3, r0
 8011d28:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011d2a:	79fb      	ldrb	r3, [r7, #7]
 8011d2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011d2e:	79fb      	ldrb	r3, [r7, #7]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d102      	bne.n	8011d3a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8011d34:	2300      	movs	r3, #0
 8011d36:	73fb      	strb	r3, [r7, #15]
 8011d38:	e001      	b.n	8011d3e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 8011d3e:	7bfb      	ldrb	r3, [r7, #15]
 8011d40:	461a      	mov	r2, r3
 8011d42:	2104      	movs	r1, #4
 8011d44:	4803      	ldr	r0, [pc, #12]	; (8011d54 <MX_DriverVbusFS+0x34>)
 8011d46:	f7f1 ffeb 	bl	8003d20 <HAL_GPIO_WritePin>
}
 8011d4a:	bf00      	nop
 8011d4c:	3710      	adds	r7, #16
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	40020400 	.word	0x40020400

08011d58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8011d58:	b5b0      	push	{r4, r5, r7, lr}
 8011d5a:	b090      	sub	sp, #64	; 0x40
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	60f8      	str	r0, [r7, #12]
 8011d60:	60b9      	str	r1, [r7, #8]
 8011d62:	4613      	mov	r3, r2
 8011d64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d101      	bne.n	8011d70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8011d6c:	2302      	movs	r3, #2
 8011d6e:	e04d      	b.n	8011e0c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	79fa      	ldrb	r2, [r7, #7]
 8011d74:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	2200      	movs	r2, #0
 8011d84:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8011d88:	68f8      	ldr	r0, [r7, #12]
 8011d8a:	f000 f847 	bl	8011e1c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2200      	movs	r2, #0
 8011d92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	2200      	movs	r2, #0
 8011da2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	2200      	movs	r2, #0
 8011daa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d003      	beq.n	8011dbc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	68ba      	ldr	r2, [r7, #8]
 8011db8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8011dbc:	4b15      	ldr	r3, [pc, #84]	; (8011e14 <USBH_Init+0xbc>)
 8011dbe:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8011dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8011dc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011dcc:	2100      	movs	r1, #0
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7fb fdc2 	bl	800d958 <osMessageCreate>
 8011dd4:	4602      	mov	r2, r0
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8011ddc:	4b0e      	ldr	r3, [pc, #56]	; (8011e18 <USBH_Init+0xc0>)
 8011dde:	f107 0414 	add.w	r4, r7, #20
 8011de2:	461d      	mov	r5, r3
 8011de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011de8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011dec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8011df0:	f107 0314 	add.w	r3, r7, #20
 8011df4:	68f9      	ldr	r1, [r7, #12]
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fb fd4e 	bl	800d898 <osThreadCreate>
 8011dfc:	4602      	mov	r2, r0
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8011e04:	68f8      	ldr	r0, [r7, #12]
 8011e06:	f7ff fd83 	bl	8011910 <USBH_LL_Init>

  return USBH_OK;
 8011e0a:	2300      	movs	r3, #0
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3740      	adds	r7, #64	; 0x40
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bdb0      	pop	{r4, r5, r7, pc}
 8011e14:	080142f4 	.word	0x080142f4
 8011e18:	08014304 	.word	0x08014304

08011e1c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b085      	sub	sp, #20
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8011e24:	2300      	movs	r3, #0
 8011e26:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8011e28:	2300      	movs	r3, #0
 8011e2a:	60fb      	str	r3, [r7, #12]
 8011e2c:	e009      	b.n	8011e42 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8011e2e:	687a      	ldr	r2, [r7, #4]
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	33e0      	adds	r3, #224	; 0xe0
 8011e34:	009b      	lsls	r3, r3, #2
 8011e36:	4413      	add	r3, r2
 8011e38:	2200      	movs	r2, #0
 8011e3a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	3301      	adds	r3, #1
 8011e40:	60fb      	str	r3, [r7, #12]
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	2b0f      	cmp	r3, #15
 8011e46:	d9f2      	bls.n	8011e2e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8011e48:	2300      	movs	r3, #0
 8011e4a:	60fb      	str	r3, [r7, #12]
 8011e4c:	e009      	b.n	8011e62 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8011e4e:	687a      	ldr	r2, [r7, #4]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	4413      	add	r3, r2
 8011e54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011e58:	2200      	movs	r2, #0
 8011e5a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	3301      	adds	r3, #1
 8011e60:	60fb      	str	r3, [r7, #12]
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e68:	d3f1      	bcc.n	8011e4e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2200      	movs	r2, #0
 8011e74:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2201      	movs	r2, #1
 8011e7a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2201      	movs	r2, #1
 8011e88:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2240      	movs	r2, #64	; 0x40
 8011e8e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2200      	movs	r2, #0
 8011e94:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8011eb6:	2300      	movs	r3, #0
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3714      	adds	r7, #20
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b085      	sub	sp, #20
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d016      	beq.n	8011f06 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d10e      	bne.n	8011f00 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8011ee8:	1c59      	adds	r1, r3, #1
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8011ef0:	687a      	ldr	r2, [r7, #4]
 8011ef2:	33de      	adds	r3, #222	; 0xde
 8011ef4:	6839      	ldr	r1, [r7, #0]
 8011ef6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8011efa:	2300      	movs	r3, #0
 8011efc:	73fb      	strb	r3, [r7, #15]
 8011efe:	e004      	b.n	8011f0a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8011f00:	2302      	movs	r3, #2
 8011f02:	73fb      	strb	r3, [r7, #15]
 8011f04:	e001      	b.n	8011f0a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8011f06:	2302      	movs	r3, #2
 8011f08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3714      	adds	r7, #20
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b085      	sub	sp, #20
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	460b      	mov	r3, r1
 8011f22:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8011f24:	2300      	movs	r3, #0
 8011f26:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8011f2e:	78fa      	ldrb	r2, [r7, #3]
 8011f30:	429a      	cmp	r2, r3
 8011f32:	d204      	bcs.n	8011f3e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	78fa      	ldrb	r2, [r7, #3]
 8011f38:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8011f3c:	e001      	b.n	8011f42 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8011f3e:	2302      	movs	r3, #2
 8011f40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3714      	adds	r7, #20
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr

08011f50 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8011f50:	b480      	push	{r7}
 8011f52:	b087      	sub	sp, #28
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	4608      	mov	r0, r1
 8011f5a:	4611      	mov	r1, r2
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	4603      	mov	r3, r0
 8011f60:	70fb      	strb	r3, [r7, #3]
 8011f62:	460b      	mov	r3, r1
 8011f64:	70bb      	strb	r3, [r7, #2]
 8011f66:	4613      	mov	r3, r2
 8011f68:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011f78:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8011f7a:	e025      	b.n	8011fc8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8011f7c:	7dfb      	ldrb	r3, [r7, #23]
 8011f7e:	221a      	movs	r2, #26
 8011f80:	fb02 f303 	mul.w	r3, r2, r3
 8011f84:	3308      	adds	r3, #8
 8011f86:	68fa      	ldr	r2, [r7, #12]
 8011f88:	4413      	add	r3, r2
 8011f8a:	3302      	adds	r3, #2
 8011f8c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	795b      	ldrb	r3, [r3, #5]
 8011f92:	78fa      	ldrb	r2, [r7, #3]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d002      	beq.n	8011f9e <USBH_FindInterface+0x4e>
 8011f98:	78fb      	ldrb	r3, [r7, #3]
 8011f9a:	2bff      	cmp	r3, #255	; 0xff
 8011f9c:	d111      	bne.n	8011fc2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8011fa2:	78ba      	ldrb	r2, [r7, #2]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d002      	beq.n	8011fae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011fa8:	78bb      	ldrb	r3, [r7, #2]
 8011faa:	2bff      	cmp	r3, #255	; 0xff
 8011fac:	d109      	bne.n	8011fc2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011fb2:	787a      	ldrb	r2, [r7, #1]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d002      	beq.n	8011fbe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011fb8:	787b      	ldrb	r3, [r7, #1]
 8011fba:	2bff      	cmp	r3, #255	; 0xff
 8011fbc:	d101      	bne.n	8011fc2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8011fbe:	7dfb      	ldrb	r3, [r7, #23]
 8011fc0:	e006      	b.n	8011fd0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8011fc2:	7dfb      	ldrb	r3, [r7, #23]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8011fc8:	7dfb      	ldrb	r3, [r7, #23]
 8011fca:	2b01      	cmp	r3, #1
 8011fcc:	d9d6      	bls.n	8011f7c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8011fce:	23ff      	movs	r3, #255	; 0xff
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	371c      	adds	r7, #28
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr

08011fdc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b082      	sub	sp, #8
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	f7ff fccf 	bl	8011988 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8011fea:	2101      	movs	r1, #1
 8011fec:	6878      	ldr	r0, [r7, #4]
 8011fee:	f7ff fde8 	bl	8011bc2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8011ff2:	2300      	movs	r3, #0
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3708      	adds	r7, #8
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}

08011ffc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b088      	sub	sp, #32
 8012000:	af04      	add	r7, sp, #16
 8012002:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8012004:	2302      	movs	r3, #2
 8012006:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8012008:	2300      	movs	r3, #0
 801200a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8012012:	b2db      	uxtb	r3, r3
 8012014:	2b01      	cmp	r3, #1
 8012016:	d102      	bne.n	801201e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2203      	movs	r2, #3
 801201c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	b2db      	uxtb	r3, r3
 8012024:	2b0b      	cmp	r3, #11
 8012026:	f200 8247 	bhi.w	80124b8 <USBH_Process+0x4bc>
 801202a:	a201      	add	r2, pc, #4	; (adr r2, 8012030 <USBH_Process+0x34>)
 801202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012030:	08012061 	.word	0x08012061
 8012034:	080120af 	.word	0x080120af
 8012038:	08012133 	.word	0x08012133
 801203c:	08012437 	.word	0x08012437
 8012040:	080124b9 	.word	0x080124b9
 8012044:	080121f3 	.word	0x080121f3
 8012048:	080123c1 	.word	0x080123c1
 801204c:	08012245 	.word	0x08012245
 8012050:	08012281 	.word	0x08012281
 8012054:	080122bb 	.word	0x080122bb
 8012058:	08012319 	.word	0x08012319
 801205c:	0801241f 	.word	0x0801241f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8012066:	b2db      	uxtb	r3, r3
 8012068:	2b00      	cmp	r3, #0
 801206a:	f000 8227 	beq.w	80124bc <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2201      	movs	r2, #1
 8012072:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8012074:	20c8      	movs	r0, #200	; 0xc8
 8012076:	f7ff fe1b 	bl	8011cb0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7ff fce1 	bl	8011a42 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2200      	movs	r2, #0
 8012084:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2200      	movs	r2, #0
 801208c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2201      	movs	r2, #1
 8012094:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80120a4:	2200      	movs	r2, #0
 80120a6:	4619      	mov	r1, r3
 80120a8:	f7fb fc7e 	bl	800d9a8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80120ac:	e206      	b.n	80124bc <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	d107      	bne.n	80120c8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2200      	movs	r2, #0
 80120bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2202      	movs	r2, #2
 80120c4:	701a      	strb	r2, [r3, #0]
 80120c6:	e025      	b.n	8012114 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80120ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80120d2:	d914      	bls.n	80120fe <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80120da:	3301      	adds	r3, #1
 80120dc:	b2da      	uxtb	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80120ea:	2b03      	cmp	r3, #3
 80120ec:	d903      	bls.n	80120f6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	220d      	movs	r2, #13
 80120f2:	701a      	strb	r2, [r3, #0]
 80120f4:	e00e      	b.n	8012114 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2200      	movs	r2, #0
 80120fa:	701a      	strb	r2, [r3, #0]
 80120fc:	e00a      	b.n	8012114 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8012104:	f103 020a 	add.w	r2, r3, #10
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 801210e:	200a      	movs	r0, #10
 8012110:	f7ff fdce 	bl	8011cb0 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2201      	movs	r2, #1
 8012118:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012128:	2200      	movs	r2, #0
 801212a:	4619      	mov	r1, r3
 801212c:	f7fb fc3c 	bl	800d9a8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8012130:	e1cb      	b.n	80124ca <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012138:	2b00      	cmp	r3, #0
 801213a:	d005      	beq.n	8012148 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012142:	2104      	movs	r1, #4
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8012148:	2064      	movs	r0, #100	; 0x64
 801214a:	f7ff fdb1 	bl	8011cb0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7ff fc50 	bl	80119f4 <USBH_LL_GetSpeed>
 8012154:	4603      	mov	r3, r0
 8012156:	461a      	mov	r2, r3
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2205      	movs	r2, #5
 8012162:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8012164:	2100      	movs	r1, #0
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f001 fc17 	bl	801399a <USBH_AllocPipe>
 801216c:	4603      	mov	r3, r0
 801216e:	461a      	mov	r2, r3
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8012174:	2180      	movs	r1, #128	; 0x80
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f001 fc0f 	bl	801399a <USBH_AllocPipe>
 801217c:	4603      	mov	r3, r0
 801217e:	461a      	mov	r2, r3
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	7919      	ldrb	r1, [r3, #4]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012194:	687a      	ldr	r2, [r7, #4]
 8012196:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012198:	b292      	uxth	r2, r2
 801219a:	9202      	str	r2, [sp, #8]
 801219c:	2200      	movs	r2, #0
 801219e:	9201      	str	r2, [sp, #4]
 80121a0:	9300      	str	r3, [sp, #0]
 80121a2:	4603      	mov	r3, r0
 80121a4:	2280      	movs	r2, #128	; 0x80
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f001 fbc8 	bl	801393c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	7959      	ldrb	r1, [r3, #5]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80121c0:	b292      	uxth	r2, r2
 80121c2:	9202      	str	r2, [sp, #8]
 80121c4:	2200      	movs	r2, #0
 80121c6:	9201      	str	r2, [sp, #4]
 80121c8:	9300      	str	r3, [sp, #0]
 80121ca:	4603      	mov	r3, r0
 80121cc:	2200      	movs	r2, #0
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f001 fbb4 	bl	801393c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2201      	movs	r2, #1
 80121d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80121e8:	2200      	movs	r2, #0
 80121ea:	4619      	mov	r1, r3
 80121ec:	f7fb fbdc 	bl	800d9a8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80121f0:	e16b      	b.n	80124ca <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f000 f96e 	bl	80124d4 <USBH_HandleEnum>
 80121f8:	4603      	mov	r3, r0
 80121fa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80121fc:	7bbb      	ldrb	r3, [r7, #14]
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	2b00      	cmp	r3, #0
 8012202:	f040 815d 	bne.w	80124c0 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2200      	movs	r2, #0
 801220a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8012214:	2b01      	cmp	r3, #1
 8012216:	d103      	bne.n	8012220 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2208      	movs	r2, #8
 801221c:	701a      	strb	r2, [r3, #0]
 801221e:	e002      	b.n	8012226 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2207      	movs	r2, #7
 8012224:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2205      	movs	r2, #5
 801222a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801223a:	2200      	movs	r2, #0
 801223c:	4619      	mov	r1, r3
 801223e:	f7fb fbb3 	bl	800d9a8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8012242:	e13d      	b.n	80124c0 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801224a:	2b00      	cmp	r3, #0
 801224c:	f000 813a 	beq.w	80124c4 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012256:	2101      	movs	r1, #1
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2208      	movs	r2, #8
 8012260:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2205      	movs	r2, #5
 8012266:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012276:	2200      	movs	r2, #0
 8012278:	4619      	mov	r1, r3
 801227a:	f7fb fb95 	bl	800d9a8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 801227e:	e121      	b.n	80124c4 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8012286:	b29b      	uxth	r3, r3
 8012288:	4619      	mov	r1, r3
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f000 fd00 	bl	8012c90 <USBH_SetCfg>
 8012290:	4603      	mov	r3, r0
 8012292:	2b00      	cmp	r3, #0
 8012294:	d102      	bne.n	801229c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2209      	movs	r2, #9
 801229a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2201      	movs	r2, #1
 80122a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80122b0:	2200      	movs	r2, #0
 80122b2:	4619      	mov	r1, r3
 80122b4:	f7fb fb78 	bl	800d9a8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80122b8:	e107      	b.n	80124ca <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80122c0:	f003 0320 	and.w	r3, r3, #32
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d015      	beq.n	80122f4 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80122c8:	2101      	movs	r1, #1
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 fd03 	bl	8012cd6 <USBH_SetFeature>
 80122d0:	4603      	mov	r3, r0
 80122d2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80122d4:	7bbb      	ldrb	r3, [r7, #14]
 80122d6:	b2db      	uxtb	r3, r3
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d103      	bne.n	80122e4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	220a      	movs	r2, #10
 80122e0:	701a      	strb	r2, [r3, #0]
 80122e2:	e00a      	b.n	80122fa <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80122e4:	7bbb      	ldrb	r3, [r7, #14]
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	2b03      	cmp	r3, #3
 80122ea:	d106      	bne.n	80122fa <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	220a      	movs	r2, #10
 80122f0:	701a      	strb	r2, [r3, #0]
 80122f2:	e002      	b.n	80122fa <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	220a      	movs	r2, #10
 80122f8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	2201      	movs	r2, #1
 80122fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801230e:	2200      	movs	r2, #0
 8012310:	4619      	mov	r1, r3
 8012312:	f7fb fb49 	bl	800d9a8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8012316:	e0d8      	b.n	80124ca <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801231e:	2b00      	cmp	r3, #0
 8012320:	d03f      	beq.n	80123a2 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2200      	movs	r2, #0
 8012326:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801232a:	2300      	movs	r3, #0
 801232c:	73fb      	strb	r3, [r7, #15]
 801232e:	e016      	b.n	801235e <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8012330:	7bfa      	ldrb	r2, [r7, #15]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	32de      	adds	r2, #222	; 0xde
 8012336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801233a:	791a      	ldrb	r2, [r3, #4]
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8012342:	429a      	cmp	r2, r3
 8012344:	d108      	bne.n	8012358 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8012346:	7bfa      	ldrb	r2, [r7, #15]
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	32de      	adds	r2, #222	; 0xde
 801234c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8012356:	e005      	b.n	8012364 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012358:	7bfb      	ldrb	r3, [r7, #15]
 801235a:	3301      	adds	r3, #1
 801235c:	73fb      	strb	r3, [r7, #15]
 801235e:	7bfb      	ldrb	r3, [r7, #15]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d0e5      	beq.n	8012330 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801236a:	2b00      	cmp	r3, #0
 801236c:	d016      	beq.n	801239c <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012374:	689b      	ldr	r3, [r3, #8]
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	4798      	blx	r3
 801237a:	4603      	mov	r3, r0
 801237c:	2b00      	cmp	r3, #0
 801237e:	d109      	bne.n	8012394 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2206      	movs	r2, #6
 8012384:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801238c:	2103      	movs	r1, #3
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	4798      	blx	r3
 8012392:	e006      	b.n	80123a2 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	220d      	movs	r2, #13
 8012398:	701a      	strb	r2, [r3, #0]
 801239a:	e002      	b.n	80123a2 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	220d      	movs	r2, #13
 80123a0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2205      	movs	r2, #5
 80123a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80123b6:	2200      	movs	r2, #0
 80123b8:	4619      	mov	r1, r3
 80123ba:	f7fb faf5 	bl	800d9a8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80123be:	e084      	b.n	80124ca <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d017      	beq.n	80123fa <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80123d0:	691b      	ldr	r3, [r3, #16]
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	4798      	blx	r3
 80123d6:	4603      	mov	r3, r0
 80123d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80123da:	7bbb      	ldrb	r3, [r7, #14]
 80123dc:	b2db      	uxtb	r3, r3
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d103      	bne.n	80123ea <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	220b      	movs	r2, #11
 80123e6:	701a      	strb	r2, [r3, #0]
 80123e8:	e00a      	b.n	8012400 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 80123ea:	7bbb      	ldrb	r3, [r7, #14]
 80123ec:	b2db      	uxtb	r3, r3
 80123ee:	2b02      	cmp	r3, #2
 80123f0:	d106      	bne.n	8012400 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	220d      	movs	r2, #13
 80123f6:	701a      	strb	r2, [r3, #0]
 80123f8:	e002      	b.n	8012400 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	220d      	movs	r2, #13
 80123fe:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2205      	movs	r2, #5
 8012404:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012414:	2200      	movs	r2, #0
 8012416:	4619      	mov	r1, r3
 8012418:	f7fb fac6 	bl	800d9a8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801241c:	e055      	b.n	80124ca <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012424:	2b00      	cmp	r3, #0
 8012426:	d04f      	beq.n	80124c8 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801242e:	695b      	ldr	r3, [r3, #20]
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	4798      	blx	r3
      }
      break;
 8012434:	e048      	b.n	80124c8 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2200      	movs	r2, #0
 801243a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f7ff fcec 	bl	8011e1c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801244a:	2b00      	cmp	r3, #0
 801244c:	d009      	beq.n	8012462 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012454:	68db      	ldr	r3, [r3, #12]
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	4798      	blx	r3
        phost->pActiveClass = NULL;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2200      	movs	r2, #0
 801245e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012468:	2b00      	cmp	r3, #0
 801246a:	d005      	beq.n	8012478 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012472:	2105      	movs	r1, #5
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 801247e:	b2db      	uxtb	r3, r3
 8012480:	2b01      	cmp	r3, #1
 8012482:	d107      	bne.n	8012494 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2200      	movs	r2, #0
 8012488:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f7ff fda5 	bl	8011fdc <USBH_Start>
 8012492:	e002      	b.n	801249a <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f7ff fa77 	bl	8011988 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2201      	movs	r2, #1
 801249e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80124ae:	2200      	movs	r2, #0
 80124b0:	4619      	mov	r1, r3
 80124b2:	f7fb fa79 	bl	800d9a8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80124b6:	e008      	b.n	80124ca <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 80124b8:	bf00      	nop
 80124ba:	e006      	b.n	80124ca <USBH_Process+0x4ce>
      break;
 80124bc:	bf00      	nop
 80124be:	e004      	b.n	80124ca <USBH_Process+0x4ce>
      break;
 80124c0:	bf00      	nop
 80124c2:	e002      	b.n	80124ca <USBH_Process+0x4ce>
    break;
 80124c4:	bf00      	nop
 80124c6:	e000      	b.n	80124ca <USBH_Process+0x4ce>
      break;
 80124c8:	bf00      	nop
  }
  return USBH_OK;
 80124ca:	2300      	movs	r3, #0
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3710      	adds	r7, #16
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}

080124d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b088      	sub	sp, #32
 80124d8:	af04      	add	r7, sp, #16
 80124da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80124dc:	2301      	movs	r3, #1
 80124de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80124e0:	2301      	movs	r3, #1
 80124e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	785b      	ldrb	r3, [r3, #1]
 80124e8:	2b07      	cmp	r3, #7
 80124ea:	f200 8208 	bhi.w	80128fe <USBH_HandleEnum+0x42a>
 80124ee:	a201      	add	r2, pc, #4	; (adr r2, 80124f4 <USBH_HandleEnum+0x20>)
 80124f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124f4:	08012515 	.word	0x08012515
 80124f8:	080125d3 	.word	0x080125d3
 80124fc:	0801263d 	.word	0x0801263d
 8012500:	080126cb 	.word	0x080126cb
 8012504:	08012735 	.word	0x08012735
 8012508:	080127a5 	.word	0x080127a5
 801250c:	08012841 	.word	0x08012841
 8012510:	080128bf 	.word	0x080128bf
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8012514:	2108      	movs	r1, #8
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f000 faea 	bl	8012af0 <USBH_Get_DevDesc>
 801251c:	4603      	mov	r3, r0
 801251e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012520:	7bbb      	ldrb	r3, [r7, #14]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d130      	bne.n	8012588 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	2201      	movs	r2, #1
 8012534:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	7919      	ldrb	r1, [r3, #4]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801254a:	b292      	uxth	r2, r2
 801254c:	9202      	str	r2, [sp, #8]
 801254e:	2200      	movs	r2, #0
 8012550:	9201      	str	r2, [sp, #4]
 8012552:	9300      	str	r3, [sp, #0]
 8012554:	4603      	mov	r3, r0
 8012556:	2280      	movs	r2, #128	; 0x80
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f001 f9ef 	bl	801393c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	7959      	ldrb	r1, [r3, #5]
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801256e:	687a      	ldr	r2, [r7, #4]
 8012570:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012572:	b292      	uxth	r2, r2
 8012574:	9202      	str	r2, [sp, #8]
 8012576:	2200      	movs	r2, #0
 8012578:	9201      	str	r2, [sp, #4]
 801257a:	9300      	str	r3, [sp, #0]
 801257c:	4603      	mov	r3, r0
 801257e:	2200      	movs	r2, #0
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f001 f9db 	bl	801393c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8012586:	e1bc      	b.n	8012902 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012588:	7bbb      	ldrb	r3, [r7, #14]
 801258a:	2b03      	cmp	r3, #3
 801258c:	f040 81b9 	bne.w	8012902 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8012596:	3301      	adds	r3, #1
 8012598:	b2da      	uxtb	r2, r3
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80125a6:	2b03      	cmp	r3, #3
 80125a8:	d903      	bls.n	80125b2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	220d      	movs	r2, #13
 80125ae:	701a      	strb	r2, [r3, #0]
      break;
 80125b0:	e1a7      	b.n	8012902 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	795b      	ldrb	r3, [r3, #5]
 80125b6:	4619      	mov	r1, r3
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f001 fa0f 	bl	80139dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	791b      	ldrb	r3, [r3, #4]
 80125c2:	4619      	mov	r1, r3
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f001 fa09 	bl	80139dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2200      	movs	r2, #0
 80125ce:	701a      	strb	r2, [r3, #0]
      break;
 80125d0:	e197      	b.n	8012902 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80125d2:	2112      	movs	r1, #18
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f000 fa8b 	bl	8012af0 <USBH_Get_DevDesc>
 80125da:	4603      	mov	r3, r0
 80125dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80125de:	7bbb      	ldrb	r3, [r7, #14]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d103      	bne.n	80125ec <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2202      	movs	r2, #2
 80125e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80125ea:	e18c      	b.n	8012906 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80125ec:	7bbb      	ldrb	r3, [r7, #14]
 80125ee:	2b03      	cmp	r3, #3
 80125f0:	f040 8189 	bne.w	8012906 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80125fa:	3301      	adds	r3, #1
 80125fc:	b2da      	uxtb	r2, r3
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801260a:	2b03      	cmp	r3, #3
 801260c:	d903      	bls.n	8012616 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	220d      	movs	r2, #13
 8012612:	701a      	strb	r2, [r3, #0]
      break;
 8012614:	e177      	b.n	8012906 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	795b      	ldrb	r3, [r3, #5]
 801261a:	4619      	mov	r1, r3
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f001 f9dd 	bl	80139dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	791b      	ldrb	r3, [r3, #4]
 8012626:	4619      	mov	r1, r3
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f001 f9d7 	bl	80139dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2200      	movs	r2, #0
 8012632:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	2200      	movs	r2, #0
 8012638:	701a      	strb	r2, [r3, #0]
      break;
 801263a:	e164      	b.n	8012906 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 801263c:	2101      	movs	r1, #1
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f000 fb02 	bl	8012c48 <USBH_SetAddress>
 8012644:	4603      	mov	r3, r0
 8012646:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012648:	7bbb      	ldrb	r3, [r7, #14]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d132      	bne.n	80126b4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 801264e:	2002      	movs	r0, #2
 8012650:	f7ff fb2e 	bl	8011cb0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2201      	movs	r2, #1
 8012658:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2203      	movs	r2, #3
 8012660:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	7919      	ldrb	r1, [r3, #4]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012672:	687a      	ldr	r2, [r7, #4]
 8012674:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8012676:	b292      	uxth	r2, r2
 8012678:	9202      	str	r2, [sp, #8]
 801267a:	2200      	movs	r2, #0
 801267c:	9201      	str	r2, [sp, #4]
 801267e:	9300      	str	r3, [sp, #0]
 8012680:	4603      	mov	r3, r0
 8012682:	2280      	movs	r2, #128	; 0x80
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f001 f959 	bl	801393c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	7959      	ldrb	r1, [r3, #5]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801269a:	687a      	ldr	r2, [r7, #4]
 801269c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801269e:	b292      	uxth	r2, r2
 80126a0:	9202      	str	r2, [sp, #8]
 80126a2:	2200      	movs	r2, #0
 80126a4:	9201      	str	r2, [sp, #4]
 80126a6:	9300      	str	r3, [sp, #0]
 80126a8:	4603      	mov	r3, r0
 80126aa:	2200      	movs	r2, #0
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f001 f945 	bl	801393c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80126b2:	e12a      	b.n	801290a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80126b4:	7bbb      	ldrb	r3, [r7, #14]
 80126b6:	2b03      	cmp	r3, #3
 80126b8:	f040 8127 	bne.w	801290a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	220d      	movs	r2, #13
 80126c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	2200      	movs	r2, #0
 80126c6:	705a      	strb	r2, [r3, #1]
      break;
 80126c8:	e11f      	b.n	801290a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80126ca:	2109      	movs	r1, #9
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f000 fa37 	bl	8012b40 <USBH_Get_CfgDesc>
 80126d2:	4603      	mov	r3, r0
 80126d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80126d6:	7bbb      	ldrb	r3, [r7, #14]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d103      	bne.n	80126e4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2204      	movs	r2, #4
 80126e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80126e2:	e114      	b.n	801290e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80126e4:	7bbb      	ldrb	r3, [r7, #14]
 80126e6:	2b03      	cmp	r3, #3
 80126e8:	f040 8111 	bne.w	801290e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80126f2:	3301      	adds	r3, #1
 80126f4:	b2da      	uxtb	r2, r3
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8012702:	2b03      	cmp	r3, #3
 8012704:	d903      	bls.n	801270e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	220d      	movs	r2, #13
 801270a:	701a      	strb	r2, [r3, #0]
      break;
 801270c:	e0ff      	b.n	801290e <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	795b      	ldrb	r3, [r3, #5]
 8012712:	4619      	mov	r1, r3
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f001 f961 	bl	80139dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	791b      	ldrb	r3, [r3, #4]
 801271e:	4619      	mov	r1, r3
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f001 f95b 	bl	80139dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2200      	movs	r2, #0
 801272a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2200      	movs	r2, #0
 8012730:	701a      	strb	r2, [r3, #0]
      break;
 8012732:	e0ec      	b.n	801290e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 801273a:	4619      	mov	r1, r3
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f000 f9ff 	bl	8012b40 <USBH_Get_CfgDesc>
 8012742:	4603      	mov	r3, r0
 8012744:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012746:	7bbb      	ldrb	r3, [r7, #14]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d103      	bne.n	8012754 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2205      	movs	r2, #5
 8012750:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012752:	e0de      	b.n	8012912 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012754:	7bbb      	ldrb	r3, [r7, #14]
 8012756:	2b03      	cmp	r3, #3
 8012758:	f040 80db 	bne.w	8012912 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8012762:	3301      	adds	r3, #1
 8012764:	b2da      	uxtb	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8012772:	2b03      	cmp	r3, #3
 8012774:	d903      	bls.n	801277e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	220d      	movs	r2, #13
 801277a:	701a      	strb	r2, [r3, #0]
      break;
 801277c:	e0c9      	b.n	8012912 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	795b      	ldrb	r3, [r3, #5]
 8012782:	4619      	mov	r1, r3
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f001 f929 	bl	80139dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	791b      	ldrb	r3, [r3, #4]
 801278e:	4619      	mov	r1, r3
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f001 f923 	bl	80139dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2200      	movs	r2, #0
 801279a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2200      	movs	r2, #0
 80127a0:	701a      	strb	r2, [r3, #0]
      break;
 80127a2:	e0b6      	b.n	8012912 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d036      	beq.n	801281c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80127ba:	23ff      	movs	r3, #255	; 0xff
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f000 f9e3 	bl	8012b88 <USBH_Get_StringDesc>
 80127c2:	4603      	mov	r3, r0
 80127c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80127c6:	7bbb      	ldrb	r3, [r7, #14]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d111      	bne.n	80127f0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2206      	movs	r2, #6
 80127d0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2205      	movs	r2, #5
 80127d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80127e6:	2200      	movs	r2, #0
 80127e8:	4619      	mov	r1, r3
 80127ea:	f7fb f8dd 	bl	800d9a8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80127ee:	e092      	b.n	8012916 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80127f0:	7bbb      	ldrb	r3, [r7, #14]
 80127f2:	2b03      	cmp	r3, #3
 80127f4:	f040 808f 	bne.w	8012916 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2206      	movs	r2, #6
 80127fc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2205      	movs	r2, #5
 8012802:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012812:	2200      	movs	r2, #0
 8012814:	4619      	mov	r1, r3
 8012816:	f7fb f8c7 	bl	800d9a8 <osMessagePut>
      break;
 801281a:	e07c      	b.n	8012916 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2206      	movs	r2, #6
 8012820:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2205      	movs	r2, #5
 8012826:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012836:	2200      	movs	r2, #0
 8012838:	4619      	mov	r1, r3
 801283a:	f7fb f8b5 	bl	800d9a8 <osMessagePut>
      break;
 801283e:	e06a      	b.n	8012916 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8012846:	2b00      	cmp	r3, #0
 8012848:	d027      	beq.n	801289a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8012856:	23ff      	movs	r3, #255	; 0xff
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f000 f995 	bl	8012b88 <USBH_Get_StringDesc>
 801285e:	4603      	mov	r3, r0
 8012860:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012862:	7bbb      	ldrb	r3, [r7, #14]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d103      	bne.n	8012870 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2207      	movs	r2, #7
 801286c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801286e:	e054      	b.n	801291a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012870:	7bbb      	ldrb	r3, [r7, #14]
 8012872:	2b03      	cmp	r3, #3
 8012874:	d151      	bne.n	801291a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2207      	movs	r2, #7
 801287a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2205      	movs	r2, #5
 8012880:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012890:	2200      	movs	r2, #0
 8012892:	4619      	mov	r1, r3
 8012894:	f7fb f888 	bl	800d9a8 <osMessagePut>
      break;
 8012898:	e03f      	b.n	801291a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2207      	movs	r2, #7
 801289e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2205      	movs	r2, #5
 80128a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80128b4:	2200      	movs	r2, #0
 80128b6:	4619      	mov	r1, r3
 80128b8:	f7fb f876 	bl	800d9a8 <osMessagePut>
      break;
 80128bc:	e02d      	b.n	801291a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d017      	beq.n	80128f8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80128d4:	23ff      	movs	r3, #255	; 0xff
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f000 f956 	bl	8012b88 <USBH_Get_StringDesc>
 80128dc:	4603      	mov	r3, r0
 80128de:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80128e0:	7bbb      	ldrb	r3, [r7, #14]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d102      	bne.n	80128ec <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80128e6:	2300      	movs	r3, #0
 80128e8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80128ea:	e018      	b.n	801291e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80128ec:	7bbb      	ldrb	r3, [r7, #14]
 80128ee:	2b03      	cmp	r3, #3
 80128f0:	d115      	bne.n	801291e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80128f2:	2300      	movs	r3, #0
 80128f4:	73fb      	strb	r3, [r7, #15]
      break;
 80128f6:	e012      	b.n	801291e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80128f8:	2300      	movs	r3, #0
 80128fa:	73fb      	strb	r3, [r7, #15]
      break;
 80128fc:	e00f      	b.n	801291e <USBH_HandleEnum+0x44a>

    default:
      break;
 80128fe:	bf00      	nop
 8012900:	e00e      	b.n	8012920 <USBH_HandleEnum+0x44c>
      break;
 8012902:	bf00      	nop
 8012904:	e00c      	b.n	8012920 <USBH_HandleEnum+0x44c>
      break;
 8012906:	bf00      	nop
 8012908:	e00a      	b.n	8012920 <USBH_HandleEnum+0x44c>
      break;
 801290a:	bf00      	nop
 801290c:	e008      	b.n	8012920 <USBH_HandleEnum+0x44c>
      break;
 801290e:	bf00      	nop
 8012910:	e006      	b.n	8012920 <USBH_HandleEnum+0x44c>
      break;
 8012912:	bf00      	nop
 8012914:	e004      	b.n	8012920 <USBH_HandleEnum+0x44c>
      break;
 8012916:	bf00      	nop
 8012918:	e002      	b.n	8012920 <USBH_HandleEnum+0x44c>
      break;
 801291a:	bf00      	nop
 801291c:	e000      	b.n	8012920 <USBH_HandleEnum+0x44c>
      break;
 801291e:	bf00      	nop
  }
  return Status;
 8012920:	7bfb      	ldrb	r3, [r7, #15]
}
 8012922:	4618      	mov	r0, r3
 8012924:	3710      	adds	r7, #16
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop

0801292c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 801292c:	b480      	push	{r7}
 801292e:	b083      	sub	sp, #12
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	683a      	ldr	r2, [r7, #0]
 801293a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 801293e:	bf00      	nop
 8012940:	370c      	adds	r7, #12
 8012942:	46bd      	mov	sp, r7
 8012944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012948:	4770      	bx	lr

0801294a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801294a:	b580      	push	{r7, lr}
 801294c:	b082      	sub	sp, #8
 801294e:	af00      	add	r7, sp, #0
 8012950:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8012958:	1c5a      	adds	r2, r3, #1
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f000 f804 	bl	801296e <USBH_HandleSof>
}
 8012966:	bf00      	nop
 8012968:	3708      	adds	r7, #8
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}

0801296e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801296e:	b580      	push	{r7, lr}
 8012970:	b082      	sub	sp, #8
 8012972:	af00      	add	r7, sp, #0
 8012974:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	b2db      	uxtb	r3, r3
 801297c:	2b0b      	cmp	r3, #11
 801297e:	d10a      	bne.n	8012996 <USBH_HandleSof+0x28>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012986:	2b00      	cmp	r3, #0
 8012988:	d005      	beq.n	8012996 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012990:	699b      	ldr	r3, [r3, #24]
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	4798      	blx	r3
  }
}
 8012996:	bf00      	nop
 8012998:	3708      	adds	r7, #8
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}

0801299e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801299e:	b580      	push	{r7, lr}
 80129a0:	b082      	sub	sp, #8
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2201      	movs	r2, #1
 80129aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2201      	movs	r2, #1
 80129b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80129c2:	2200      	movs	r2, #0
 80129c4:	4619      	mov	r1, r3
 80129c6:	f7fa ffef 	bl	800d9a8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80129ca:	bf00      	nop
}
 80129cc:	3708      	adds	r7, #8
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}

080129d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80129d2:	b480      	push	{r7}
 80129d4:	b083      	sub	sp, #12
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2200      	movs	r2, #0
 80129de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80129e2:	bf00      	nop
}
 80129e4:	370c      	adds	r7, #12
 80129e6:	46bd      	mov	sp, r7
 80129e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ec:	4770      	bx	lr

080129ee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80129ee:	b580      	push	{r7, lr}
 80129f0:	b082      	sub	sp, #8
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2201      	movs	r2, #1
 80129fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2200      	movs	r2, #0
 8012a02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2201      	movs	r2, #1
 8012a12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012a22:	2200      	movs	r2, #0
 8012a24:	4619      	mov	r1, r3
 8012a26:	f7fa ffbf 	bl	800d9a8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8012a2a:	2300      	movs	r3, #0
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3708      	adds	r7, #8
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2201      	movs	r2, #1
 8012a40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	2200      	movs	r2, #0
 8012a48:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2200      	movs	r2, #0
 8012a50:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f7fe ffb2 	bl	80119be <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	791b      	ldrb	r3, [r3, #4]
 8012a5e:	4619      	mov	r1, r3
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f000 ffbb 	bl	80139dc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	795b      	ldrb	r3, [r3, #5]
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f000 ffb5 	bl	80139dc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2201      	movs	r2, #1
 8012a76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012a86:	2200      	movs	r2, #0
 8012a88:	4619      	mov	r1, r3
 8012a8a:	f7fa ff8d 	bl	800d9a8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8012a8e:	2300      	movs	r3, #0
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3708      	adds	r7, #8
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b086      	sub	sp, #24
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8012aa6:	f107 030c 	add.w	r3, r7, #12
 8012aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7fa ffba 	bl	800da28 <osMessageGet>
    if (event.status == osEventMessage)
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	2b10      	cmp	r3, #16
 8012ab8:	d1f2      	bne.n	8012aa0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f7ff fa9e 	bl	8011ffc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012ac0:	e7ee      	b.n	8012aa0 <USBH_Process_OS+0x8>

08012ac2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8012ac2:	b580      	push	{r7, lr}
 8012ac4:	b082      	sub	sp, #8
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2201      	movs	r2, #1
 8012ace:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012ade:	2200      	movs	r2, #0
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	f7fa ff61 	bl	800d9a8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8012ae6:	2300      	movs	r3, #0
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3708      	adds	r7, #8
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b086      	sub	sp, #24
 8012af4:	af02      	add	r7, sp, #8
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	460b      	mov	r3, r1
 8012afa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8012b02:	78fb      	ldrb	r3, [r7, #3]
 8012b04:	b29b      	uxth	r3, r3
 8012b06:	9300      	str	r3, [sp, #0]
 8012b08:	4613      	mov	r3, r2
 8012b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012b0e:	2100      	movs	r1, #0
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f000 f864 	bl	8012bde <USBH_GetDescriptor>
 8012b16:	4603      	mov	r3, r0
 8012b18:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8012b1a:	7bfb      	ldrb	r3, [r7, #15]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d10a      	bne.n	8012b36 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f203 3026 	addw	r0, r3, #806	; 0x326
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012b2c:	78fa      	ldrb	r2, [r7, #3]
 8012b2e:	b292      	uxth	r2, r2
 8012b30:	4619      	mov	r1, r3
 8012b32:	f000 f918 	bl	8012d66 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8012b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3710      	adds	r7, #16
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b086      	sub	sp, #24
 8012b44:	af02      	add	r7, sp, #8
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	460b      	mov	r3, r1
 8012b4a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	331c      	adds	r3, #28
 8012b50:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8012b52:	887b      	ldrh	r3, [r7, #2]
 8012b54:	9300      	str	r3, [sp, #0]
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b5c:	2100      	movs	r1, #0
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f000 f83d 	bl	8012bde <USBH_GetDescriptor>
 8012b64:	4603      	mov	r3, r0
 8012b66:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8012b68:	7bfb      	ldrb	r3, [r7, #15]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d107      	bne.n	8012b7e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8012b6e:	887b      	ldrh	r3, [r7, #2]
 8012b70:	461a      	mov	r2, r3
 8012b72:	68b9      	ldr	r1, [r7, #8]
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f000 f987 	bl	8012e88 <USBH_ParseCfgDesc>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	3710      	adds	r7, #16
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}

08012b88 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b088      	sub	sp, #32
 8012b8c:	af02      	add	r7, sp, #8
 8012b8e:	60f8      	str	r0, [r7, #12]
 8012b90:	607a      	str	r2, [r7, #4]
 8012b92:	461a      	mov	r2, r3
 8012b94:	460b      	mov	r3, r1
 8012b96:	72fb      	strb	r3, [r7, #11]
 8012b98:	4613      	mov	r3, r2
 8012b9a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8012b9c:	7afb      	ldrb	r3, [r7, #11]
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8012ba4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8012bac:	893b      	ldrh	r3, [r7, #8]
 8012bae:	9300      	str	r3, [sp, #0]
 8012bb0:	460b      	mov	r3, r1
 8012bb2:	2100      	movs	r1, #0
 8012bb4:	68f8      	ldr	r0, [r7, #12]
 8012bb6:	f000 f812 	bl	8012bde <USBH_GetDescriptor>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8012bbe:	7dfb      	ldrb	r3, [r7, #23]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d107      	bne.n	8012bd4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012bca:	893a      	ldrh	r2, [r7, #8]
 8012bcc:	6879      	ldr	r1, [r7, #4]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f000 fb24 	bl	801321c <USBH_ParseStringDesc>
  }

  return status;
 8012bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3718      	adds	r7, #24
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b084      	sub	sp, #16
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	60f8      	str	r0, [r7, #12]
 8012be6:	607b      	str	r3, [r7, #4]
 8012be8:	460b      	mov	r3, r1
 8012bea:	72fb      	strb	r3, [r7, #11]
 8012bec:	4613      	mov	r3, r2
 8012bee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	789b      	ldrb	r3, [r3, #2]
 8012bf4:	2b01      	cmp	r3, #1
 8012bf6:	d11c      	bne.n	8012c32 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8012bf8:	7afb      	ldrb	r3, [r7, #11]
 8012bfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012bfe:	b2da      	uxtb	r2, r3
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2206      	movs	r2, #6
 8012c08:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	893a      	ldrh	r2, [r7, #8]
 8012c0e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8012c10:	893b      	ldrh	r3, [r7, #8]
 8012c12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012c1a:	d104      	bne.n	8012c26 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	f240 4209 	movw	r2, #1033	; 0x409
 8012c22:	829a      	strh	r2, [r3, #20]
 8012c24:	e002      	b.n	8012c2c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	8b3a      	ldrh	r2, [r7, #24]
 8012c30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8012c32:	8b3b      	ldrh	r3, [r7, #24]
 8012c34:	461a      	mov	r2, r3
 8012c36:	6879      	ldr	r1, [r7, #4]
 8012c38:	68f8      	ldr	r0, [r7, #12]
 8012c3a:	f000 fb3d 	bl	80132b8 <USBH_CtlReq>
 8012c3e:	4603      	mov	r3, r0
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3710      	adds	r7, #16
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}

08012c48 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	460b      	mov	r3, r1
 8012c52:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	789b      	ldrb	r3, [r3, #2]
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	d10f      	bne.n	8012c7c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	2200      	movs	r2, #0
 8012c60:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2205      	movs	r2, #5
 8012c66:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8012c68:	78fb      	ldrb	r3, [r7, #3]
 8012c6a:	b29a      	uxth	r2, r3
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2200      	movs	r2, #0
 8012c74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	2100      	movs	r1, #0
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f000 fb19 	bl	80132b8 <USBH_CtlReq>
 8012c86:	4603      	mov	r3, r0
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3708      	adds	r7, #8
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}

08012c90 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
 8012c98:	460b      	mov	r3, r1
 8012c9a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	789b      	ldrb	r3, [r3, #2]
 8012ca0:	2b01      	cmp	r3, #1
 8012ca2:	d10e      	bne.n	8012cc2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2209      	movs	r2, #9
 8012cae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	887a      	ldrh	r2, [r7, #2]
 8012cb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	2100      	movs	r1, #0
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f000 faf6 	bl	80132b8 <USBH_CtlReq>
 8012ccc:	4603      	mov	r3, r0
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3708      	adds	r7, #8
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}

08012cd6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8012cd6:	b580      	push	{r7, lr}
 8012cd8:	b082      	sub	sp, #8
 8012cda:	af00      	add	r7, sp, #0
 8012cdc:	6078      	str	r0, [r7, #4]
 8012cde:	460b      	mov	r3, r1
 8012ce0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	789b      	ldrb	r3, [r3, #2]
 8012ce6:	2b01      	cmp	r3, #1
 8012ce8:	d10f      	bne.n	8012d0a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2200      	movs	r2, #0
 8012cee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2203      	movs	r2, #3
 8012cf4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8012cf6:	78fb      	ldrb	r3, [r7, #3]
 8012cf8:	b29a      	uxth	r2, r3
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2200      	movs	r2, #0
 8012d02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2200      	movs	r2, #0
 8012d08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	2100      	movs	r1, #0
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f000 fad2 	bl	80132b8 <USBH_CtlReq>
 8012d14:	4603      	mov	r3, r0
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3708      	adds	r7, #8
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}

08012d1e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8012d1e:	b580      	push	{r7, lr}
 8012d20:	b082      	sub	sp, #8
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	6078      	str	r0, [r7, #4]
 8012d26:	460b      	mov	r3, r1
 8012d28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	789b      	ldrb	r3, [r3, #2]
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	d10f      	bne.n	8012d52 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2202      	movs	r2, #2
 8012d36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2201      	movs	r2, #1
 8012d3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2200      	movs	r2, #0
 8012d42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8012d44:	78fb      	ldrb	r3, [r7, #3]
 8012d46:	b29a      	uxth	r2, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8012d52:	2200      	movs	r2, #0
 8012d54:	2100      	movs	r1, #0
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f000 faae 	bl	80132b8 <USBH_CtlReq>
 8012d5c:	4603      	mov	r3, r0
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3708      	adds	r7, #8
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}

08012d66 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8012d66:	b480      	push	{r7}
 8012d68:	b085      	sub	sp, #20
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	60f8      	str	r0, [r7, #12]
 8012d6e:	60b9      	str	r1, [r7, #8]
 8012d70:	4613      	mov	r3, r2
 8012d72:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	781a      	ldrb	r2, [r3, #0]
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	785a      	ldrb	r2, [r3, #1]
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	3302      	adds	r3, #2
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	b29a      	uxth	r2, r3
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	3303      	adds	r3, #3
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	021b      	lsls	r3, r3, #8
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	4313      	orrs	r3, r2
 8012d9a:	b29a      	uxth	r2, r3
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	791a      	ldrb	r2, [r3, #4]
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	795a      	ldrb	r2, [r3, #5]
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	799a      	ldrb	r2, [r3, #6]
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8012db8:	68bb      	ldr	r3, [r7, #8]
 8012dba:	79da      	ldrb	r2, [r3, #7]
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	79db      	ldrb	r3, [r3, #7]
 8012dc4:	2b20      	cmp	r3, #32
 8012dc6:	dc11      	bgt.n	8012dec <USBH_ParseDevDesc+0x86>
 8012dc8:	2b08      	cmp	r3, #8
 8012dca:	db16      	blt.n	8012dfa <USBH_ParseDevDesc+0x94>
 8012dcc:	3b08      	subs	r3, #8
 8012dce:	2201      	movs	r2, #1
 8012dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8012dd4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8012dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	bf14      	ite	ne
 8012de0:	2301      	movne	r3, #1
 8012de2:	2300      	moveq	r3, #0
 8012de4:	b2db      	uxtb	r3, r3
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d102      	bne.n	8012df0 <USBH_ParseDevDesc+0x8a>
 8012dea:	e006      	b.n	8012dfa <USBH_ParseDevDesc+0x94>
 8012dec:	2b40      	cmp	r3, #64	; 0x40
 8012dee:	d104      	bne.n	8012dfa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	79da      	ldrb	r2, [r3, #7]
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	71da      	strb	r2, [r3, #7]
      break;
 8012df8:	e003      	b.n	8012e02 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	2240      	movs	r2, #64	; 0x40
 8012dfe:	71da      	strb	r2, [r3, #7]
      break;
 8012e00:	bf00      	nop
  }

  if (length > 8U)
 8012e02:	88fb      	ldrh	r3, [r7, #6]
 8012e04:	2b08      	cmp	r3, #8
 8012e06:	d939      	bls.n	8012e7c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	3308      	adds	r3, #8
 8012e0c:	781b      	ldrb	r3, [r3, #0]
 8012e0e:	b29a      	uxth	r2, r3
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	3309      	adds	r3, #9
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	021b      	lsls	r3, r3, #8
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	4313      	orrs	r3, r2
 8012e1e:	b29a      	uxth	r2, r3
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	330a      	adds	r3, #10
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	b29a      	uxth	r2, r3
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	330b      	adds	r3, #11
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	021b      	lsls	r3, r3, #8
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	4313      	orrs	r3, r2
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	330c      	adds	r3, #12
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	b29a      	uxth	r2, r3
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	330d      	adds	r3, #13
 8012e4c:	781b      	ldrb	r3, [r3, #0]
 8012e4e:	b29b      	uxth	r3, r3
 8012e50:	021b      	lsls	r3, r3, #8
 8012e52:	b29b      	uxth	r3, r3
 8012e54:	4313      	orrs	r3, r2
 8012e56:	b29a      	uxth	r2, r3
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	7b9a      	ldrb	r2, [r3, #14]
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8012e64:	68bb      	ldr	r3, [r7, #8]
 8012e66:	7bda      	ldrb	r2, [r3, #15]
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	7c1a      	ldrb	r2, [r3, #16]
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	7c5a      	ldrb	r2, [r3, #17]
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	745a      	strb	r2, [r3, #17]
  }
}
 8012e7c:	bf00      	nop
 8012e7e:	3714      	adds	r7, #20
 8012e80:	46bd      	mov	sp, r7
 8012e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e86:	4770      	bx	lr

08012e88 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b08c      	sub	sp, #48	; 0x30
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	60f8      	str	r0, [r7, #12]
 8012e90:	60b9      	str	r1, [r7, #8]
 8012e92:	4613      	mov	r3, r2
 8012e94:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8012e9c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	781a      	ldrb	r2, [r3, #0]
 8012ebc:	6a3b      	ldr	r3, [r7, #32]
 8012ebe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	785a      	ldrb	r2, [r3, #1]
 8012ec4:	6a3b      	ldr	r3, [r7, #32]
 8012ec6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	3302      	adds	r3, #2
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	b29a      	uxth	r2, r3
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	3303      	adds	r3, #3
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	b29b      	uxth	r3, r3
 8012ed8:	021b      	lsls	r3, r3, #8
 8012eda:	b29b      	uxth	r3, r3
 8012edc:	4313      	orrs	r3, r2
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ee4:	bf28      	it	cs
 8012ee6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8012eea:	b29a      	uxth	r2, r3
 8012eec:	6a3b      	ldr	r3, [r7, #32]
 8012eee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	791a      	ldrb	r2, [r3, #4]
 8012ef4:	6a3b      	ldr	r3, [r7, #32]
 8012ef6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	795a      	ldrb	r2, [r3, #5]
 8012efc:	6a3b      	ldr	r3, [r7, #32]
 8012efe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	799a      	ldrb	r2, [r3, #6]
 8012f04:	6a3b      	ldr	r3, [r7, #32]
 8012f06:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	79da      	ldrb	r2, [r3, #7]
 8012f0c:	6a3b      	ldr	r3, [r7, #32]
 8012f0e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	7a1a      	ldrb	r2, [r3, #8]
 8012f14:	6a3b      	ldr	r3, [r7, #32]
 8012f16:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8012f18:	6a3b      	ldr	r3, [r7, #32]
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	2b09      	cmp	r3, #9
 8012f1e:	d002      	beq.n	8012f26 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8012f20:	6a3b      	ldr	r3, [r7, #32]
 8012f22:	2209      	movs	r2, #9
 8012f24:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8012f26:	88fb      	ldrh	r3, [r7, #6]
 8012f28:	2b09      	cmp	r3, #9
 8012f2a:	f240 809d 	bls.w	8013068 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8012f2e:	2309      	movs	r3, #9
 8012f30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8012f32:	2300      	movs	r3, #0
 8012f34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8012f36:	e081      	b.n	801303c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8012f38:	f107 0316 	add.w	r3, r7, #22
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f40:	f000 f99f 	bl	8013282 <USBH_GetNextDesc>
 8012f44:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8012f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f48:	785b      	ldrb	r3, [r3, #1]
 8012f4a:	2b04      	cmp	r3, #4
 8012f4c:	d176      	bne.n	801303c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8012f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	2b09      	cmp	r3, #9
 8012f54:	d002      	beq.n	8012f5c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8012f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f58:	2209      	movs	r2, #9
 8012f5a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8012f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f60:	221a      	movs	r2, #26
 8012f62:	fb02 f303 	mul.w	r3, r2, r3
 8012f66:	3308      	adds	r3, #8
 8012f68:	6a3a      	ldr	r2, [r7, #32]
 8012f6a:	4413      	add	r3, r2
 8012f6c:	3302      	adds	r3, #2
 8012f6e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8012f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012f72:	69f8      	ldr	r0, [r7, #28]
 8012f74:	f000 f87e 	bl	8013074 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8012f7e:	2300      	movs	r3, #0
 8012f80:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8012f82:	e043      	b.n	801300c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8012f84:	f107 0316 	add.w	r3, r7, #22
 8012f88:	4619      	mov	r1, r3
 8012f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f8c:	f000 f979 	bl	8013282 <USBH_GetNextDesc>
 8012f90:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f94:	785b      	ldrb	r3, [r3, #1]
 8012f96:	2b05      	cmp	r3, #5
 8012f98:	d138      	bne.n	801300c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8012f9a:	69fb      	ldr	r3, [r7, #28]
 8012f9c:	795b      	ldrb	r3, [r3, #5]
 8012f9e:	2b01      	cmp	r3, #1
 8012fa0:	d10f      	bne.n	8012fc2 <USBH_ParseCfgDesc+0x13a>
 8012fa2:	69fb      	ldr	r3, [r7, #28]
 8012fa4:	799b      	ldrb	r3, [r3, #6]
 8012fa6:	2b02      	cmp	r3, #2
 8012fa8:	d10b      	bne.n	8012fc2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8012faa:	69fb      	ldr	r3, [r7, #28]
 8012fac:	79db      	ldrb	r3, [r3, #7]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d10f      	bne.n	8012fd2 <USBH_ParseCfgDesc+0x14a>
 8012fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb4:	781b      	ldrb	r3, [r3, #0]
 8012fb6:	2b09      	cmp	r3, #9
 8012fb8:	d00b      	beq.n	8012fd2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8012fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fbc:	2209      	movs	r2, #9
 8012fbe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8012fc0:	e007      	b.n	8012fd2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8012fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	2b07      	cmp	r3, #7
 8012fc8:	d004      	beq.n	8012fd4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8012fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fcc:	2207      	movs	r2, #7
 8012fce:	701a      	strb	r2, [r3, #0]
 8012fd0:	e000      	b.n	8012fd4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8012fd2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8012fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fd8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012fdc:	3201      	adds	r2, #1
 8012fde:	00d2      	lsls	r2, r2, #3
 8012fe0:	211a      	movs	r1, #26
 8012fe2:	fb01 f303 	mul.w	r3, r1, r3
 8012fe6:	4413      	add	r3, r2
 8012fe8:	3308      	adds	r3, #8
 8012fea:	6a3a      	ldr	r2, [r7, #32]
 8012fec:	4413      	add	r3, r2
 8012fee:	3304      	adds	r3, #4
 8012ff0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8012ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ff4:	69b9      	ldr	r1, [r7, #24]
 8012ff6:	68f8      	ldr	r0, [r7, #12]
 8012ff8:	f000 f86b 	bl	80130d2 <USBH_ParseEPDesc>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8013002:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013006:	3301      	adds	r3, #1
 8013008:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	791b      	ldrb	r3, [r3, #4]
 8013010:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8013014:	429a      	cmp	r2, r3
 8013016:	d204      	bcs.n	8013022 <USBH_ParseCfgDesc+0x19a>
 8013018:	6a3b      	ldr	r3, [r7, #32]
 801301a:	885a      	ldrh	r2, [r3, #2]
 801301c:	8afb      	ldrh	r3, [r7, #22]
 801301e:	429a      	cmp	r2, r3
 8013020:	d8b0      	bhi.n	8012f84 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8013022:	69fb      	ldr	r3, [r7, #28]
 8013024:	791b      	ldrb	r3, [r3, #4]
 8013026:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801302a:	429a      	cmp	r2, r3
 801302c:	d201      	bcs.n	8013032 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 801302e:	2303      	movs	r3, #3
 8013030:	e01c      	b.n	801306c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8013032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013036:	3301      	adds	r3, #1
 8013038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801303c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013040:	2b01      	cmp	r3, #1
 8013042:	d805      	bhi.n	8013050 <USBH_ParseCfgDesc+0x1c8>
 8013044:	6a3b      	ldr	r3, [r7, #32]
 8013046:	885a      	ldrh	r2, [r3, #2]
 8013048:	8afb      	ldrh	r3, [r7, #22]
 801304a:	429a      	cmp	r2, r3
 801304c:	f63f af74 	bhi.w	8012f38 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8013050:	6a3b      	ldr	r3, [r7, #32]
 8013052:	791b      	ldrb	r3, [r3, #4]
 8013054:	2b02      	cmp	r3, #2
 8013056:	bf28      	it	cs
 8013058:	2302      	movcs	r3, #2
 801305a:	b2db      	uxtb	r3, r3
 801305c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013060:	429a      	cmp	r2, r3
 8013062:	d201      	bcs.n	8013068 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8013064:	2303      	movs	r3, #3
 8013066:	e001      	b.n	801306c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8013068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801306c:	4618      	mov	r0, r3
 801306e:	3730      	adds	r7, #48	; 0x30
 8013070:	46bd      	mov	sp, r7
 8013072:	bd80      	pop	{r7, pc}

08013074 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8013074:	b480      	push	{r7}
 8013076:	b083      	sub	sp, #12
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	781a      	ldrb	r2, [r3, #0]
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	785a      	ldrb	r2, [r3, #1]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	789a      	ldrb	r2, [r3, #2]
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	78da      	ldrb	r2, [r3, #3]
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	791a      	ldrb	r2, [r3, #4]
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	795a      	ldrb	r2, [r3, #5]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	799a      	ldrb	r2, [r3, #6]
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	79da      	ldrb	r2, [r3, #7]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	7a1a      	ldrb	r2, [r3, #8]
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	721a      	strb	r2, [r3, #8]
}
 80130c6:	bf00      	nop
 80130c8:	370c      	adds	r7, #12
 80130ca:	46bd      	mov	sp, r7
 80130cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d0:	4770      	bx	lr

080130d2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80130d2:	b480      	push	{r7}
 80130d4:	b087      	sub	sp, #28
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	60f8      	str	r0, [r7, #12]
 80130da:	60b9      	str	r1, [r7, #8]
 80130dc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80130de:	2300      	movs	r3, #0
 80130e0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	781a      	ldrb	r2, [r3, #0]
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	785a      	ldrb	r2, [r3, #1]
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	789a      	ldrb	r2, [r3, #2]
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	78da      	ldrb	r2, [r3, #3]
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	3304      	adds	r3, #4
 8013106:	781b      	ldrb	r3, [r3, #0]
 8013108:	b29a      	uxth	r2, r3
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	3305      	adds	r3, #5
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	b29b      	uxth	r3, r3
 8013112:	021b      	lsls	r3, r3, #8
 8013114:	b29b      	uxth	r3, r3
 8013116:	4313      	orrs	r3, r2
 8013118:	b29a      	uxth	r2, r3
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	799a      	ldrb	r2, [r3, #6]
 8013122:	68bb      	ldr	r3, [r7, #8]
 8013124:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	889b      	ldrh	r3, [r3, #4]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d102      	bne.n	8013134 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 801312e:	2303      	movs	r3, #3
 8013130:	75fb      	strb	r3, [r7, #23]
 8013132:	e033      	b.n	801319c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	889b      	ldrh	r3, [r3, #4]
 8013138:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801313c:	f023 0307 	bic.w	r3, r3, #7
 8013140:	b29a      	uxth	r2, r3
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	889b      	ldrh	r3, [r3, #4]
 801314a:	b21a      	sxth	r2, r3
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	3304      	adds	r3, #4
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	b299      	uxth	r1, r3
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	3305      	adds	r3, #5
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	b29b      	uxth	r3, r3
 801315c:	021b      	lsls	r3, r3, #8
 801315e:	b29b      	uxth	r3, r3
 8013160:	430b      	orrs	r3, r1
 8013162:	b29b      	uxth	r3, r3
 8013164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013168:	2b00      	cmp	r3, #0
 801316a:	d110      	bne.n	801318e <USBH_ParseEPDesc+0xbc>
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	3304      	adds	r3, #4
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	b299      	uxth	r1, r3
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	3305      	adds	r3, #5
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	b29b      	uxth	r3, r3
 801317c:	021b      	lsls	r3, r3, #8
 801317e:	b29b      	uxth	r3, r3
 8013180:	430b      	orrs	r3, r1
 8013182:	b29b      	uxth	r3, r3
 8013184:	b21b      	sxth	r3, r3
 8013186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801318a:	b21b      	sxth	r3, r3
 801318c:	e001      	b.n	8013192 <USBH_ParseEPDesc+0xc0>
 801318e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013192:	4313      	orrs	r3, r2
 8013194:	b21b      	sxth	r3, r3
 8013196:	b29a      	uxth	r2, r3
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d116      	bne.n	80131d4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	78db      	ldrb	r3, [r3, #3]
 80131aa:	f003 0303 	and.w	r3, r3, #3
 80131ae:	2b01      	cmp	r3, #1
 80131b0:	d005      	beq.n	80131be <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	78db      	ldrb	r3, [r3, #3]
 80131b6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80131ba:	2b03      	cmp	r3, #3
 80131bc:	d127      	bne.n	801320e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	799b      	ldrb	r3, [r3, #6]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d003      	beq.n	80131ce <USBH_ParseEPDesc+0xfc>
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	799b      	ldrb	r3, [r3, #6]
 80131ca:	2b10      	cmp	r3, #16
 80131cc:	d91f      	bls.n	801320e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80131ce:	2303      	movs	r3, #3
 80131d0:	75fb      	strb	r3, [r7, #23]
 80131d2:	e01c      	b.n	801320e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	78db      	ldrb	r3, [r3, #3]
 80131d8:	f003 0303 	and.w	r3, r3, #3
 80131dc:	2b01      	cmp	r3, #1
 80131de:	d10a      	bne.n	80131f6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	799b      	ldrb	r3, [r3, #6]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d003      	beq.n	80131f0 <USBH_ParseEPDesc+0x11e>
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	799b      	ldrb	r3, [r3, #6]
 80131ec:	2b10      	cmp	r3, #16
 80131ee:	d90e      	bls.n	801320e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80131f0:	2303      	movs	r3, #3
 80131f2:	75fb      	strb	r3, [r7, #23]
 80131f4:	e00b      	b.n	801320e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	78db      	ldrb	r3, [r3, #3]
 80131fa:	f003 0303 	and.w	r3, r3, #3
 80131fe:	2b03      	cmp	r3, #3
 8013200:	d105      	bne.n	801320e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	799b      	ldrb	r3, [r3, #6]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d101      	bne.n	801320e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 801320a:	2303      	movs	r3, #3
 801320c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 801320e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013210:	4618      	mov	r0, r3
 8013212:	371c      	adds	r7, #28
 8013214:	46bd      	mov	sp, r7
 8013216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321a:	4770      	bx	lr

0801321c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801321c:	b480      	push	{r7}
 801321e:	b087      	sub	sp, #28
 8013220:	af00      	add	r7, sp, #0
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	4613      	mov	r3, r2
 8013228:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	3301      	adds	r3, #1
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	2b03      	cmp	r3, #3
 8013232:	d120      	bne.n	8013276 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	1e9a      	subs	r2, r3, #2
 801323a:	88fb      	ldrh	r3, [r7, #6]
 801323c:	4293      	cmp	r3, r2
 801323e:	bf28      	it	cs
 8013240:	4613      	movcs	r3, r2
 8013242:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	3302      	adds	r3, #2
 8013248:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801324a:	2300      	movs	r3, #0
 801324c:	82fb      	strh	r3, [r7, #22]
 801324e:	e00b      	b.n	8013268 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8013250:	8afb      	ldrh	r3, [r7, #22]
 8013252:	68fa      	ldr	r2, [r7, #12]
 8013254:	4413      	add	r3, r2
 8013256:	781a      	ldrb	r2, [r3, #0]
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	701a      	strb	r2, [r3, #0]
      pdest++;
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	3301      	adds	r3, #1
 8013260:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8013262:	8afb      	ldrh	r3, [r7, #22]
 8013264:	3302      	adds	r3, #2
 8013266:	82fb      	strh	r3, [r7, #22]
 8013268:	8afa      	ldrh	r2, [r7, #22]
 801326a:	8abb      	ldrh	r3, [r7, #20]
 801326c:	429a      	cmp	r2, r3
 801326e:	d3ef      	bcc.n	8013250 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	2200      	movs	r2, #0
 8013274:	701a      	strb	r2, [r3, #0]
  }
}
 8013276:	bf00      	nop
 8013278:	371c      	adds	r7, #28
 801327a:	46bd      	mov	sp, r7
 801327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013280:	4770      	bx	lr

08013282 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8013282:	b480      	push	{r7}
 8013284:	b085      	sub	sp, #20
 8013286:	af00      	add	r7, sp, #0
 8013288:	6078      	str	r0, [r7, #4]
 801328a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	881a      	ldrh	r2, [r3, #0]
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	781b      	ldrb	r3, [r3, #0]
 8013294:	b29b      	uxth	r3, r3
 8013296:	4413      	add	r3, r2
 8013298:	b29a      	uxth	r2, r3
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	4413      	add	r3, r2
 80132a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80132aa:	68fb      	ldr	r3, [r7, #12]
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3714      	adds	r7, #20
 80132b0:	46bd      	mov	sp, r7
 80132b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b6:	4770      	bx	lr

080132b8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b086      	sub	sp, #24
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	60b9      	str	r1, [r7, #8]
 80132c2:	4613      	mov	r3, r2
 80132c4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80132c6:	2301      	movs	r3, #1
 80132c8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	789b      	ldrb	r3, [r3, #2]
 80132ce:	2b01      	cmp	r3, #1
 80132d0:	d002      	beq.n	80132d8 <USBH_CtlReq+0x20>
 80132d2:	2b02      	cmp	r3, #2
 80132d4:	d01d      	beq.n	8013312 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80132d6:	e043      	b.n	8013360 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	68ba      	ldr	r2, [r7, #8]
 80132dc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	88fa      	ldrh	r2, [r7, #6]
 80132e2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2201      	movs	r2, #1
 80132e8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	2202      	movs	r2, #2
 80132ee:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80132f0:	2301      	movs	r3, #1
 80132f2:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	2203      	movs	r2, #3
 80132f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013308:	2200      	movs	r2, #0
 801330a:	4619      	mov	r1, r3
 801330c:	f7fa fb4c 	bl	800d9a8 <osMessagePut>
      break;
 8013310:	e026      	b.n	8013360 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8013312:	68f8      	ldr	r0, [r7, #12]
 8013314:	f000 f82a 	bl	801336c <USBH_HandleControl>
 8013318:	4603      	mov	r3, r0
 801331a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801331c:	7dfb      	ldrb	r3, [r7, #23]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d002      	beq.n	8013328 <USBH_CtlReq+0x70>
 8013322:	7dfb      	ldrb	r3, [r7, #23]
 8013324:	2b03      	cmp	r3, #3
 8013326:	d106      	bne.n	8013336 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	2201      	movs	r2, #1
 801332c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2200      	movs	r2, #0
 8013332:	761a      	strb	r2, [r3, #24]
 8013334:	e005      	b.n	8013342 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8013336:	7dfb      	ldrb	r3, [r7, #23]
 8013338:	2b02      	cmp	r3, #2
 801333a:	d102      	bne.n	8013342 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	2201      	movs	r2, #1
 8013340:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	2203      	movs	r2, #3
 8013346:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013356:	2200      	movs	r2, #0
 8013358:	4619      	mov	r1, r3
 801335a:	f7fa fb25 	bl	800d9a8 <osMessagePut>
      break;
 801335e:	bf00      	nop
  }
  return status;
 8013360:	7dfb      	ldrb	r3, [r7, #23]
}
 8013362:	4618      	mov	r0, r3
 8013364:	3718      	adds	r7, #24
 8013366:	46bd      	mov	sp, r7
 8013368:	bd80      	pop	{r7, pc}
	...

0801336c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b086      	sub	sp, #24
 8013370:	af02      	add	r7, sp, #8
 8013372:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8013374:	2301      	movs	r3, #1
 8013376:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013378:	2300      	movs	r3, #0
 801337a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	7e1b      	ldrb	r3, [r3, #24]
 8013380:	3b01      	subs	r3, #1
 8013382:	2b0a      	cmp	r3, #10
 8013384:	f200 8229 	bhi.w	80137da <USBH_HandleControl+0x46e>
 8013388:	a201      	add	r2, pc, #4	; (adr r2, 8013390 <USBH_HandleControl+0x24>)
 801338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801338e:	bf00      	nop
 8013390:	080133bd 	.word	0x080133bd
 8013394:	080133d7 	.word	0x080133d7
 8013398:	08013479 	.word	0x08013479
 801339c:	0801349f 	.word	0x0801349f
 80133a0:	0801352b 	.word	0x0801352b
 80133a4:	08013555 	.word	0x08013555
 80133a8:	08013617 	.word	0x08013617
 80133ac:	08013639 	.word	0x08013639
 80133b0:	080136cb 	.word	0x080136cb
 80133b4:	080136f1 	.word	0x080136f1
 80133b8:	08013783 	.word	0x08013783
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	f103 0110 	add.w	r1, r3, #16
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	795b      	ldrb	r3, [r3, #5]
 80133c6:	461a      	mov	r2, r3
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f000 fa17 	bl	80137fc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2202      	movs	r2, #2
 80133d2:	761a      	strb	r2, [r3, #24]
      break;
 80133d4:	e20c      	b.n	80137f0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	795b      	ldrb	r3, [r3, #5]
 80133da:	4619      	mov	r1, r3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7fe fbdd 	bl	8011b9c <USBH_LL_GetURBState>
 80133e2:	4603      	mov	r3, r0
 80133e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80133e6:	7bbb      	ldrb	r3, [r7, #14]
 80133e8:	2b01      	cmp	r3, #1
 80133ea:	d12c      	bne.n	8013446 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	7c1b      	ldrb	r3, [r3, #16]
 80133f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80133f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	8adb      	ldrh	r3, [r3, #22]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d00a      	beq.n	8013414 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80133fe:	7b7b      	ldrb	r3, [r7, #13]
 8013400:	2b80      	cmp	r3, #128	; 0x80
 8013402:	d103      	bne.n	801340c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2203      	movs	r2, #3
 8013408:	761a      	strb	r2, [r3, #24]
 801340a:	e00d      	b.n	8013428 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2205      	movs	r2, #5
 8013410:	761a      	strb	r2, [r3, #24]
 8013412:	e009      	b.n	8013428 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8013414:	7b7b      	ldrb	r3, [r7, #13]
 8013416:	2b80      	cmp	r3, #128	; 0x80
 8013418:	d103      	bne.n	8013422 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2209      	movs	r2, #9
 801341e:	761a      	strb	r2, [r3, #24]
 8013420:	e002      	b.n	8013428 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2207      	movs	r2, #7
 8013426:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2203      	movs	r2, #3
 801342c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801343c:	2200      	movs	r2, #0
 801343e:	4619      	mov	r1, r3
 8013440:	f7fa fab2 	bl	800d9a8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8013444:	e1cb      	b.n	80137de <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8013446:	7bbb      	ldrb	r3, [r7, #14]
 8013448:	2b04      	cmp	r3, #4
 801344a:	d003      	beq.n	8013454 <USBH_HandleControl+0xe8>
 801344c:	7bbb      	ldrb	r3, [r7, #14]
 801344e:	2b02      	cmp	r3, #2
 8013450:	f040 81c5 	bne.w	80137de <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	220b      	movs	r2, #11
 8013458:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2203      	movs	r2, #3
 801345e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801346e:	2200      	movs	r2, #0
 8013470:	4619      	mov	r1, r3
 8013472:	f7fa fa99 	bl	800d9a8 <osMessagePut>
      break;
 8013476:	e1b2      	b.n	80137de <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801347e:	b29a      	uxth	r2, r3
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	6899      	ldr	r1, [r3, #8]
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	899a      	ldrh	r2, [r3, #12]
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	791b      	ldrb	r3, [r3, #4]
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f000 f9f2 	bl	801387a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	2204      	movs	r2, #4
 801349a:	761a      	strb	r2, [r3, #24]
      break;
 801349c:	e1a8      	b.n	80137f0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	791b      	ldrb	r3, [r3, #4]
 80134a2:	4619      	mov	r1, r3
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f7fe fb79 	bl	8011b9c <USBH_LL_GetURBState>
 80134aa:	4603      	mov	r3, r0
 80134ac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80134ae:	7bbb      	ldrb	r3, [r7, #14]
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d110      	bne.n	80134d6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2209      	movs	r2, #9
 80134b8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	2203      	movs	r2, #3
 80134be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80134ce:	2200      	movs	r2, #0
 80134d0:	4619      	mov	r1, r3
 80134d2:	f7fa fa69 	bl	800d9a8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80134d6:	7bbb      	ldrb	r3, [r7, #14]
 80134d8:	2b05      	cmp	r3, #5
 80134da:	d110      	bne.n	80134fe <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80134dc:	2303      	movs	r3, #3
 80134de:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2203      	movs	r2, #3
 80134e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80134f4:	2200      	movs	r2, #0
 80134f6:	4619      	mov	r1, r3
 80134f8:	f7fa fa56 	bl	800d9a8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80134fc:	e171      	b.n	80137e2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80134fe:	7bbb      	ldrb	r3, [r7, #14]
 8013500:	2b04      	cmp	r3, #4
 8013502:	f040 816e 	bne.w	80137e2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	220b      	movs	r2, #11
 801350a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2203      	movs	r2, #3
 8013510:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013520:	2200      	movs	r2, #0
 8013522:	4619      	mov	r1, r3
 8013524:	f7fa fa40 	bl	800d9a8 <osMessagePut>
      break;
 8013528:	e15b      	b.n	80137e2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6899      	ldr	r1, [r3, #8]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	899a      	ldrh	r2, [r3, #12]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	795b      	ldrb	r3, [r3, #5]
 8013536:	2001      	movs	r0, #1
 8013538:	9000      	str	r0, [sp, #0]
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f000 f978 	bl	8013830 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8013546:	b29a      	uxth	r2, r3
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2206      	movs	r2, #6
 8013550:	761a      	strb	r2, [r3, #24]
      break;
 8013552:	e14d      	b.n	80137f0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	795b      	ldrb	r3, [r3, #5]
 8013558:	4619      	mov	r1, r3
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f7fe fb1e 	bl	8011b9c <USBH_LL_GetURBState>
 8013560:	4603      	mov	r3, r0
 8013562:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013564:	7bbb      	ldrb	r3, [r7, #14]
 8013566:	2b01      	cmp	r3, #1
 8013568:	d111      	bne.n	801358e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2207      	movs	r2, #7
 801356e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2203      	movs	r2, #3
 8013574:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013584:	2200      	movs	r2, #0
 8013586:	4619      	mov	r1, r3
 8013588:	f7fa fa0e 	bl	800d9a8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801358c:	e12b      	b.n	80137e6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 801358e:	7bbb      	ldrb	r3, [r7, #14]
 8013590:	2b05      	cmp	r3, #5
 8013592:	d113      	bne.n	80135bc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	220c      	movs	r2, #12
 8013598:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801359a:	2303      	movs	r3, #3
 801359c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2203      	movs	r2, #3
 80135a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80135b2:	2200      	movs	r2, #0
 80135b4:	4619      	mov	r1, r3
 80135b6:	f7fa f9f7 	bl	800d9a8 <osMessagePut>
      break;
 80135ba:	e114      	b.n	80137e6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80135bc:	7bbb      	ldrb	r3, [r7, #14]
 80135be:	2b02      	cmp	r3, #2
 80135c0:	d111      	bne.n	80135e6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2205      	movs	r2, #5
 80135c6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2203      	movs	r2, #3
 80135cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80135dc:	2200      	movs	r2, #0
 80135de:	4619      	mov	r1, r3
 80135e0:	f7fa f9e2 	bl	800d9a8 <osMessagePut>
      break;
 80135e4:	e0ff      	b.n	80137e6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80135e6:	7bbb      	ldrb	r3, [r7, #14]
 80135e8:	2b04      	cmp	r3, #4
 80135ea:	f040 80fc 	bne.w	80137e6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	220b      	movs	r2, #11
 80135f2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80135f4:	2302      	movs	r3, #2
 80135f6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2203      	movs	r2, #3
 80135fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801360c:	2200      	movs	r2, #0
 801360e:	4619      	mov	r1, r3
 8013610:	f7fa f9ca 	bl	800d9a8 <osMessagePut>
      break;
 8013614:	e0e7      	b.n	80137e6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	791b      	ldrb	r3, [r3, #4]
 801361a:	2200      	movs	r2, #0
 801361c:	2100      	movs	r1, #0
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	f000 f92b 	bl	801387a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801362a:	b29a      	uxth	r2, r3
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2208      	movs	r2, #8
 8013634:	761a      	strb	r2, [r3, #24]

      break;
 8013636:	e0db      	b.n	80137f0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	791b      	ldrb	r3, [r3, #4]
 801363c:	4619      	mov	r1, r3
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f7fe faac 	bl	8011b9c <USBH_LL_GetURBState>
 8013644:	4603      	mov	r3, r0
 8013646:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013648:	7bbb      	ldrb	r3, [r7, #14]
 801364a:	2b01      	cmp	r3, #1
 801364c:	d113      	bne.n	8013676 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	220d      	movs	r2, #13
 8013652:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8013654:	2300      	movs	r3, #0
 8013656:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2203      	movs	r2, #3
 801365c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801366c:	2200      	movs	r2, #0
 801366e:	4619      	mov	r1, r3
 8013670:	f7fa f99a 	bl	800d9a8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8013674:	e0b9      	b.n	80137ea <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8013676:	7bbb      	ldrb	r3, [r7, #14]
 8013678:	2b04      	cmp	r3, #4
 801367a:	d111      	bne.n	80136a0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	220b      	movs	r2, #11
 8013680:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2203      	movs	r2, #3
 8013686:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013696:	2200      	movs	r2, #0
 8013698:	4619      	mov	r1, r3
 801369a:	f7fa f985 	bl	800d9a8 <osMessagePut>
      break;
 801369e:	e0a4      	b.n	80137ea <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80136a0:	7bbb      	ldrb	r3, [r7, #14]
 80136a2:	2b05      	cmp	r3, #5
 80136a4:	f040 80a1 	bne.w	80137ea <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80136a8:	2303      	movs	r3, #3
 80136aa:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2203      	movs	r2, #3
 80136b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80136c0:	2200      	movs	r2, #0
 80136c2:	4619      	mov	r1, r3
 80136c4:	f7fa f970 	bl	800d9a8 <osMessagePut>
      break;
 80136c8:	e08f      	b.n	80137ea <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	795b      	ldrb	r3, [r3, #5]
 80136ce:	2201      	movs	r2, #1
 80136d0:	9200      	str	r2, [sp, #0]
 80136d2:	2200      	movs	r2, #0
 80136d4:	2100      	movs	r1, #0
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f000 f8aa 	bl	8013830 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80136e2:	b29a      	uxth	r2, r3
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	220a      	movs	r2, #10
 80136ec:	761a      	strb	r2, [r3, #24]
      break;
 80136ee:	e07f      	b.n	80137f0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	795b      	ldrb	r3, [r3, #5]
 80136f4:	4619      	mov	r1, r3
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f7fe fa50 	bl	8011b9c <USBH_LL_GetURBState>
 80136fc:	4603      	mov	r3, r0
 80136fe:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8013700:	7bbb      	ldrb	r3, [r7, #14]
 8013702:	2b01      	cmp	r3, #1
 8013704:	d113      	bne.n	801372e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8013706:	2300      	movs	r3, #0
 8013708:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	220d      	movs	r2, #13
 801370e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2203      	movs	r2, #3
 8013714:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013724:	2200      	movs	r2, #0
 8013726:	4619      	mov	r1, r3
 8013728:	f7fa f93e 	bl	800d9a8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801372c:	e05f      	b.n	80137ee <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 801372e:	7bbb      	ldrb	r3, [r7, #14]
 8013730:	2b02      	cmp	r3, #2
 8013732:	d111      	bne.n	8013758 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2209      	movs	r2, #9
 8013738:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2203      	movs	r2, #3
 801373e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801374e:	2200      	movs	r2, #0
 8013750:	4619      	mov	r1, r3
 8013752:	f7fa f929 	bl	800d9a8 <osMessagePut>
      break;
 8013756:	e04a      	b.n	80137ee <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8013758:	7bbb      	ldrb	r3, [r7, #14]
 801375a:	2b04      	cmp	r3, #4
 801375c:	d147      	bne.n	80137ee <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	220b      	movs	r2, #11
 8013762:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2203      	movs	r2, #3
 8013768:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013778:	2200      	movs	r2, #0
 801377a:	4619      	mov	r1, r3
 801377c:	f7fa f914 	bl	800d9a8 <osMessagePut>
      break;
 8013780:	e035      	b.n	80137ee <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	7e5b      	ldrb	r3, [r3, #25]
 8013786:	3301      	adds	r3, #1
 8013788:	b2da      	uxtb	r2, r3
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	765a      	strb	r2, [r3, #25]
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	7e5b      	ldrb	r3, [r3, #25]
 8013792:	2b02      	cmp	r3, #2
 8013794:	d806      	bhi.n	80137a4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2201      	movs	r2, #1
 801379a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2201      	movs	r2, #1
 80137a0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80137a2:	e025      	b.n	80137f0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80137aa:	2106      	movs	r1, #6
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2200      	movs	r2, #0
 80137b4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	795b      	ldrb	r3, [r3, #5]
 80137ba:	4619      	mov	r1, r3
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f000 f90d 	bl	80139dc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	791b      	ldrb	r3, [r3, #4]
 80137c6:	4619      	mov	r1, r3
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f000 f907 	bl	80139dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	2200      	movs	r2, #0
 80137d2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80137d4:	2302      	movs	r3, #2
 80137d6:	73fb      	strb	r3, [r7, #15]
      break;
 80137d8:	e00a      	b.n	80137f0 <USBH_HandleControl+0x484>

    default:
      break;
 80137da:	bf00      	nop
 80137dc:	e008      	b.n	80137f0 <USBH_HandleControl+0x484>
      break;
 80137de:	bf00      	nop
 80137e0:	e006      	b.n	80137f0 <USBH_HandleControl+0x484>
      break;
 80137e2:	bf00      	nop
 80137e4:	e004      	b.n	80137f0 <USBH_HandleControl+0x484>
      break;
 80137e6:	bf00      	nop
 80137e8:	e002      	b.n	80137f0 <USBH_HandleControl+0x484>
      break;
 80137ea:	bf00      	nop
 80137ec:	e000      	b.n	80137f0 <USBH_HandleControl+0x484>
      break;
 80137ee:	bf00      	nop
  }

  return status;
 80137f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80137f2:	4618      	mov	r0, r3
 80137f4:	3710      	adds	r7, #16
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}
 80137fa:	bf00      	nop

080137fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b088      	sub	sp, #32
 8013800:	af04      	add	r7, sp, #16
 8013802:	60f8      	str	r0, [r7, #12]
 8013804:	60b9      	str	r1, [r7, #8]
 8013806:	4613      	mov	r3, r2
 8013808:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801380a:	79f9      	ldrb	r1, [r7, #7]
 801380c:	2300      	movs	r3, #0
 801380e:	9303      	str	r3, [sp, #12]
 8013810:	2308      	movs	r3, #8
 8013812:	9302      	str	r3, [sp, #8]
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	9301      	str	r3, [sp, #4]
 8013818:	2300      	movs	r3, #0
 801381a:	9300      	str	r3, [sp, #0]
 801381c:	2300      	movs	r3, #0
 801381e:	2200      	movs	r2, #0
 8013820:	68f8      	ldr	r0, [r7, #12]
 8013822:	f7fe f98a 	bl	8011b3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8013826:	2300      	movs	r3, #0
}
 8013828:	4618      	mov	r0, r3
 801382a:	3710      	adds	r7, #16
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}

08013830 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b088      	sub	sp, #32
 8013834:	af04      	add	r7, sp, #16
 8013836:	60f8      	str	r0, [r7, #12]
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	4611      	mov	r1, r2
 801383c:	461a      	mov	r2, r3
 801383e:	460b      	mov	r3, r1
 8013840:	80fb      	strh	r3, [r7, #6]
 8013842:	4613      	mov	r3, r2
 8013844:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801384c:	2b00      	cmp	r3, #0
 801384e:	d001      	beq.n	8013854 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8013850:	2300      	movs	r3, #0
 8013852:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013854:	7979      	ldrb	r1, [r7, #5]
 8013856:	7e3b      	ldrb	r3, [r7, #24]
 8013858:	9303      	str	r3, [sp, #12]
 801385a:	88fb      	ldrh	r3, [r7, #6]
 801385c:	9302      	str	r3, [sp, #8]
 801385e:	68bb      	ldr	r3, [r7, #8]
 8013860:	9301      	str	r3, [sp, #4]
 8013862:	2301      	movs	r3, #1
 8013864:	9300      	str	r3, [sp, #0]
 8013866:	2300      	movs	r3, #0
 8013868:	2200      	movs	r2, #0
 801386a:	68f8      	ldr	r0, [r7, #12]
 801386c:	f7fe f965 	bl	8011b3a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8013870:	2300      	movs	r3, #0
}
 8013872:	4618      	mov	r0, r3
 8013874:	3710      	adds	r7, #16
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}

0801387a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801387a:	b580      	push	{r7, lr}
 801387c:	b088      	sub	sp, #32
 801387e:	af04      	add	r7, sp, #16
 8013880:	60f8      	str	r0, [r7, #12]
 8013882:	60b9      	str	r1, [r7, #8]
 8013884:	4611      	mov	r1, r2
 8013886:	461a      	mov	r2, r3
 8013888:	460b      	mov	r3, r1
 801388a:	80fb      	strh	r3, [r7, #6]
 801388c:	4613      	mov	r3, r2
 801388e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013890:	7979      	ldrb	r1, [r7, #5]
 8013892:	2300      	movs	r3, #0
 8013894:	9303      	str	r3, [sp, #12]
 8013896:	88fb      	ldrh	r3, [r7, #6]
 8013898:	9302      	str	r3, [sp, #8]
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	9301      	str	r3, [sp, #4]
 801389e:	2301      	movs	r3, #1
 80138a0:	9300      	str	r3, [sp, #0]
 80138a2:	2300      	movs	r3, #0
 80138a4:	2201      	movs	r2, #1
 80138a6:	68f8      	ldr	r0, [r7, #12]
 80138a8:	f7fe f947 	bl	8011b3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80138ac:	2300      	movs	r3, #0

}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3710      	adds	r7, #16
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}

080138b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80138b6:	b580      	push	{r7, lr}
 80138b8:	b088      	sub	sp, #32
 80138ba:	af04      	add	r7, sp, #16
 80138bc:	60f8      	str	r0, [r7, #12]
 80138be:	60b9      	str	r1, [r7, #8]
 80138c0:	4611      	mov	r1, r2
 80138c2:	461a      	mov	r2, r3
 80138c4:	460b      	mov	r3, r1
 80138c6:	80fb      	strh	r3, [r7, #6]
 80138c8:	4613      	mov	r3, r2
 80138ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d001      	beq.n	80138da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80138d6:	2300      	movs	r3, #0
 80138d8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80138da:	7979      	ldrb	r1, [r7, #5]
 80138dc:	7e3b      	ldrb	r3, [r7, #24]
 80138de:	9303      	str	r3, [sp, #12]
 80138e0:	88fb      	ldrh	r3, [r7, #6]
 80138e2:	9302      	str	r3, [sp, #8]
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	9301      	str	r3, [sp, #4]
 80138e8:	2301      	movs	r3, #1
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	2302      	movs	r3, #2
 80138ee:	2200      	movs	r2, #0
 80138f0:	68f8      	ldr	r0, [r7, #12]
 80138f2:	f7fe f922 	bl	8011b3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80138f6:	2300      	movs	r3, #0
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3710      	adds	r7, #16
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}

08013900 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b088      	sub	sp, #32
 8013904:	af04      	add	r7, sp, #16
 8013906:	60f8      	str	r0, [r7, #12]
 8013908:	60b9      	str	r1, [r7, #8]
 801390a:	4611      	mov	r1, r2
 801390c:	461a      	mov	r2, r3
 801390e:	460b      	mov	r3, r1
 8013910:	80fb      	strh	r3, [r7, #6]
 8013912:	4613      	mov	r3, r2
 8013914:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013916:	7979      	ldrb	r1, [r7, #5]
 8013918:	2300      	movs	r3, #0
 801391a:	9303      	str	r3, [sp, #12]
 801391c:	88fb      	ldrh	r3, [r7, #6]
 801391e:	9302      	str	r3, [sp, #8]
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	9301      	str	r3, [sp, #4]
 8013924:	2301      	movs	r3, #1
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	2302      	movs	r3, #2
 801392a:	2201      	movs	r2, #1
 801392c:	68f8      	ldr	r0, [r7, #12]
 801392e:	f7fe f904 	bl	8011b3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8013932:	2300      	movs	r3, #0
}
 8013934:	4618      	mov	r0, r3
 8013936:	3710      	adds	r7, #16
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}

0801393c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b086      	sub	sp, #24
 8013940:	af04      	add	r7, sp, #16
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	4608      	mov	r0, r1
 8013946:	4611      	mov	r1, r2
 8013948:	461a      	mov	r2, r3
 801394a:	4603      	mov	r3, r0
 801394c:	70fb      	strb	r3, [r7, #3]
 801394e:	460b      	mov	r3, r1
 8013950:	70bb      	strb	r3, [r7, #2]
 8013952:	4613      	mov	r3, r2
 8013954:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8013956:	7878      	ldrb	r0, [r7, #1]
 8013958:	78ba      	ldrb	r2, [r7, #2]
 801395a:	78f9      	ldrb	r1, [r7, #3]
 801395c:	8b3b      	ldrh	r3, [r7, #24]
 801395e:	9302      	str	r3, [sp, #8]
 8013960:	7d3b      	ldrb	r3, [r7, #20]
 8013962:	9301      	str	r3, [sp, #4]
 8013964:	7c3b      	ldrb	r3, [r7, #16]
 8013966:	9300      	str	r3, [sp, #0]
 8013968:	4603      	mov	r3, r0
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f7fe f897 	bl	8011a9e <USBH_LL_OpenPipe>

  return USBH_OK;
 8013970:	2300      	movs	r3, #0
}
 8013972:	4618      	mov	r0, r3
 8013974:	3708      	adds	r7, #8
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}

0801397a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801397a:	b580      	push	{r7, lr}
 801397c:	b082      	sub	sp, #8
 801397e:	af00      	add	r7, sp, #0
 8013980:	6078      	str	r0, [r7, #4]
 8013982:	460b      	mov	r3, r1
 8013984:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8013986:	78fb      	ldrb	r3, [r7, #3]
 8013988:	4619      	mov	r1, r3
 801398a:	6878      	ldr	r0, [r7, #4]
 801398c:	f7fe f8b6 	bl	8011afc <USBH_LL_ClosePipe>

  return USBH_OK;
 8013990:	2300      	movs	r3, #0
}
 8013992:	4618      	mov	r0, r3
 8013994:	3708      	adds	r7, #8
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}

0801399a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801399a:	b580      	push	{r7, lr}
 801399c:	b084      	sub	sp, #16
 801399e:	af00      	add	r7, sp, #0
 80139a0:	6078      	str	r0, [r7, #4]
 80139a2:	460b      	mov	r3, r1
 80139a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f000 f836 	bl	8013a18 <USBH_GetFreePipe>
 80139ac:	4603      	mov	r3, r0
 80139ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80139b0:	89fb      	ldrh	r3, [r7, #14]
 80139b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139b6:	4293      	cmp	r3, r2
 80139b8:	d00a      	beq.n	80139d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80139ba:	78fa      	ldrb	r2, [r7, #3]
 80139bc:	89fb      	ldrh	r3, [r7, #14]
 80139be:	f003 030f 	and.w	r3, r3, #15
 80139c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80139c6:	6879      	ldr	r1, [r7, #4]
 80139c8:	33e0      	adds	r3, #224	; 0xe0
 80139ca:	009b      	lsls	r3, r3, #2
 80139cc:	440b      	add	r3, r1
 80139ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80139d0:	89fb      	ldrh	r3, [r7, #14]
 80139d2:	b2db      	uxtb	r3, r3
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	3710      	adds	r7, #16
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}

080139dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80139dc:	b480      	push	{r7}
 80139de:	b083      	sub	sp, #12
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	460b      	mov	r3, r1
 80139e6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80139e8:	78fb      	ldrb	r3, [r7, #3]
 80139ea:	2b0f      	cmp	r3, #15
 80139ec:	d80d      	bhi.n	8013a0a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80139ee:	78fb      	ldrb	r3, [r7, #3]
 80139f0:	687a      	ldr	r2, [r7, #4]
 80139f2:	33e0      	adds	r3, #224	; 0xe0
 80139f4:	009b      	lsls	r3, r3, #2
 80139f6:	4413      	add	r3, r2
 80139f8:	685a      	ldr	r2, [r3, #4]
 80139fa:	78fb      	ldrb	r3, [r7, #3]
 80139fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8013a00:	6879      	ldr	r1, [r7, #4]
 8013a02:	33e0      	adds	r3, #224	; 0xe0
 8013a04:	009b      	lsls	r3, r3, #2
 8013a06:	440b      	add	r3, r1
 8013a08:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8013a0a:	2300      	movs	r3, #0
}
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	370c      	adds	r7, #12
 8013a10:	46bd      	mov	sp, r7
 8013a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a16:	4770      	bx	lr

08013a18 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8013a18:	b480      	push	{r7}
 8013a1a:	b085      	sub	sp, #20
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8013a20:	2300      	movs	r3, #0
 8013a22:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8013a24:	2300      	movs	r3, #0
 8013a26:	73fb      	strb	r3, [r7, #15]
 8013a28:	e00f      	b.n	8013a4a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8013a2a:	7bfb      	ldrb	r3, [r7, #15]
 8013a2c:	687a      	ldr	r2, [r7, #4]
 8013a2e:	33e0      	adds	r3, #224	; 0xe0
 8013a30:	009b      	lsls	r3, r3, #2
 8013a32:	4413      	add	r3, r2
 8013a34:	685b      	ldr	r3, [r3, #4]
 8013a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d102      	bne.n	8013a44 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8013a3e:	7bfb      	ldrb	r3, [r7, #15]
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	e007      	b.n	8013a54 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8013a44:	7bfb      	ldrb	r3, [r7, #15]
 8013a46:	3301      	adds	r3, #1
 8013a48:	73fb      	strb	r3, [r7, #15]
 8013a4a:	7bfb      	ldrb	r3, [r7, #15]
 8013a4c:	2b0f      	cmp	r3, #15
 8013a4e:	d9ec      	bls.n	8013a2a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8013a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	3714      	adds	r7, #20
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5e:	4770      	bx	lr

08013a60 <__errno>:
 8013a60:	4b01      	ldr	r3, [pc, #4]	; (8013a68 <__errno+0x8>)
 8013a62:	6818      	ldr	r0, [r3, #0]
 8013a64:	4770      	bx	lr
 8013a66:	bf00      	nop
 8013a68:	20000030 	.word	0x20000030

08013a6c <__libc_init_array>:
 8013a6c:	b570      	push	{r4, r5, r6, lr}
 8013a6e:	4d0d      	ldr	r5, [pc, #52]	; (8013aa4 <__libc_init_array+0x38>)
 8013a70:	4c0d      	ldr	r4, [pc, #52]	; (8013aa8 <__libc_init_array+0x3c>)
 8013a72:	1b64      	subs	r4, r4, r5
 8013a74:	10a4      	asrs	r4, r4, #2
 8013a76:	2600      	movs	r6, #0
 8013a78:	42a6      	cmp	r6, r4
 8013a7a:	d109      	bne.n	8013a90 <__libc_init_array+0x24>
 8013a7c:	4d0b      	ldr	r5, [pc, #44]	; (8013aac <__libc_init_array+0x40>)
 8013a7e:	4c0c      	ldr	r4, [pc, #48]	; (8013ab0 <__libc_init_array+0x44>)
 8013a80:	f000 f9a4 	bl	8013dcc <_init>
 8013a84:	1b64      	subs	r4, r4, r5
 8013a86:	10a4      	asrs	r4, r4, #2
 8013a88:	2600      	movs	r6, #0
 8013a8a:	42a6      	cmp	r6, r4
 8013a8c:	d105      	bne.n	8013a9a <__libc_init_array+0x2e>
 8013a8e:	bd70      	pop	{r4, r5, r6, pc}
 8013a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a94:	4798      	blx	r3
 8013a96:	3601      	adds	r6, #1
 8013a98:	e7ee      	b.n	8013a78 <__libc_init_array+0xc>
 8013a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a9e:	4798      	blx	r3
 8013aa0:	3601      	adds	r6, #1
 8013aa2:	e7f2      	b.n	8013a8a <__libc_init_array+0x1e>
 8013aa4:	080143c8 	.word	0x080143c8
 8013aa8:	080143c8 	.word	0x080143c8
 8013aac:	080143c8 	.word	0x080143c8
 8013ab0:	080143cc 	.word	0x080143cc

08013ab4 <malloc>:
 8013ab4:	4b02      	ldr	r3, [pc, #8]	; (8013ac0 <malloc+0xc>)
 8013ab6:	4601      	mov	r1, r0
 8013ab8:	6818      	ldr	r0, [r3, #0]
 8013aba:	f000 b88d 	b.w	8013bd8 <_malloc_r>
 8013abe:	bf00      	nop
 8013ac0:	20000030 	.word	0x20000030

08013ac4 <free>:
 8013ac4:	4b02      	ldr	r3, [pc, #8]	; (8013ad0 <free+0xc>)
 8013ac6:	4601      	mov	r1, r0
 8013ac8:	6818      	ldr	r0, [r3, #0]
 8013aca:	f000 b819 	b.w	8013b00 <_free_r>
 8013ace:	bf00      	nop
 8013ad0:	20000030 	.word	0x20000030

08013ad4 <memcpy>:
 8013ad4:	440a      	add	r2, r1
 8013ad6:	4291      	cmp	r1, r2
 8013ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8013adc:	d100      	bne.n	8013ae0 <memcpy+0xc>
 8013ade:	4770      	bx	lr
 8013ae0:	b510      	push	{r4, lr}
 8013ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013aea:	4291      	cmp	r1, r2
 8013aec:	d1f9      	bne.n	8013ae2 <memcpy+0xe>
 8013aee:	bd10      	pop	{r4, pc}

08013af0 <memset>:
 8013af0:	4402      	add	r2, r0
 8013af2:	4603      	mov	r3, r0
 8013af4:	4293      	cmp	r3, r2
 8013af6:	d100      	bne.n	8013afa <memset+0xa>
 8013af8:	4770      	bx	lr
 8013afa:	f803 1b01 	strb.w	r1, [r3], #1
 8013afe:	e7f9      	b.n	8013af4 <memset+0x4>

08013b00 <_free_r>:
 8013b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b02:	2900      	cmp	r1, #0
 8013b04:	d044      	beq.n	8013b90 <_free_r+0x90>
 8013b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b0a:	9001      	str	r0, [sp, #4]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	f1a1 0404 	sub.w	r4, r1, #4
 8013b12:	bfb8      	it	lt
 8013b14:	18e4      	addlt	r4, r4, r3
 8013b16:	f000 f94d 	bl	8013db4 <__malloc_lock>
 8013b1a:	4a1e      	ldr	r2, [pc, #120]	; (8013b94 <_free_r+0x94>)
 8013b1c:	9801      	ldr	r0, [sp, #4]
 8013b1e:	6813      	ldr	r3, [r2, #0]
 8013b20:	b933      	cbnz	r3, 8013b30 <_free_r+0x30>
 8013b22:	6063      	str	r3, [r4, #4]
 8013b24:	6014      	str	r4, [r2, #0]
 8013b26:	b003      	add	sp, #12
 8013b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b2c:	f000 b948 	b.w	8013dc0 <__malloc_unlock>
 8013b30:	42a3      	cmp	r3, r4
 8013b32:	d908      	bls.n	8013b46 <_free_r+0x46>
 8013b34:	6825      	ldr	r5, [r4, #0]
 8013b36:	1961      	adds	r1, r4, r5
 8013b38:	428b      	cmp	r3, r1
 8013b3a:	bf01      	itttt	eq
 8013b3c:	6819      	ldreq	r1, [r3, #0]
 8013b3e:	685b      	ldreq	r3, [r3, #4]
 8013b40:	1949      	addeq	r1, r1, r5
 8013b42:	6021      	streq	r1, [r4, #0]
 8013b44:	e7ed      	b.n	8013b22 <_free_r+0x22>
 8013b46:	461a      	mov	r2, r3
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	b10b      	cbz	r3, 8013b50 <_free_r+0x50>
 8013b4c:	42a3      	cmp	r3, r4
 8013b4e:	d9fa      	bls.n	8013b46 <_free_r+0x46>
 8013b50:	6811      	ldr	r1, [r2, #0]
 8013b52:	1855      	adds	r5, r2, r1
 8013b54:	42a5      	cmp	r5, r4
 8013b56:	d10b      	bne.n	8013b70 <_free_r+0x70>
 8013b58:	6824      	ldr	r4, [r4, #0]
 8013b5a:	4421      	add	r1, r4
 8013b5c:	1854      	adds	r4, r2, r1
 8013b5e:	42a3      	cmp	r3, r4
 8013b60:	6011      	str	r1, [r2, #0]
 8013b62:	d1e0      	bne.n	8013b26 <_free_r+0x26>
 8013b64:	681c      	ldr	r4, [r3, #0]
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	6053      	str	r3, [r2, #4]
 8013b6a:	4421      	add	r1, r4
 8013b6c:	6011      	str	r1, [r2, #0]
 8013b6e:	e7da      	b.n	8013b26 <_free_r+0x26>
 8013b70:	d902      	bls.n	8013b78 <_free_r+0x78>
 8013b72:	230c      	movs	r3, #12
 8013b74:	6003      	str	r3, [r0, #0]
 8013b76:	e7d6      	b.n	8013b26 <_free_r+0x26>
 8013b78:	6825      	ldr	r5, [r4, #0]
 8013b7a:	1961      	adds	r1, r4, r5
 8013b7c:	428b      	cmp	r3, r1
 8013b7e:	bf04      	itt	eq
 8013b80:	6819      	ldreq	r1, [r3, #0]
 8013b82:	685b      	ldreq	r3, [r3, #4]
 8013b84:	6063      	str	r3, [r4, #4]
 8013b86:	bf04      	itt	eq
 8013b88:	1949      	addeq	r1, r1, r5
 8013b8a:	6021      	streq	r1, [r4, #0]
 8013b8c:	6054      	str	r4, [r2, #4]
 8013b8e:	e7ca      	b.n	8013b26 <_free_r+0x26>
 8013b90:	b003      	add	sp, #12
 8013b92:	bd30      	pop	{r4, r5, pc}
 8013b94:	2000905c 	.word	0x2000905c

08013b98 <sbrk_aligned>:
 8013b98:	b570      	push	{r4, r5, r6, lr}
 8013b9a:	4e0e      	ldr	r6, [pc, #56]	; (8013bd4 <sbrk_aligned+0x3c>)
 8013b9c:	460c      	mov	r4, r1
 8013b9e:	6831      	ldr	r1, [r6, #0]
 8013ba0:	4605      	mov	r5, r0
 8013ba2:	b911      	cbnz	r1, 8013baa <sbrk_aligned+0x12>
 8013ba4:	f000 f8f6 	bl	8013d94 <_sbrk_r>
 8013ba8:	6030      	str	r0, [r6, #0]
 8013baa:	4621      	mov	r1, r4
 8013bac:	4628      	mov	r0, r5
 8013bae:	f000 f8f1 	bl	8013d94 <_sbrk_r>
 8013bb2:	1c43      	adds	r3, r0, #1
 8013bb4:	d00a      	beq.n	8013bcc <sbrk_aligned+0x34>
 8013bb6:	1cc4      	adds	r4, r0, #3
 8013bb8:	f024 0403 	bic.w	r4, r4, #3
 8013bbc:	42a0      	cmp	r0, r4
 8013bbe:	d007      	beq.n	8013bd0 <sbrk_aligned+0x38>
 8013bc0:	1a21      	subs	r1, r4, r0
 8013bc2:	4628      	mov	r0, r5
 8013bc4:	f000 f8e6 	bl	8013d94 <_sbrk_r>
 8013bc8:	3001      	adds	r0, #1
 8013bca:	d101      	bne.n	8013bd0 <sbrk_aligned+0x38>
 8013bcc:	f04f 34ff 	mov.w	r4, #4294967295
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	bd70      	pop	{r4, r5, r6, pc}
 8013bd4:	20009060 	.word	0x20009060

08013bd8 <_malloc_r>:
 8013bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bdc:	1ccd      	adds	r5, r1, #3
 8013bde:	f025 0503 	bic.w	r5, r5, #3
 8013be2:	3508      	adds	r5, #8
 8013be4:	2d0c      	cmp	r5, #12
 8013be6:	bf38      	it	cc
 8013be8:	250c      	movcc	r5, #12
 8013bea:	2d00      	cmp	r5, #0
 8013bec:	4607      	mov	r7, r0
 8013bee:	db01      	blt.n	8013bf4 <_malloc_r+0x1c>
 8013bf0:	42a9      	cmp	r1, r5
 8013bf2:	d905      	bls.n	8013c00 <_malloc_r+0x28>
 8013bf4:	230c      	movs	r3, #12
 8013bf6:	603b      	str	r3, [r7, #0]
 8013bf8:	2600      	movs	r6, #0
 8013bfa:	4630      	mov	r0, r6
 8013bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c00:	4e2e      	ldr	r6, [pc, #184]	; (8013cbc <_malloc_r+0xe4>)
 8013c02:	f000 f8d7 	bl	8013db4 <__malloc_lock>
 8013c06:	6833      	ldr	r3, [r6, #0]
 8013c08:	461c      	mov	r4, r3
 8013c0a:	bb34      	cbnz	r4, 8013c5a <_malloc_r+0x82>
 8013c0c:	4629      	mov	r1, r5
 8013c0e:	4638      	mov	r0, r7
 8013c10:	f7ff ffc2 	bl	8013b98 <sbrk_aligned>
 8013c14:	1c43      	adds	r3, r0, #1
 8013c16:	4604      	mov	r4, r0
 8013c18:	d14d      	bne.n	8013cb6 <_malloc_r+0xde>
 8013c1a:	6834      	ldr	r4, [r6, #0]
 8013c1c:	4626      	mov	r6, r4
 8013c1e:	2e00      	cmp	r6, #0
 8013c20:	d140      	bne.n	8013ca4 <_malloc_r+0xcc>
 8013c22:	6823      	ldr	r3, [r4, #0]
 8013c24:	4631      	mov	r1, r6
 8013c26:	4638      	mov	r0, r7
 8013c28:	eb04 0803 	add.w	r8, r4, r3
 8013c2c:	f000 f8b2 	bl	8013d94 <_sbrk_r>
 8013c30:	4580      	cmp	r8, r0
 8013c32:	d13a      	bne.n	8013caa <_malloc_r+0xd2>
 8013c34:	6821      	ldr	r1, [r4, #0]
 8013c36:	3503      	adds	r5, #3
 8013c38:	1a6d      	subs	r5, r5, r1
 8013c3a:	f025 0503 	bic.w	r5, r5, #3
 8013c3e:	3508      	adds	r5, #8
 8013c40:	2d0c      	cmp	r5, #12
 8013c42:	bf38      	it	cc
 8013c44:	250c      	movcc	r5, #12
 8013c46:	4629      	mov	r1, r5
 8013c48:	4638      	mov	r0, r7
 8013c4a:	f7ff ffa5 	bl	8013b98 <sbrk_aligned>
 8013c4e:	3001      	adds	r0, #1
 8013c50:	d02b      	beq.n	8013caa <_malloc_r+0xd2>
 8013c52:	6823      	ldr	r3, [r4, #0]
 8013c54:	442b      	add	r3, r5
 8013c56:	6023      	str	r3, [r4, #0]
 8013c58:	e00e      	b.n	8013c78 <_malloc_r+0xa0>
 8013c5a:	6822      	ldr	r2, [r4, #0]
 8013c5c:	1b52      	subs	r2, r2, r5
 8013c5e:	d41e      	bmi.n	8013c9e <_malloc_r+0xc6>
 8013c60:	2a0b      	cmp	r2, #11
 8013c62:	d916      	bls.n	8013c92 <_malloc_r+0xba>
 8013c64:	1961      	adds	r1, r4, r5
 8013c66:	42a3      	cmp	r3, r4
 8013c68:	6025      	str	r5, [r4, #0]
 8013c6a:	bf18      	it	ne
 8013c6c:	6059      	strne	r1, [r3, #4]
 8013c6e:	6863      	ldr	r3, [r4, #4]
 8013c70:	bf08      	it	eq
 8013c72:	6031      	streq	r1, [r6, #0]
 8013c74:	5162      	str	r2, [r4, r5]
 8013c76:	604b      	str	r3, [r1, #4]
 8013c78:	4638      	mov	r0, r7
 8013c7a:	f104 060b 	add.w	r6, r4, #11
 8013c7e:	f000 f89f 	bl	8013dc0 <__malloc_unlock>
 8013c82:	f026 0607 	bic.w	r6, r6, #7
 8013c86:	1d23      	adds	r3, r4, #4
 8013c88:	1af2      	subs	r2, r6, r3
 8013c8a:	d0b6      	beq.n	8013bfa <_malloc_r+0x22>
 8013c8c:	1b9b      	subs	r3, r3, r6
 8013c8e:	50a3      	str	r3, [r4, r2]
 8013c90:	e7b3      	b.n	8013bfa <_malloc_r+0x22>
 8013c92:	6862      	ldr	r2, [r4, #4]
 8013c94:	42a3      	cmp	r3, r4
 8013c96:	bf0c      	ite	eq
 8013c98:	6032      	streq	r2, [r6, #0]
 8013c9a:	605a      	strne	r2, [r3, #4]
 8013c9c:	e7ec      	b.n	8013c78 <_malloc_r+0xa0>
 8013c9e:	4623      	mov	r3, r4
 8013ca0:	6864      	ldr	r4, [r4, #4]
 8013ca2:	e7b2      	b.n	8013c0a <_malloc_r+0x32>
 8013ca4:	4634      	mov	r4, r6
 8013ca6:	6876      	ldr	r6, [r6, #4]
 8013ca8:	e7b9      	b.n	8013c1e <_malloc_r+0x46>
 8013caa:	230c      	movs	r3, #12
 8013cac:	603b      	str	r3, [r7, #0]
 8013cae:	4638      	mov	r0, r7
 8013cb0:	f000 f886 	bl	8013dc0 <__malloc_unlock>
 8013cb4:	e7a1      	b.n	8013bfa <_malloc_r+0x22>
 8013cb6:	6025      	str	r5, [r4, #0]
 8013cb8:	e7de      	b.n	8013c78 <_malloc_r+0xa0>
 8013cba:	bf00      	nop
 8013cbc:	2000905c 	.word	0x2000905c

08013cc0 <cleanup_glue>:
 8013cc0:	b538      	push	{r3, r4, r5, lr}
 8013cc2:	460c      	mov	r4, r1
 8013cc4:	6809      	ldr	r1, [r1, #0]
 8013cc6:	4605      	mov	r5, r0
 8013cc8:	b109      	cbz	r1, 8013cce <cleanup_glue+0xe>
 8013cca:	f7ff fff9 	bl	8013cc0 <cleanup_glue>
 8013cce:	4621      	mov	r1, r4
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cd6:	f7ff bf13 	b.w	8013b00 <_free_r>
	...

08013cdc <_reclaim_reent>:
 8013cdc:	4b2c      	ldr	r3, [pc, #176]	; (8013d90 <_reclaim_reent+0xb4>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	4283      	cmp	r3, r0
 8013ce2:	b570      	push	{r4, r5, r6, lr}
 8013ce4:	4604      	mov	r4, r0
 8013ce6:	d051      	beq.n	8013d8c <_reclaim_reent+0xb0>
 8013ce8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013cea:	b143      	cbz	r3, 8013cfe <_reclaim_reent+0x22>
 8013cec:	68db      	ldr	r3, [r3, #12]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d14a      	bne.n	8013d88 <_reclaim_reent+0xac>
 8013cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013cf4:	6819      	ldr	r1, [r3, #0]
 8013cf6:	b111      	cbz	r1, 8013cfe <_reclaim_reent+0x22>
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f7ff ff01 	bl	8013b00 <_free_r>
 8013cfe:	6961      	ldr	r1, [r4, #20]
 8013d00:	b111      	cbz	r1, 8013d08 <_reclaim_reent+0x2c>
 8013d02:	4620      	mov	r0, r4
 8013d04:	f7ff fefc 	bl	8013b00 <_free_r>
 8013d08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013d0a:	b111      	cbz	r1, 8013d12 <_reclaim_reent+0x36>
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	f7ff fef7 	bl	8013b00 <_free_r>
 8013d12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013d14:	b111      	cbz	r1, 8013d1c <_reclaim_reent+0x40>
 8013d16:	4620      	mov	r0, r4
 8013d18:	f7ff fef2 	bl	8013b00 <_free_r>
 8013d1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013d1e:	b111      	cbz	r1, 8013d26 <_reclaim_reent+0x4a>
 8013d20:	4620      	mov	r0, r4
 8013d22:	f7ff feed 	bl	8013b00 <_free_r>
 8013d26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013d28:	b111      	cbz	r1, 8013d30 <_reclaim_reent+0x54>
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	f7ff fee8 	bl	8013b00 <_free_r>
 8013d30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013d32:	b111      	cbz	r1, 8013d3a <_reclaim_reent+0x5e>
 8013d34:	4620      	mov	r0, r4
 8013d36:	f7ff fee3 	bl	8013b00 <_free_r>
 8013d3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013d3c:	b111      	cbz	r1, 8013d44 <_reclaim_reent+0x68>
 8013d3e:	4620      	mov	r0, r4
 8013d40:	f7ff fede 	bl	8013b00 <_free_r>
 8013d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d46:	b111      	cbz	r1, 8013d4e <_reclaim_reent+0x72>
 8013d48:	4620      	mov	r0, r4
 8013d4a:	f7ff fed9 	bl	8013b00 <_free_r>
 8013d4e:	69a3      	ldr	r3, [r4, #24]
 8013d50:	b1e3      	cbz	r3, 8013d8c <_reclaim_reent+0xb0>
 8013d52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013d54:	4620      	mov	r0, r4
 8013d56:	4798      	blx	r3
 8013d58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013d5a:	b1b9      	cbz	r1, 8013d8c <_reclaim_reent+0xb0>
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d62:	f7ff bfad 	b.w	8013cc0 <cleanup_glue>
 8013d66:	5949      	ldr	r1, [r1, r5]
 8013d68:	b941      	cbnz	r1, 8013d7c <_reclaim_reent+0xa0>
 8013d6a:	3504      	adds	r5, #4
 8013d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d6e:	2d80      	cmp	r5, #128	; 0x80
 8013d70:	68d9      	ldr	r1, [r3, #12]
 8013d72:	d1f8      	bne.n	8013d66 <_reclaim_reent+0x8a>
 8013d74:	4620      	mov	r0, r4
 8013d76:	f7ff fec3 	bl	8013b00 <_free_r>
 8013d7a:	e7ba      	b.n	8013cf2 <_reclaim_reent+0x16>
 8013d7c:	680e      	ldr	r6, [r1, #0]
 8013d7e:	4620      	mov	r0, r4
 8013d80:	f7ff febe 	bl	8013b00 <_free_r>
 8013d84:	4631      	mov	r1, r6
 8013d86:	e7ef      	b.n	8013d68 <_reclaim_reent+0x8c>
 8013d88:	2500      	movs	r5, #0
 8013d8a:	e7ef      	b.n	8013d6c <_reclaim_reent+0x90>
 8013d8c:	bd70      	pop	{r4, r5, r6, pc}
 8013d8e:	bf00      	nop
 8013d90:	20000030 	.word	0x20000030

08013d94 <_sbrk_r>:
 8013d94:	b538      	push	{r3, r4, r5, lr}
 8013d96:	4d06      	ldr	r5, [pc, #24]	; (8013db0 <_sbrk_r+0x1c>)
 8013d98:	2300      	movs	r3, #0
 8013d9a:	4604      	mov	r4, r0
 8013d9c:	4608      	mov	r0, r1
 8013d9e:	602b      	str	r3, [r5, #0]
 8013da0:	f7ed fe12 	bl	80019c8 <_sbrk>
 8013da4:	1c43      	adds	r3, r0, #1
 8013da6:	d102      	bne.n	8013dae <_sbrk_r+0x1a>
 8013da8:	682b      	ldr	r3, [r5, #0]
 8013daa:	b103      	cbz	r3, 8013dae <_sbrk_r+0x1a>
 8013dac:	6023      	str	r3, [r4, #0]
 8013dae:	bd38      	pop	{r3, r4, r5, pc}
 8013db0:	20009064 	.word	0x20009064

08013db4 <__malloc_lock>:
 8013db4:	4801      	ldr	r0, [pc, #4]	; (8013dbc <__malloc_lock+0x8>)
 8013db6:	f7ed bff8 	b.w	8001daa <__retarget_lock_acquire_recursive>
 8013dba:	bf00      	nop
 8013dbc:	200007f0 	.word	0x200007f0

08013dc0 <__malloc_unlock>:
 8013dc0:	4801      	ldr	r0, [pc, #4]	; (8013dc8 <__malloc_unlock+0x8>)
 8013dc2:	f7ee b806 	b.w	8001dd2 <__retarget_lock_release_recursive>
 8013dc6:	bf00      	nop
 8013dc8:	200007f0 	.word	0x200007f0

08013dcc <_init>:
 8013dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dce:	bf00      	nop
 8013dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013dd2:	bc08      	pop	{r3}
 8013dd4:	469e      	mov	lr, r3
 8013dd6:	4770      	bx	lr

08013dd8 <_fini>:
 8013dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dda:	bf00      	nop
 8013ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013dde:	bc08      	pop	{r3}
 8013de0:	469e      	mov	lr, r3
 8013de2:	4770      	bx	lr
